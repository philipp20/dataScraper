"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[4071],{2282:(n,e,i)=>{i.d(e,{A:()=>r});var a=i(74848),t=i(39409);let r=()=>(0,a.jsx)("div",{className:"flex justify-center bg-slate-200",children:(0,a.jsxs)("div",{className:"flex flex-col items-center w-full",children:[(0,a.jsxs)("div",{className:"flex flex-col items-center w-full p-8",children:[(0,a.jsx)("div",{className:"flex items-center justify-center rounded-3xl bg-white h-28 w-28",children:(0,a.jsx)(t.V,{src:"/static/icons/icon-192x192.png",properties:"w-20 h-20 object-contain"})}),(0,a.jsxs)("div",{className:"flex flex-col items-center text-center mt-8",children:[(0,a.jsx)("span",{className:"text-xl font-medium",children:"HiringCafe"}),(0,a.jsx)("span",{className:"font-medium mt-2 text-gray-600",children:"Get the app in 5 seconds. No download required."})]})]}),(0,a.jsxs)("div",{className:"flex flex-col items-center w-full p-8 bg-slate-600 text-white",children:[(0,a.jsx)(t.V,{src:"/static/images/share-btn.png",properties:"w-full h-20 object-contain"}),(0,a.jsx)("span",{className:"mt-4 text-xl mb-16",children:"1. Tap the share button on the bottom of the screen"}),(0,a.jsx)(t.V,{src:"/static/images/add-to-home-screen-btn.png",properties:"w-full h-44 object-contain"}),(0,a.jsx)("span",{className:"mt-4 text-xl",children:'2. Tap the "Add to Home Screen" button'}),(0,a.jsx)("span",{className:"mt-4 text-xl",children:'3. Tap the "Add" button in the top right corner'})]})]})})},23802:(n,e,i)=>{i.d(e,{A:()=>nk});var a=i(74848),t=i(73558),r=i(17207);function o(){let{company:n}=(0,r.A)();return n?(0,a.jsx)("div",{className:"flex justify-center items-center flex-col px-4 md:px-8 xl:px-16",children:(0,a.jsxs)("span",{className:"text-2xl font-extrabold",children:["Jobs at"," ",(0,a.jsx)("button",{onClick:()=>{null!==n.website&&window.open("//".concat(n.website),"_blank")},disabled:null===n.website,className:"font-bold ".concat(n.website&&"text-purple-500"),children:n.name})]})}):null}var l=i(96540),s=i(67310),m=i(99722),u=i(59653),p=i(16409);let d=JSON.parse('{"v":"5.7.11","fr":25,"ip":0,"op":51,"w":512,"h":512,"nm":"Comp 55","ddd":0,"assets":[],"layers":[{"ddd":0,"ind":1,"ty":4,"nm":"Layer 6","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":1,"k":[{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":22,"s":[190.983,202.931,0],"to":[1.167,-1.667,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":28.353,"s":[197.983,192.931,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":35.5,"s":[190.983,202.931,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":41.853,"s":[197.983,192.931,0],"to":[0,0,0],"ti":[1.167,-1.667,0]},{"t":49,"s":[190.983,202.931,0]}],"ix":2,"l":2,"x":"var $bm_rt;\\nvar fx = effect(\'ŝlosilo pli pura 2\');\\nvar doAnticipation = fx(1).value;\\nvar doInterpolation = fx(2).value;\\nvar doFollowThrough = fx(3).value;\\nvar damping = $bm_div(fx(15).value, 10);\\nvar elasticity = $bm_div(fx(13).value, 10);\\nvar bounce = fx(17).value;\\nvar anticipationDuration = fx(5).value;\\nvar anticipationQuantity = $bm_div(fx(6).value, 100);\\nvar slowIn = $bm_div(fx(9).value, 100);\\nvar slowOut = $bm_div(fx(10).value, 100);\\nvar spatialMode = fx(21).value;\\nvar spatialDoInterpolation = fx(20).value;\\nvar moBlurPrecision = fx(32).value;\\nvar elasticityRandom = fx(14).value;\\nvar dampingRandom = fx(16).value;\\nvar softBody = fx(28).value;\\nvar flexibility = $bm_div(fx(29).value, 100);\\nvar doOverlap = fx(23).value;\\nvar overlapDuration = fx(24).value;\\nvar overlapRandom = fx(25).value;\\nvar threshold = $bm_div($bm_div(1, moBlurPrecision), 1000);\\nvar zeroValue;\\nif ($bm_isInstanceOfArray(value)) {\\n    if (value.length == 2)\\n        zeroValue = [\\n            0,\\n            0\\n        ];\\n    else if (value.length == 3)\\n        zeroValue = [\\n            0,\\n            0,\\n            0\\n        ];\\n    else if (value.length == 4)\\n        zeroValue = [\\n            0,\\n            0,\\n            0,\\n            0\\n        ];\\n} else\\n    zeroValue = 0;\\nvar isThisSpatial = isSpatial(thisProperty);\\nvar isThisPosition = thisProperty === $bm_transform.position;\\nvar simulate = false;\\nif (isThisSpatial) {\\n    doInterpolation = doInterpolation && spatialDoInterpolation;\\n    if (isThisPosition && thisProperty.numKeys > 0) {\\n        doOverlap = false;\\n        simulate = false;\\n    } else {\\n        simulate = spatialMode == 2;\\n        doOverlap = overlapDuration != 0 && doOverlap && simulate;\\n    }\\n} else {\\n    doOverlap = false;\\n}\\nif (!doOverlap) {\\n    overlapDuration = 0;\\n}\\nif (simulate && softBody && isThisSpatial && !isThisPosition && (doFollowThrough || doOverlap)) {\\n    var distanceRatio = $bm_div(length(valueAtTime(0), $bm_transform.anchorPoint), $bm_div(thisLayer.width, 2));\\n    distanceRatio = $bm_div($bm_sum(1, $bm_mul(distanceRatio, flexibility)), 2);\\n    if (doFollowThrough) {\\n        elasticity = $bm_div(elasticity, distanceRatio);\\n        damping = $bm_div(damping, distanceRatio);\\n    }\\n    if (doOverlap) {\\n        overlapDuration = $bm_mul(overlapDuration, distanceRatio);\\n    }\\n}\\nseedRandom(0, true);\\nif (doFollowThrough) {\\n    if (elasticityRandom > 0)\\n        elasticity = addNoise(elasticity, elasticityRandom);\\n    if (dampingRandom > 0)\\n        damping = addNoise(damping, dampingRandom);\\n}\\nif (doOverlap) {\\n    if (doOverlap && overlapRandom > 0)\\n        overlapDuration = addNoise(overlapDuration, overlapRandom);\\n}\\nvar result = value;\\nfunction isSpatial(prop) {\\n    if (!(prop.value instanceof Array))\\n        return false;\\n    if (prop.value.length != 2 && prop.value.length != 3)\\n        return false;\\n    try {\\n        if (typeof prop.speed !== \'undefined\')\\n            return true;\\n    } catch (e) {\\n        return false;\\n    }\\n}\\nfunction addNoise(val, quantity) {\\n    var randomValue = random(0.9, 1.1);\\n    var noiseValue = noise($bm_mul(valueAtTime(0), randomValue));\\n    noiseValue = $bm_mul(noiseValue, $bm_div(quantity, 100));\\n    return $bm_mul(val, $bm_sum(noiseValue, 1));\\n}\\nfunction isAfterLastKey() {\\n    if (numKeys == 0)\\n        return false;\\n    var nKey = nearestKey(time);\\n    return nKey.time <= time && nKey.index == numKeys;\\n}\\nfunction isStill(t, threshold) {\\n    var d = $bm_sub(valueAtTime(t), valueAtTime($bm_sum(t, framesToTime(1))));\\n    if ($bm_isInstanceOfArray(d)) {\\n        for (var i = 0; i < d.length; i++) {\\n            d[i] = Math.abs(d[i]);\\n            if (d[i] >= threshold) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    } else {\\n        d = Math.abs(d);\\n        return d < threshold;\\n    }\\n}\\nfunction bezierInterpolation(t, tMin, tMax, value1, value2, bezierPoints) {\\n    if (arguments.length !== 5 && arguments.length !== 6)\\n        return t;\\n    var a = $bm_sub(value2, value1);\\n    var b = $bm_sub(tMax, tMin);\\n    if (b == 0)\\n        return t;\\n    var c = clamp($bm_div($bm_sub(t, tMin), b), 0, 1);\\n    if (!(bezierPoints instanceof Array) || bezierPoints.length !== 4)\\n        bezierPoints = [\\n            0.33,\\n            0,\\n            0.66,\\n            1\\n        ];\\n    return $bm_sum($bm_mul(a, h(c, bezierPoints)), value1);\\n    function h(f, g) {\\n        var x = $bm_mul(3, g[0]);\\n        var j = $bm_sub($bm_mul(3, $bm_sub(g[2], g[0])), x);\\n        var k = $bm_sub($bm_sub(1, x), j);\\n        var l = $bm_mul(3, g[1]);\\n        var m = $bm_sub($bm_mul(3, $bm_sub(g[3], g[1])), l);\\n        var n = $bm_sub($bm_sub(1, l), m);\\n        var d = f;\\n        for (var i = 0; i < 5; i++) {\\n            var z = $bm_sub($bm_mul(d, $bm_sum(x, $bm_mul(d, $bm_sum(j, $bm_mul(d, k))))), f);\\n            if (Math.abs(z) < 0.001)\\n                break;\\n            d = $bm_sub(d, $bm_div(z, $bm_sum(x, $bm_mul(d, $bm_sum($bm_mul(2, j), $bm_mul($bm_mul(3, k), d))))));\\n        }\\n        return $bm_mul(d, $bm_sum(l, $bm_mul(d, $bm_sum(m, $bm_mul(d, n)))));\\n    }\\n}\\nfunction getPropWorldSpeed(t, prop) {\\n    return length(getPropWorldVelocity(t, prop));\\n}\\nfunction getPrevKey(t) {\\n    if (numKeys == 0)\\n        return null;\\n    var nKey = nearestKey(t);\\n    if (nKey.time <= t)\\n        return nKey;\\n    if (nKey.index > 1)\\n        return key($bm_sub(nKey.index, 1));\\n    return null;\\n}\\nfunction getNextKey(t) {\\n    if (numKeys == 0)\\n        return null;\\n    var nKey = nearestKey(t);\\n    if (nKey.time >= t)\\n        return nKey;\\n    if (nKey.index < numKeys)\\n        return key($bm_sum(nKey.index, 1));\\n    return null;\\n}\\nfunction getPropWorldVelocity(t, prop) {\\n    return $bm_mul($bm_sub(getPropWorldValue($bm_sum(t, 0.005), prop), getPropWorldValue($bm_sub(t, 0.005), prop)), 100);\\n}\\nfunction getLayerWorldPos(t, l) {\\n    return l.toWorld(l.anchorPoint, t);\\n}\\nfunction getPropWorldValue(t, prop) {\\n    if (isPosition(prop))\\n        return getLayerWorldPos(t, thisLayer);\\n    return thisLayer.toWorld(prop.valueAtTime(t), t);\\n}\\nfunction isPosition(prop) {\\n    return prop === $bm_transform.position;\\n}\\nfunction isKeyTop(k, axis) {\\n    var prevSpeed = velocityAtTime($bm_sub(k.time, threshold));\\n    var nextSpeed = velocityAtTime($bm_sum(k.time, threshold));\\n    if ($bm_isInstanceOfArray(value)) {\\n        prevSpeed = prevSpeed[axis];\\n        nextSpeed = nextSpeed[axis];\\n    }\\n    if (Math.abs(prevSpeed) < 0.01 || Math.abs(nextSpeed) < 0.01)\\n        return true;\\n    return $bm_mul(prevSpeed, nextSpeed) < 0;\\n}\\nfunction anticipate() {\\n    var anticipation = zeroValue;\\n    if (isAfterLastKey())\\n        return anticipation;\\n    if (numKeys < 2)\\n        return anticipation;\\n    var nextKey = getNextKey(time);\\n    var aKey = nextKey;\\n    if (!isStill(aKey.time - 0.1, 0.1)) {\\n        aKey = getPrevKey(time);\\n        if (!isStill(aKey.time - 0.1, 0.1))\\n            return anticipation;\\n    }\\n    if (aKey.index == numKeys)\\n        return anticipation;\\n    var anticipationMiddle = aKey.time;\\n    var anticipationStart = $bm_sub(anticipationMiddle, anticipationDuration);\\n    var anticipationEnd = key(aKey.index + 1).time;\\n    var startValue = anticipation;\\n    var midValue = $bm_mul($bm_sum($bm_neg(valueAtTime($bm_sum(anticipationMiddle, anticipationDuration))), aKey.value), anticipationQuantity);\\n    var endValue = anticipation;\\n    if (time < anticipationStart) {\\n        return anticipation;\\n    } else if (time < anticipationMiddle) {\\n        if ($bm_isInstanceOfArray(value)) {\\n            for (var i = 0; i < value.length; i++) {\\n                anticipation[i] = bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue[i], midValue[i], [\\n                    slowOut,\\n                    0,\\n                    slowIn,\\n                    1\\n                ]);\\n            }\\n            return anticipation;\\n        } else {\\n            return bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue, midValue, [\\n                slowOut,\\n                0,\\n                slowIn,\\n                1\\n            ]);\\n        }\\n    } else if (time <= anticipationEnd) {\\n        if ($bm_isInstanceOfArray(value)) {\\n            for (var i = 0; i < value.length; i++) {\\n                anticipation[i] = bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue[i], endValue[i], [\\n                    slowOut,\\n                    0,\\n                    slowIn,\\n                    1\\n                ]);\\n            }\\n            return anticipation;\\n        } else {\\n            return bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue, endValue, [\\n                slowOut,\\n                0,\\n                slowIn,\\n                1\\n            ]);\\n        }\\n    } else {\\n        return anticipation;\\n    }\\n}\\nfunction followThroughAtTime(t) {\\n    var fThrough = zeroValue;\\n    if (elasticity == 0)\\n        return fThrough;\\n    var propSpeed;\\n    if (!simulate) {\\n        if (numKeys < 2)\\n            return fThrough;\\n        if (nearestKey(t).index == 1)\\n            return fThrough;\\n        propSpeed = length(velocityAtTime(t));\\n        if (propSpeed >= threshold)\\n            return fThrough;\\n    } else {\\n        propSpeed = getPropWorldSpeed(t, thisProperty);\\n        if (propSpeed >= threshold)\\n            return fThrough;\\n    }\\n    var fThroughStart = 0;\\n    var fThroughTime = 0;\\n    if (simulate) {\\n        var speedI = getPropWorldSpeed(t, thisProperty);\\n        var i = t;\\n        while (speedI < threshold && i > 0) {\\n            i = $bm_sub(i, $bm_div(thisComp.frameDuration, moBlurPrecision));\\n            speedI = getPropWorldSpeed(i, thisProperty);\\n        }\\n        fThroughStart = i;\\n    } else {\\n        var fThroughKey = getPrevKey(t);\\n        fThroughStart = fThroughKey.time;\\n    }\\n    if (fThroughStart == 0)\\n        return fThrough;\\n    fThroughTime = $bm_sub(t, fThroughStart);\\n    if (simulate)\\n        fThrough = $bm_div(getPropWorldVelocity($bm_sub(fThroughStart, thisComp.frameDuration), thisProperty), 2);\\n    else\\n        fThrough = $bm_div(velocityAtTime($bm_sub(fThroughStart, thisComp.frameDuration)), 2);\\n    if (bounce) {\\n        var cycleDamp = Math.exp($bm_mul($bm_mul(fThroughTime, damping), 0.1));\\n        var damp = $bm_div(Math.exp($bm_mul(fThroughTime, damping)), $bm_div(elasticity, 2));\\n        var cycleDuration = $bm_div(1, $bm_mul(elasticity, 2));\\n        cycleDuration = Math.round(timeToFrames(cycleDuration));\\n        cycleDuration = framesToTime(cycleDuration);\\n        var midDuration = $bm_div(cycleDuration, 2);\\n        var maxValue = $bm_mul(fThrough, midDuration);\\n        var cycvarime = fThroughTime;\\n        var numEndCycles = 1;\\n        while (cycvarime > cycleDuration) {\\n            cycvarime = $bm_sub(cycvarime, cycleDuration);\\n            cycleDuration = $bm_div(cycleDuration, cycleDamp);\\n            cycleDuration = Math.round(timeToFrames(cycleDuration));\\n            if (cycleDuration < 2) {\\n                cycleDuration = 2;\\n                numEndCycles++;\\n            }\\n            cycleDuration = framesToTime(cycleDuration);\\n            midDuration = $bm_div(cycleDuration, 2);\\n            maxValue = $bm_div($bm_mul(fThrough, midDuration), damp);\\n            if (numEndCycles > 100 / damping && maxValue < threshold)\\n                return zeroValue;\\n        }\\n        if (cycvarime < midDuration)\\n            fThrough = bezierInterpolation(cycvarime, 0, midDuration, 0, maxValue, [\\n                0,\\n                0.1,\\n                slowIn,\\n                1\\n            ]);\\n        else\\n            fThrough = bezierInterpolation(cycvarime, midDuration, cycleDuration, maxValue, 0, [\\n                $bm_sub(1, slowIn),\\n                0,\\n                1,\\n                0.9\\n            ]);\\n    } else {\\n        var damp = Math.exp($bm_mul(fThroughTime, damping));\\n        var sinus = $bm_mul($bm_mul($bm_mul(elasticity, fThroughTime), 2), Math.PI);\\n        sinus = Math.sin(sinus);\\n        sinus = $bm_mul($bm_div(0.3, elasticity), sinus);\\n        sinus = $bm_div(sinus, damp);\\n        if (Math.abs(sinus) < $bm_div(threshold, 100))\\n            return 0;\\n        fThrough = $bm_mul(fThrough, sinus);\\n        if (threshold > 0) {\\n            fThrough = $bm_mul(fThrough, $bm_sub(1, $bm_div(propSpeed, threshold)));\\n        }\\n    }\\n    if (bounce) {\\n        var prevValue = valueAtTime($bm_sub(fThroughStart, thisComp.frameDuration));\\n        var startValue = valueAtTime(fThroughStart);\\n        if ($bm_isInstanceOfArray(value)) {\\n            for (var i = 0; i < prevValue.length; i++) {\\n                if (prevValue[i] > startValue[i])\\n                    fThrough[i] = Math.abs(fThrough[i]);\\n                if (prevValue[i] < startValue[i])\\n                    fThrough[i] = $bm_neg(Math.abs(fThrough[i]));\\n            }\\n        } else {\\n            if (prevValue > startValue)\\n                fThrough = Math.abs(fThrough);\\n            if (prevValue < startValue)\\n                fThrough = $bm_neg(Math.abs(fThrough));\\n        }\\n    }\\n    if (simulate) {\\n        if (!isThisPosition) {\\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer));\\n            fThrough = $bm_sub(thisLayer.fromWorld(fThrough), thisLayer.anchorPoint);\\n        } else if (thisLayer.hasParent) {\\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer.parent));\\n            fThrough = $bm_sub(thisLayer.parent.fromWorld(fThrough), thisLayer.parent.anchorPoint);\\n        }\\n    }\\n    return fThrough;\\n}\\nfunction followThrough() {\\n    var propSpeed = length(velocity);\\n    if (propSpeed < threshold)\\n        return followThroughAtTime($bm_sub(time, overlapDuration));\\n    var fThrough = zeroValue;\\n    var t = time;\\n    while (t > 0) {\\n        t = $bm_sub(t, thisComp.frameDuration);\\n        if (simulate)\\n            propSpeed = getPropWorldSpeed($bm_sub(t, overlapDuration), thisProperty);\\n        else\\n            propSpeed = length(velocityAtTime(t));\\n        if (propSpeed < threshold) {\\n            fThrough = followThroughAtTime($bm_sub(t, overlapDuration));\\n            break;\\n        }\\n    }\\n    return linear(time, t, $bm_sum(t, $bm_mul(anticipationDuration, 2)), fThrough, zeroValue);\\n}\\nfunction smartSmooth(axis) {\\n    var startKey = nearestKey(time);\\n    var endKey = startKey;\\n    if (time == startKey.time)\\n        return 0;\\n    if (time < startKey.time && startKey.index == 1)\\n        return 0;\\n    if (time > startKey.time && startKey.index == numKeys)\\n        return 0;\\n    if (time < startKey.time)\\n        startKey = key($bm_sub(startKey.index, 1));\\n    if (time > startKey.time)\\n        endKey = key($bm_sum(startKey.index, 1));\\n    var sI = 0.66;\\n    var sO = 0.33;\\n    var sIV = 1;\\n    var sOV = 0;\\n    var sVal = startKey.value;\\n    var eVal = endKey.value;\\n    if ($bm_isInstanceOfArray(value)) {\\n        sVal = sVal[axis];\\n        eVal = eVal[axis];\\n    }\\n    var sTime = startKey.time;\\n    var eTime = endKey.time;\\n    if (isKeyTop(startKey, axis))\\n        sO = slowOut;\\n    else {\\n        var prevKey = key($bm_sub(startKey.index, 1));\\n        var pVal = prevKey.value;\\n        if ($bm_isInstanceOfArray(value))\\n            pVal = pVal[axis];\\n        sOV = $bm_div($bm_sub(sVal, pVal), $bm_sub(eVal, pVal));\\n    }\\n    if (isKeyTop(endKey, axis)) {\\n        sI = slowIn;\\n        if (endKey.index != numKeys) {\\n            var nextKey = key($bm_sum(endKey.index, 1));\\n            var nVal = nextKey.value;\\n            if ($bm_isInstanceOfArray(value))\\n                nVal = nVal[axis];\\n            if (Math.abs(nVal - eVal) < 0.01 && doFollowThrough)\\n                sI = 1;\\n        }\\n    } else {\\n        var nextKey = key($bm_sum(endKey.index, 1));\\n        var nVal = nextKey.value;\\n        if ($bm_isInstanceOfArray(value))\\n            nVal = nVal[axis];\\n        sIV = $bm_div($bm_sub(eVal, sVal), $bm_sub(nVal, sVal));\\n    }\\n    if (endKey.index == numKeys && doFollowThrough) {\\n        sI = 1;\\n    }\\n    var val = value;\\n    if ($bm_isInstanceOfArray(value))\\n        val = val[axis];\\n    return $bm_sub(bezierInterpolation(time, sTime, eTime, sVal, eVal, [\\n        sO,\\n        sOV,\\n        sI,\\n        sIV\\n    ]), val);\\n}\\nfunction overlap() {\\n    var ol = zeroValue;\\n    if (isThisPosition && !hasParent)\\n        return zeroValue;\\n    ol = $bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisProperty), getPropWorldValue(time, thisProperty));\\n    var motionRatio = $bm_div($bm_div(length(zeroValue, ol), thisLayer.width), 2);\\n    if (isThisPosition) {\\n        var originalDistance = length(valueAtTime(0));\\n        motionRatio = $bm_div(length(zeroValue, ol), thisComp.width);\\n    }\\n    ol = $bm_sum(ol, getPropWorldValue(time, thisProperty));\\n    ol = $bm_sum(ol, $bm_mul($bm_mul($bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisLayer.anchorPoint), ol), motionRatio), flexibility));\\n    ol = thisLayer.fromWorld(ol);\\n    if (!isThisPosition)\\n        ol = $bm_sub(ol, value);\\n    else {\\n        ol = linear(flexibility, 0, 100, $bm_div(ol, 2), 0);\\n        var prevParentWorldPos = getLayerWorldPos($bm_sub(time, overlapDuration), parent);\\n        ol = $bm_sum(ol, $bm_mul($bm_mul($bm_mul(thisLayer.fromWorld(prevParentWorldPos), motionRatio), flexibility), 5));\\n    }\\n    return ol;\\n}\\nvar okToGo = false;\\nif (simulate && fx.enabled)\\n    okToGo = true;\\nelse if (numKeys > 1 && fx.enabled)\\n    okToGo = true;\\nif (okToGo) {\\n    var smartSmoothResult = zeroValue;\\n    if (doInterpolation) {\\n        if ($bm_isInstanceOfArray(value)) {\\n            if (value.length == 2)\\n                smartSmoothResult = [\\n                    smartSmooth(0),\\n                    smartSmooth(1)\\n                ];\\n            else if (value.length == 3)\\n                smartSmoothResult = [\\n                    smartSmooth(0),\\n                    smartSmooth(1),\\n                    smartSmooth(2)\\n                ];\\n            else if (value.length == 4)\\n                smartSmoothResult = [\\n                    smartSmooth(0),\\n                    smartSmooth(1),\\n                    smartSmooth(2),\\n                    smartSmooth(3)\\n                ];\\n        } else {\\n            smartSmoothResult = smartSmooth(0);\\n        }\\n    }\\n    if (doAnticipation)\\n        result = $bm_sum(result, anticipate());\\n    result = $bm_sum(result, smartSmoothResult);\\n    if (doFollowThrough)\\n        result = $bm_sum(result, followThrough());\\n    if (doOverlap)\\n        result = $bm_sum(result, overlap());\\n}\\n$bm_rt = result;"},"a":{"a":0,"k":[-65.017,-53.069,0],"ix":1,"l":2},"s":{"a":1,"k":[{"i":{"x":[0.667,0.667,0.667],"y":[1,1,1]},"o":{"x":[0.333,0.333,0.333],"y":[0,0,0]},"t":13,"s":[0,0,100]},{"t":18,"s":[100,100,100]}],"ix":6,"l":2,"x":"var $bm_rt;\\nvar fx = effect(\'ŝlosilo pli pura\');\\nvar doAnticipation = fx(1).value;\\nvar doInterpolation = fx(2).value;\\nvar doFollowThrough = fx(3).value;\\nvar damping = $bm_div(fx(15).value, 10);\\nvar elasticity = $bm_div(fx(13).value, 10);\\nvar bounce = fx(17).value;\\nvar anticipationDuration = fx(5).value;\\nvar anticipationQuantity = $bm_div(fx(6).value, 100);\\nvar slowIn = $bm_div(fx(9).value, 100);\\nvar slowOut = $bm_div(fx(10).value, 100);\\nvar spatialMode = fx(21).value;\\nvar spatialDoInterpolation = fx(20).value;\\nvar moBlurPrecision = fx(32).value;\\nvar elasticityRandom = fx(14).value;\\nvar dampingRandom = fx(16).value;\\nvar softBody = fx(28).value;\\nvar flexibility = $bm_div(fx(29).value, 100);\\nvar doOverlap = fx(23).value;\\nvar overlapDuration = fx(24).value;\\nvar overlapRandom = fx(25).value;\\nvar threshold = $bm_div($bm_div(1, moBlurPrecision), 1000);\\nvar zeroValue;\\nif ($bm_isInstanceOfArray(value)) {\\n    if (value.length == 2)\\n        zeroValue = [\\n            0,\\n            0\\n        ];\\n    else if (value.length == 3)\\n        zeroValue = [\\n            0,\\n            0,\\n            0\\n        ];\\n    else if (value.length == 4)\\n        zeroValue = [\\n            0,\\n            0,\\n            0,\\n            0\\n        ];\\n} else\\n    zeroValue = 0;\\nvar isThisSpatial = isSpatial(thisProperty);\\nvar isThisPosition = thisProperty === $bm_transform.position;\\nvar simulate = false;\\nif (isThisSpatial) {\\n    doInterpolation = doInterpolation && spatialDoInterpolation;\\n    if (isThisPosition && thisProperty.numKeys > 0) {\\n        doOverlap = false;\\n        simulate = false;\\n    } else {\\n        simulate = spatialMode == 2;\\n        doOverlap = overlapDuration != 0 && doOverlap && simulate;\\n    }\\n} else {\\n    doOverlap = false;\\n}\\nif (!doOverlap) {\\n    overlapDuration = 0;\\n}\\nif (simulate && softBody && isThisSpatial && !isThisPosition && (doFollowThrough || doOverlap)) {\\n    var distanceRatio = $bm_div(length(valueAtTime(0), $bm_transform.anchorPoint), $bm_div(thisLayer.width, 2));\\n    distanceRatio = $bm_div($bm_sum(1, $bm_mul(distanceRatio, flexibility)), 2);\\n    if (doFollowThrough) {\\n        elasticity = $bm_div(elasticity, distanceRatio);\\n        damping = $bm_div(damping, distanceRatio);\\n    }\\n    if (doOverlap) {\\n        overlapDuration = $bm_mul(overlapDuration, distanceRatio);\\n    }\\n}\\nseedRandom(0, true);\\nif (doFollowThrough) {\\n    if (elasticityRandom > 0)\\n        elasticity = addNoise(elasticity, elasticityRandom);\\n    if (dampingRandom > 0)\\n        damping = addNoise(damping, dampingRandom);\\n}\\nif (doOverlap) {\\n    if (doOverlap && overlapRandom > 0)\\n        overlapDuration = addNoise(overlapDuration, overlapRandom);\\n}\\nvar result = value;\\nfunction isSpatial(prop) {\\n    if (!(prop.value instanceof Array))\\n        return false;\\n    if (prop.value.length != 2 && prop.value.length != 3)\\n        return false;\\n    try {\\n        if (typeof prop.speed !== \'undefined\')\\n            return true;\\n    } catch (e) {\\n        return false;\\n    }\\n}\\nfunction addNoise(val, quantity) {\\n    var randomValue = random(0.9, 1.1);\\n    var noiseValue = noise($bm_mul(valueAtTime(0), randomValue));\\n    noiseValue = $bm_mul(noiseValue, $bm_div(quantity, 100));\\n    return $bm_mul(val, $bm_sum(noiseValue, 1));\\n}\\nfunction isAfterLastKey() {\\n    if (numKeys == 0)\\n        return false;\\n    var nKey = nearestKey(time);\\n    return nKey.time <= time && nKey.index == numKeys;\\n}\\nfunction isStill(t, threshold) {\\n    var d = $bm_sub(valueAtTime(t), valueAtTime($bm_sum(t, framesToTime(1))));\\n    if ($bm_isInstanceOfArray(d)) {\\n        for (var i = 0; i < d.length; i++) {\\n            d[i] = Math.abs(d[i]);\\n            if (d[i] >= threshold) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    } else {\\n        d = Math.abs(d);\\n        return d < threshold;\\n    }\\n}\\nfunction bezierInterpolation(t, tMin, tMax, value1, value2, bezierPoints) {\\n    if (arguments.length !== 5 && arguments.length !== 6)\\n        return t;\\n    var a = $bm_sub(value2, value1);\\n    var b = $bm_sub(tMax, tMin);\\n    if (b == 0)\\n        return t;\\n    var c = clamp($bm_div($bm_sub(t, tMin), b), 0, 1);\\n    if (!(bezierPoints instanceof Array) || bezierPoints.length !== 4)\\n        bezierPoints = [\\n            0.33,\\n            0,\\n            0.66,\\n            1\\n        ];\\n    return $bm_sum($bm_mul(a, h(c, bezierPoints)), value1);\\n    function h(f, g) {\\n        var x = $bm_mul(3, g[0]);\\n        var j = $bm_sub($bm_mul(3, $bm_sub(g[2], g[0])), x);\\n        var k = $bm_sub($bm_sub(1, x), j);\\n        var l = $bm_mul(3, g[1]);\\n        var m = $bm_sub($bm_mul(3, $bm_sub(g[3], g[1])), l);\\n        var n = $bm_sub($bm_sub(1, l), m);\\n        var d = f;\\n        for (var i = 0; i < 5; i++) {\\n            var z = $bm_sub($bm_mul(d, $bm_sum(x, $bm_mul(d, $bm_sum(j, $bm_mul(d, k))))), f);\\n            if (Math.abs(z) < 0.001)\\n                break;\\n            d = $bm_sub(d, $bm_div(z, $bm_sum(x, $bm_mul(d, $bm_sum($bm_mul(2, j), $bm_mul($bm_mul(3, k), d))))));\\n        }\\n        return $bm_mul(d, $bm_sum(l, $bm_mul(d, $bm_sum(m, $bm_mul(d, n)))));\\n    }\\n}\\nfunction getPropWorldSpeed(t, prop) {\\n    return length(getPropWorldVelocity(t, prop));\\n}\\nfunction getPrevKey(t) {\\n    if (numKeys == 0)\\n        return null;\\n    var nKey = nearestKey(t);\\n    if (nKey.time <= t)\\n        return nKey;\\n    if (nKey.index > 1)\\n        return key($bm_sub(nKey.index, 1));\\n    return null;\\n}\\nfunction getNextKey(t) {\\n    if (numKeys == 0)\\n        return null;\\n    var nKey = nearestKey(t);\\n    if (nKey.time >= t)\\n        return nKey;\\n    if (nKey.index < numKeys)\\n        return key($bm_sum(nKey.index, 1));\\n    return null;\\n}\\nfunction getPropWorldVelocity(t, prop) {\\n    return $bm_mul($bm_sub(getPropWorldValue($bm_sum(t, 0.005), prop), getPropWorldValue($bm_sub(t, 0.005), prop)), 100);\\n}\\nfunction getLayerWorldPos(t, l) {\\n    return l.toWorld(l.anchorPoint, t);\\n}\\nfunction getPropWorldValue(t, prop) {\\n    if (isPosition(prop))\\n        return getLayerWorldPos(t, thisLayer);\\n    return thisLayer.toWorld(prop.valueAtTime(t), t);\\n}\\nfunction isPosition(prop) {\\n    return prop === $bm_transform.position;\\n}\\nfunction isKeyTop(k, axis) {\\n    var prevSpeed = velocityAtTime($bm_sub(k.time, threshold));\\n    var nextSpeed = velocityAtTime($bm_sum(k.time, threshold));\\n    if ($bm_isInstanceOfArray(value)) {\\n        prevSpeed = prevSpeed[axis];\\n        nextSpeed = nextSpeed[axis];\\n    }\\n    if (Math.abs(prevSpeed) < 0.01 || Math.abs(nextSpeed) < 0.01)\\n        return true;\\n    return $bm_mul(prevSpeed, nextSpeed) < 0;\\n}\\nfunction anticipate() {\\n    var anticipation = zeroValue;\\n    if (isAfterLastKey())\\n        return anticipation;\\n    if (numKeys < 2)\\n        return anticipation;\\n    var nextKey = getNextKey(time);\\n    var aKey = nextKey;\\n    if (!isStill(aKey.time - 0.1, 0.1)) {\\n        aKey = getPrevKey(time);\\n        if (!isStill(aKey.time - 0.1, 0.1))\\n            return anticipation;\\n    }\\n    if (aKey.index == numKeys)\\n        return anticipation;\\n    var anticipationMiddle = aKey.time;\\n    var anticipationStart = $bm_sub(anticipationMiddle, anticipationDuration);\\n    var anticipationEnd = key(aKey.index + 1).time;\\n    var startValue = anticipation;\\n    var midValue = $bm_mul($bm_sum($bm_neg(valueAtTime($bm_sum(anticipationMiddle, anticipationDuration))), aKey.value), anticipationQuantity);\\n    var endValue = anticipation;\\n    if (time < anticipationStart) {\\n        return anticipation;\\n    } else if (time < anticipationMiddle) {\\n        if ($bm_isInstanceOfArray(value)) {\\n            for (var i = 0; i < value.length; i++) {\\n                anticipation[i] = bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue[i], midValue[i], [\\n                    slowOut,\\n                    0,\\n                    slowIn,\\n                    1\\n                ]);\\n            }\\n            return anticipation;\\n        } else {\\n            return bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue, midValue, [\\n                slowOut,\\n                0,\\n                slowIn,\\n                1\\n            ]);\\n        }\\n    } else if (time <= anticipationEnd) {\\n        if ($bm_isInstanceOfArray(value)) {\\n            for (var i = 0; i < value.length; i++) {\\n                anticipation[i] = bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue[i], endValue[i], [\\n                    slowOut,\\n                    0,\\n                    slowIn,\\n                    1\\n                ]);\\n            }\\n            return anticipation;\\n        } else {\\n            return bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue, endValue, [\\n                slowOut,\\n                0,\\n                slowIn,\\n                1\\n            ]);\\n        }\\n    } else {\\n        return anticipation;\\n    }\\n}\\nfunction followThroughAtTime(t) {\\n    var fThrough = zeroValue;\\n    if (elasticity == 0)\\n        return fThrough;\\n    var propSpeed;\\n    if (!simulate) {\\n        if (numKeys < 2)\\n            return fThrough;\\n        if (nearestKey(t).index == 1)\\n            return fThrough;\\n        propSpeed = length(velocityAtTime(t));\\n        if (propSpeed >= threshold)\\n            return fThrough;\\n    } else {\\n        propSpeed = getPropWorldSpeed(t, thisProperty);\\n        if (propSpeed >= threshold)\\n            return fThrough;\\n    }\\n    var fThroughStart = 0;\\n    var fThroughTime = 0;\\n    if (simulate) {\\n        var speedI = getPropWorldSpeed(t, thisProperty);\\n        var i = t;\\n        while (speedI < threshold && i > 0) {\\n            i = $bm_sub(i, $bm_div(thisComp.frameDuration, moBlurPrecision));\\n            speedI = getPropWorldSpeed(i, thisProperty);\\n        }\\n        fThroughStart = i;\\n    } else {\\n        var fThroughKey = getPrevKey(t);\\n        fThroughStart = fThroughKey.time;\\n    }\\n    if (fThroughStart == 0)\\n        return fThrough;\\n    fThroughTime = $bm_sub(t, fThroughStart);\\n    if (simulate)\\n        fThrough = $bm_div(getPropWorldVelocity($bm_sub(fThroughStart, thisComp.frameDuration), thisProperty), 2);\\n    else\\n        fThrough = $bm_div(velocityAtTime($bm_sub(fThroughStart, thisComp.frameDuration)), 2);\\n    if (bounce) {\\n        var cycleDamp = Math.exp($bm_mul($bm_mul(fThroughTime, damping), 0.1));\\n        var damp = $bm_div(Math.exp($bm_mul(fThroughTime, damping)), $bm_div(elasticity, 2));\\n        var cycleDuration = $bm_div(1, $bm_mul(elasticity, 2));\\n        cycleDuration = Math.round(timeToFrames(cycleDuration));\\n        cycleDuration = framesToTime(cycleDuration);\\n        var midDuration = $bm_div(cycleDuration, 2);\\n        var maxValue = $bm_mul(fThrough, midDuration);\\n        var cycvarime = fThroughTime;\\n        var numEndCycles = 1;\\n        while (cycvarime > cycleDuration) {\\n            cycvarime = $bm_sub(cycvarime, cycleDuration);\\n            cycleDuration = $bm_div(cycleDuration, cycleDamp);\\n            cycleDuration = Math.round(timeToFrames(cycleDuration));\\n            if (cycleDuration < 2) {\\n                cycleDuration = 2;\\n                numEndCycles++;\\n            }\\n            cycleDuration = framesToTime(cycleDuration);\\n            midDuration = $bm_div(cycleDuration, 2);\\n            maxValue = $bm_div($bm_mul(fThrough, midDuration), damp);\\n            if (numEndCycles > 100 / damping && maxValue < threshold)\\n                return zeroValue;\\n        }\\n        if (cycvarime < midDuration)\\n            fThrough = bezierInterpolation(cycvarime, 0, midDuration, 0, maxValue, [\\n                0,\\n                0.1,\\n                slowIn,\\n                1\\n            ]);\\n        else\\n            fThrough = bezierInterpolation(cycvarime, midDuration, cycleDuration, maxValue, 0, [\\n                $bm_sub(1, slowIn),\\n                0,\\n                1,\\n                0.9\\n            ]);\\n    } else {\\n        var damp = Math.exp($bm_mul(fThroughTime, damping));\\n        var sinus = $bm_mul($bm_mul($bm_mul(elasticity, fThroughTime), 2), Math.PI);\\n        sinus = Math.sin(sinus);\\n        sinus = $bm_mul($bm_div(0.3, elasticity), sinus);\\n        sinus = $bm_div(sinus, damp);\\n        if (Math.abs(sinus) < $bm_div(threshold, 100))\\n            return 0;\\n        fThrough = $bm_mul(fThrough, sinus);\\n        if (threshold > 0) {\\n            fThrough = $bm_mul(fThrough, $bm_sub(1, $bm_div(propSpeed, threshold)));\\n        }\\n    }\\n    if (bounce) {\\n        var prevValue = valueAtTime($bm_sub(fThroughStart, thisComp.frameDuration));\\n        var startValue = valueAtTime(fThroughStart);\\n        if ($bm_isInstanceOfArray(value)) {\\n            for (var i = 0; i < prevValue.length; i++) {\\n                if (prevValue[i] > startValue[i])\\n                    fThrough[i] = Math.abs(fThrough[i]);\\n                if (prevValue[i] < startValue[i])\\n                    fThrough[i] = $bm_neg(Math.abs(fThrough[i]));\\n            }\\n        } else {\\n            if (prevValue > startValue)\\n                fThrough = Math.abs(fThrough);\\n            if (prevValue < startValue)\\n                fThrough = $bm_neg(Math.abs(fThrough));\\n        }\\n    }\\n    if (simulate) {\\n        if (!isThisPosition) {\\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer));\\n            fThrough = $bm_sub(thisLayer.fromWorld(fThrough), thisLayer.anchorPoint);\\n        } else if (thisLayer.hasParent) {\\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer.parent));\\n            fThrough = $bm_sub(thisLayer.parent.fromWorld(fThrough), thisLayer.parent.anchorPoint);\\n        }\\n    }\\n    return fThrough;\\n}\\nfunction followThrough() {\\n    var propSpeed = length(velocity);\\n    if (propSpeed < threshold)\\n        return followThroughAtTime($bm_sub(time, overlapDuration));\\n    var fThrough = zeroValue;\\n    var t = time;\\n    while (t > 0) {\\n        t = $bm_sub(t, thisComp.frameDuration);\\n        if (simulate)\\n            propSpeed = getPropWorldSpeed($bm_sub(t, overlapDuration), thisProperty);\\n        else\\n            propSpeed = length(velocityAtTime(t));\\n        if (propSpeed < threshold) {\\n            fThrough = followThroughAtTime($bm_sub(t, overlapDuration));\\n            break;\\n        }\\n    }\\n    return linear(time, t, $bm_sum(t, $bm_mul(anticipationDuration, 2)), fThrough, zeroValue);\\n}\\nfunction smartSmooth(axis) {\\n    var startKey = nearestKey(time);\\n    var endKey = startKey;\\n    if (time == startKey.time)\\n        return 0;\\n    if (time < startKey.time && startKey.index == 1)\\n        return 0;\\n    if (time > startKey.time && startKey.index == numKeys)\\n        return 0;\\n    if (time < startKey.time)\\n        startKey = key($bm_sub(startKey.index, 1));\\n    if (time > startKey.time)\\n        endKey = key($bm_sum(startKey.index, 1));\\n    var sI = 0.66;\\n    var sO = 0.33;\\n    var sIV = 1;\\n    var sOV = 0;\\n    var sVal = startKey.value;\\n    var eVal = endKey.value;\\n    if ($bm_isInstanceOfArray(value)) {\\n        sVal = sVal[axis];\\n        eVal = eVal[axis];\\n    }\\n    var sTime = startKey.time;\\n    var eTime = endKey.time;\\n    if (isKeyTop(startKey, axis))\\n        sO = slowOut;\\n    else {\\n        var prevKey = key($bm_sub(startKey.index, 1));\\n        var pVal = prevKey.value;\\n        if ($bm_isInstanceOfArray(value))\\n            pVal = pVal[axis];\\n        sOV = $bm_div($bm_sub(sVal, pVal), $bm_sub(eVal, pVal));\\n    }\\n    if (isKeyTop(endKey, axis)) {\\n        sI = slowIn;\\n        if (endKey.index != numKeys) {\\n            var nextKey = key($bm_sum(endKey.index, 1));\\n            var nVal = nextKey.value;\\n            if ($bm_isInstanceOfArray(value))\\n                nVal = nVal[axis];\\n            if (Math.abs(nVal - eVal) < 0.01 && doFollowThrough)\\n                sI = 1;\\n        }\\n    } else {\\n        var nextKey = key($bm_sum(endKey.index, 1));\\n        var nVal = nextKey.value;\\n        if ($bm_isInstanceOfArray(value))\\n            nVal = nVal[axis];\\n        sIV = $bm_div($bm_sub(eVal, sVal), $bm_sub(nVal, sVal));\\n    }\\n    if (endKey.index == numKeys && doFollowThrough) {\\n        sI = 1;\\n    }\\n    var val = value;\\n    if ($bm_isInstanceOfArray(value))\\n        val = val[axis];\\n    return $bm_sub(bezierInterpolation(time, sTime, eTime, sVal, eVal, [\\n        sO,\\n        sOV,\\n        sI,\\n        sIV\\n    ]), val);\\n}\\nfunction overlap() {\\n    var ol = zeroValue;\\n    if (isThisPosition && !hasParent)\\n        return zeroValue;\\n    ol = $bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisProperty), getPropWorldValue(time, thisProperty));\\n    var motionRatio = $bm_div($bm_div(length(zeroValue, ol), thisLayer.width), 2);\\n    if (isThisPosition) {\\n        var originalDistance = length(valueAtTime(0));\\n        motionRatio = $bm_div(length(zeroValue, ol), thisComp.width);\\n    }\\n    ol = $bm_sum(ol, getPropWorldValue(time, thisProperty));\\n    ol = $bm_sum(ol, $bm_mul($bm_mul($bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisLayer.anchorPoint), ol), motionRatio), flexibility));\\n    ol = thisLayer.fromWorld(ol);\\n    if (!isThisPosition)\\n        ol = $bm_sub(ol, value);\\n    else {\\n        ol = linear(flexibility, 0, 100, $bm_div(ol, 2), 0);\\n        var prevParentWorldPos = getLayerWorldPos($bm_sub(time, overlapDuration), parent);\\n        ol = $bm_sum(ol, $bm_mul($bm_mul($bm_mul(thisLayer.fromWorld(prevParentWorldPos), motionRatio), flexibility), 5));\\n    }\\n    return ol;\\n}\\nvar okToGo = false;\\nif (simulate && fx.enabled)\\n    okToGo = true;\\nelse if (numKeys > 1 && fx.enabled)\\n    okToGo = true;\\nif (okToGo) {\\n    var smartSmoothResult = zeroValue;\\n    if (doInterpolation) {\\n        if ($bm_isInstanceOfArray(value)) {\\n            if (value.length == 2)\\n                smartSmoothResult = [\\n                    smartSmooth(0),\\n                    smartSmooth(1)\\n                ];\\n            else if (value.length == 3)\\n                smartSmoothResult = [\\n                    smartSmooth(0),\\n                    smartSmooth(1),\\n                    smartSmooth(2)\\n                ];\\n            else if (value.length == 4)\\n                smartSmoothResult = [\\n                    smartSmooth(0),\\n                    smartSmooth(1),\\n                    smartSmooth(2),\\n                    smartSmooth(3)\\n                ];\\n        } else {\\n            smartSmoothResult = smartSmooth(0);\\n        }\\n    }\\n    if (doAnticipation)\\n        result = $bm_sum(result, anticipate());\\n    result = $bm_sum(result, smartSmoothResult);\\n    if (doFollowThrough)\\n        result = $bm_sum(result, followThrough());\\n    if (doOverlap)\\n        result = $bm_sum(result, overlap());\\n}\\n$bm_rt = result;"}},"ao":0,"ef":[{"ty":5,"nm":"ŝlosilo pli pura","np":34,"mn":"Pseudo/Duik Kleaner v3.2","ix":1,"en":1,"ef":[{"ty":7,"nm":"Anticipation","mn":"Pseudo/Duik Kleaner v3.2-0001","ix":1,"v":{"a":0,"k":0,"ix":1}},{"ty":7,"nm":"Smart Interpolation","mn":"Pseudo/Duik Kleaner v3.2-0002","ix":2,"v":{"a":0,"k":0,"ix":2}},{"ty":7,"nm":"Follow Through","mn":"Pseudo/Duik Kleaner v3.2-0003","ix":3,"v":{"a":0,"k":1,"ix":3}},{"ty":6,"nm":"Anticipation","mn":"Pseudo/Duik Kleaner v3.2-0004","ix":4,"v":0},{"ty":0,"nm":"Duration (s)","mn":"Pseudo/Duik Kleaner v3.2-0005","ix":5,"v":{"a":0,"k":0.3,"ix":5}},{"ty":0,"nm":"Amplitude","mn":"Pseudo/Duik Kleaner v3.2-0006","ix":6,"v":{"a":0,"k":50,"ix":6}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0007","ix":7,"v":0},{"ty":6,"nm":"Interpolation","mn":"Pseudo/Duik Kleaner v3.2-0008","ix":8,"v":0},{"ty":0,"nm":"Slow In","mn":"Pseudo/Duik Kleaner v3.2-0009","ix":9,"v":{"a":0,"k":60,"ix":9}},{"ty":0,"nm":"Slow Out","mn":"Pseudo/Duik Kleaner v3.2-0010","ix":10,"v":{"a":0,"k":25,"ix":10}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0011","ix":11,"v":0},{"ty":6,"nm":"Follow Through","mn":"Pseudo/Duik Kleaner v3.2-0012","ix":12,"v":0},{"ty":0,"nm":"Elasticity","mn":"Pseudo/Duik Kleaner v3.2-0013","ix":13,"v":{"a":0,"k":10,"ix":13}},{"ty":0,"nm":"Elasticity random","mn":"Pseudo/Duik Kleaner v3.2-0014","ix":14,"v":{"a":0,"k":0,"ix":14}},{"ty":0,"nm":"Damping","mn":"Pseudo/Duik Kleaner v3.2-0015","ix":15,"v":{"a":0,"k":50,"ix":15}},{"ty":0,"nm":"Damping random","mn":"Pseudo/Duik Kleaner v3.2-0016","ix":16,"v":{"a":0,"k":0,"ix":16}},{"ty":7,"nm":"Bounce","mn":"Pseudo/Duik Kleaner v3.2-0017","ix":17,"v":{"a":0,"k":0,"ix":17}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0018","ix":18,"v":0},{"ty":6,"nm":"Spatial Options","mn":"Pseudo/Duik Kleaner v3.2-0019","ix":19,"v":0},{"ty":7,"nm":"Smart Interpolation","mn":"Pseudo/Duik Kleaner v3.2-0020","ix":20,"v":{"a":0,"k":0,"ix":20}},{"ty":7,"nm":"Mode","mn":"Pseudo/Duik Kleaner v3.2-0021","ix":21,"v":{"a":0,"k":1,"ix":21}},{"ty":6,"nm":"Overlap (simulation)","mn":"Pseudo/Duik Kleaner v3.2-0022","ix":22,"v":0},{"ty":7,"nm":"Overlap","mn":"Pseudo/Duik Kleaner v3.2-0023","ix":23,"v":{"a":0,"k":1,"ix":23}},{"ty":0,"nm":"Delay (s)","mn":"Pseudo/Duik Kleaner v3.2-0024","ix":24,"v":{"a":0,"k":0.05,"ix":24}},{"ty":0,"nm":"Overlap random","mn":"Pseudo/Duik Kleaner v3.2-0025","ix":25,"v":{"a":0,"k":0,"ix":25}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0026","ix":26,"v":0},{"ty":6,"nm":"Soft Body (simulation)","mn":"Pseudo/Duik Kleaner v3.2-0027","ix":27,"v":0},{"ty":7,"nm":"Soft Body","mn":"Pseudo/Duik Kleaner v3.2-0028","ix":28,"v":{"a":0,"k":1,"ix":28}},{"ty":0,"nm":"Soft-Body Flexibility","mn":"Pseudo/Duik Kleaner v3.2-0029","ix":29,"v":{"a":0,"k":100,"ix":29}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0030","ix":30,"v":0},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0031","ix":31,"v":0},{"ty":0,"nm":"Precision","mn":"Pseudo/Duik Kleaner v3.2-0032","ix":32,"v":{"a":0,"k":1,"ix":32}}]},{"ty":5,"nm":"ŝlosilo pli pura 2","np":34,"mn":"Pseudo/Duik Kleaner v3.2","ix":2,"en":1,"ef":[{"ty":7,"nm":"Anticipation","mn":"Pseudo/Duik Kleaner v3.2-0001","ix":1,"v":{"a":0,"k":0,"ix":1}},{"ty":7,"nm":"Smart Interpolation","mn":"Pseudo/Duik Kleaner v3.2-0002","ix":2,"v":{"a":0,"k":0,"ix":2}},{"ty":7,"nm":"Follow Through","mn":"Pseudo/Duik Kleaner v3.2-0003","ix":3,"v":{"a":0,"k":1,"ix":3}},{"ty":6,"nm":"Anticipation","mn":"Pseudo/Duik Kleaner v3.2-0004","ix":4,"v":0},{"ty":0,"nm":"Duration (s)","mn":"Pseudo/Duik Kleaner v3.2-0005","ix":5,"v":{"a":0,"k":0.3,"ix":5}},{"ty":0,"nm":"Amplitude","mn":"Pseudo/Duik Kleaner v3.2-0006","ix":6,"v":{"a":0,"k":50,"ix":6}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0007","ix":7,"v":0},{"ty":6,"nm":"Interpolation","mn":"Pseudo/Duik Kleaner v3.2-0008","ix":8,"v":0},{"ty":0,"nm":"Slow In","mn":"Pseudo/Duik Kleaner v3.2-0009","ix":9,"v":{"a":0,"k":60,"ix":9}},{"ty":0,"nm":"Slow Out","mn":"Pseudo/Duik Kleaner v3.2-0010","ix":10,"v":{"a":0,"k":25,"ix":10}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0011","ix":11,"v":0},{"ty":6,"nm":"Follow Through","mn":"Pseudo/Duik Kleaner v3.2-0012","ix":12,"v":0},{"ty":0,"nm":"Elasticity","mn":"Pseudo/Duik Kleaner v3.2-0013","ix":13,"v":{"a":0,"k":10,"ix":13}},{"ty":0,"nm":"Elasticity random","mn":"Pseudo/Duik Kleaner v3.2-0014","ix":14,"v":{"a":0,"k":0,"ix":14}},{"ty":0,"nm":"Damping","mn":"Pseudo/Duik Kleaner v3.2-0015","ix":15,"v":{"a":0,"k":50,"ix":15}},{"ty":0,"nm":"Damping random","mn":"Pseudo/Duik Kleaner v3.2-0016","ix":16,"v":{"a":0,"k":0,"ix":16}},{"ty":7,"nm":"Bounce","mn":"Pseudo/Duik Kleaner v3.2-0017","ix":17,"v":{"a":0,"k":0,"ix":17}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0018","ix":18,"v":0},{"ty":6,"nm":"Spatial Options","mn":"Pseudo/Duik Kleaner v3.2-0019","ix":19,"v":0},{"ty":7,"nm":"Smart Interpolation","mn":"Pseudo/Duik Kleaner v3.2-0020","ix":20,"v":{"a":0,"k":0,"ix":20}},{"ty":7,"nm":"Mode","mn":"Pseudo/Duik Kleaner v3.2-0021","ix":21,"v":{"a":0,"k":1,"ix":21}},{"ty":6,"nm":"Overlap (simulation)","mn":"Pseudo/Duik Kleaner v3.2-0022","ix":22,"v":0},{"ty":7,"nm":"Overlap","mn":"Pseudo/Duik Kleaner v3.2-0023","ix":23,"v":{"a":0,"k":1,"ix":23}},{"ty":0,"nm":"Delay (s)","mn":"Pseudo/Duik Kleaner v3.2-0024","ix":24,"v":{"a":0,"k":0.05,"ix":24}},{"ty":0,"nm":"Overlap random","mn":"Pseudo/Duik Kleaner v3.2-0025","ix":25,"v":{"a":0,"k":0,"ix":25}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0026","ix":26,"v":0},{"ty":6,"nm":"Soft Body (simulation)","mn":"Pseudo/Duik Kleaner v3.2-0027","ix":27,"v":0},{"ty":7,"nm":"Soft Body","mn":"Pseudo/Duik Kleaner v3.2-0028","ix":28,"v":{"a":0,"k":1,"ix":28}},{"ty":0,"nm":"Soft-Body Flexibility","mn":"Pseudo/Duik Kleaner v3.2-0029","ix":29,"v":{"a":0,"k":100,"ix":29}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0030","ix":30,"v":0},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0031","ix":31,"v":0},{"ty":0,"nm":"Precision","mn":"Pseudo/Duik Kleaner v3.2-0032","ix":32,"v":{"a":0,"k":1,"ix":32}}]}],"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0]],"v":[[-107.065,-78.819],[-95.883,-68.901],[-73.871,-96.136]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"tm","s":{"a":0,"k":0,"ix":1},"e":{"a":1,"k":[{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":14,"s":[0]},{"t":25,"s":[100]}],"ix":2,"x":"var $bm_rt;\\nvar fx = effect(\'ŝlosilo pli pura\');\\nvar doAnticipation = fx(1).value;\\nvar doInterpolation = fx(2).value;\\nvar doFollowThrough = fx(3).value;\\nvar damping = $bm_div(fx(15).value, 10);\\nvar elasticity = $bm_div(fx(13).value, 10);\\nvar bounce = fx(17).value;\\nvar anticipationDuration = fx(5).value;\\nvar anticipationQuantity = $bm_div(fx(6).value, 100);\\nvar slowIn = $bm_div(fx(9).value, 100);\\nvar slowOut = $bm_div(fx(10).value, 100);\\nvar spatialMode = fx(21).value;\\nvar spatialDoInterpolation = fx(20).value;\\nvar moBlurPrecision = fx(32).value;\\nvar elasticityRandom = fx(14).value;\\nvar dampingRandom = fx(16).value;\\nvar softBody = fx(28).value;\\nvar flexibility = $bm_div(fx(29).value, 100);\\nvar doOverlap = fx(23).value;\\nvar overlapDuration = fx(24).value;\\nvar overlapRandom = fx(25).value;\\nvar threshold = $bm_div($bm_div(1, moBlurPrecision), 1000);\\nvar zeroValue;\\nif ($bm_isInstanceOfArray(value)) {\\n    if (value.length == 2)\\n        zeroValue = [\\n            0,\\n            0\\n        ];\\n    else if (value.length == 3)\\n        zeroValue = [\\n            0,\\n            0,\\n            0\\n        ];\\n    else if (value.length == 4)\\n        zeroValue = [\\n            0,\\n            0,\\n            0,\\n            0\\n        ];\\n} else\\n    zeroValue = 0;\\nvar isThisSpatial = isSpatial(thisProperty);\\nvar isThisPosition = thisProperty === $bm_transform.position;\\nvar simulate = false;\\nif (isThisSpatial) {\\n    doInterpolation = doInterpolation && spatialDoInterpolation;\\n    if (isThisPosition && thisProperty.numKeys > 0) {\\n        doOverlap = false;\\n        simulate = false;\\n    } else {\\n        simulate = spatialMode == 2;\\n        doOverlap = overlapDuration != 0 && doOverlap && simulate;\\n    }\\n} else {\\n    doOverlap = false;\\n}\\nif (!doOverlap) {\\n    overlapDuration = 0;\\n}\\nif (simulate && softBody && isThisSpatial && !isThisPosition && (doFollowThrough || doOverlap)) {\\n    var distanceRatio = $bm_div(length(valueAtTime(0), $bm_transform.anchorPoint), $bm_div(thisLayer.width, 2));\\n    distanceRatio = $bm_div($bm_sum(1, $bm_mul(distanceRatio, flexibility)), 2);\\n    if (doFollowThrough) {\\n        elasticity = $bm_div(elasticity, distanceRatio);\\n        damping = $bm_div(damping, distanceRatio);\\n    }\\n    if (doOverlap) {\\n        overlapDuration = $bm_mul(overlapDuration, distanceRatio);\\n    }\\n}\\nseedRandom(0, true);\\nif (doFollowThrough) {\\n    if (elasticityRandom > 0)\\n        elasticity = addNoise(elasticity, elasticityRandom);\\n    if (dampingRandom > 0)\\n        damping = addNoise(damping, dampingRandom);\\n}\\nif (doOverlap) {\\n    if (doOverlap && overlapRandom > 0)\\n        overlapDuration = addNoise(overlapDuration, overlapRandom);\\n}\\nvar result = value;\\nfunction isSpatial(prop) {\\n    if (!(prop.value instanceof Array))\\n        return false;\\n    if (prop.value.length != 2 && prop.value.length != 3)\\n        return false;\\n    try {\\n        if (typeof prop.speed !== \'undefined\')\\n            return true;\\n    } catch (e) {\\n        return false;\\n    }\\n}\\nfunction addNoise(val, quantity) {\\n    var randomValue = random(0.9, 1.1);\\n    var noiseValue = noise($bm_mul(valueAtTime(0), randomValue));\\n    noiseValue = $bm_mul(noiseValue, $bm_div(quantity, 100));\\n    return $bm_mul(val, $bm_sum(noiseValue, 1));\\n}\\nfunction isAfterLastKey() {\\n    if (numKeys == 0)\\n        return false;\\n    var nKey = nearestKey(time);\\n    return nKey.time <= time && nKey.index == numKeys;\\n}\\nfunction isStill(t, threshold) {\\n    var d = $bm_sub(valueAtTime(t), valueAtTime($bm_sum(t, framesToTime(1))));\\n    if ($bm_isInstanceOfArray(d)) {\\n        for (var i = 0; i < d.length; i++) {\\n            d[i] = Math.abs(d[i]);\\n            if (d[i] >= threshold) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    } else {\\n        d = Math.abs(d);\\n        return d < threshold;\\n    }\\n}\\nfunction bezierInterpolation(t, tMin, tMax, value1, value2, bezierPoints) {\\n    if (arguments.length !== 5 && arguments.length !== 6)\\n        return t;\\n    var a = $bm_sub(value2, value1);\\n    var b = $bm_sub(tMax, tMin);\\n    if (b == 0)\\n        return t;\\n    var c = clamp($bm_div($bm_sub(t, tMin), b), 0, 1);\\n    if (!(bezierPoints instanceof Array) || bezierPoints.length !== 4)\\n        bezierPoints = [\\n            0.33,\\n            0,\\n            0.66,\\n            1\\n        ];\\n    return $bm_sum($bm_mul(a, h(c, bezierPoints)), value1);\\n    function h(f, g) {\\n        var x = $bm_mul(3, g[0]);\\n        var j = $bm_sub($bm_mul(3, $bm_sub(g[2], g[0])), x);\\n        var k = $bm_sub($bm_sub(1, x), j);\\n        var l = $bm_mul(3, g[1]);\\n        var m = $bm_sub($bm_mul(3, $bm_sub(g[3], g[1])), l);\\n        var n = $bm_sub($bm_sub(1, l), m);\\n        var d = f;\\n        for (var i = 0; i < 5; i++) {\\n            var z = $bm_sub($bm_mul(d, $bm_sum(x, $bm_mul(d, $bm_sum(j, $bm_mul(d, k))))), f);\\n            if (Math.abs(z) < 0.001)\\n                break;\\n            d = $bm_sub(d, $bm_div(z, $bm_sum(x, $bm_mul(d, $bm_sum($bm_mul(2, j), $bm_mul($bm_mul(3, k), d))))));\\n        }\\n        return $bm_mul(d, $bm_sum(l, $bm_mul(d, $bm_sum(m, $bm_mul(d, n)))));\\n    }\\n}\\nfunction getPropWorldSpeed(t, prop) {\\n    return length(getPropWorldVelocity(t, prop));\\n}\\nfunction getPrevKey(t) {\\n    if (numKeys == 0)\\n        return null;\\n    var nKey = nearestKey(t);\\n    if (nKey.time <= t)\\n        return nKey;\\n    if (nKey.index > 1)\\n        return key($bm_sub(nKey.index, 1));\\n    return null;\\n}\\nfunction getNextKey(t) {\\n    if (numKeys == 0)\\n        return null;\\n    var nKey = nearestKey(t);\\n    if (nKey.time >= t)\\n        return nKey;\\n    if (nKey.index < numKeys)\\n        return key($bm_sum(nKey.index, 1));\\n    return null;\\n}\\nfunction getPropWorldVelocity(t, prop) {\\n    return $bm_mul($bm_sub(getPropWorldValue($bm_sum(t, 0.005), prop), getPropWorldValue($bm_sub(t, 0.005), prop)), 100);\\n}\\nfunction getLayerWorldPos(t, l) {\\n    return l.toWorld(l.anchorPoint, t);\\n}\\nfunction getPropWorldValue(t, prop) {\\n    if (isPosition(prop))\\n        return getLayerWorldPos(t, thisLayer);\\n    return thisLayer.toWorld(prop.valueAtTime(t), t);\\n}\\nfunction isPosition(prop) {\\n    return prop === $bm_transform.position;\\n}\\nfunction isKeyTop(k, axis) {\\n    var prevSpeed = velocityAtTime($bm_sub(k.time, threshold));\\n    var nextSpeed = velocityAtTime($bm_sum(k.time, threshold));\\n    if ($bm_isInstanceOfArray(value)) {\\n        prevSpeed = prevSpeed[axis];\\n        nextSpeed = nextSpeed[axis];\\n    }\\n    if (Math.abs(prevSpeed) < 0.01 || Math.abs(nextSpeed) < 0.01)\\n        return true;\\n    return $bm_mul(prevSpeed, nextSpeed) < 0;\\n}\\nfunction anticipate() {\\n    var anticipation = zeroValue;\\n    if (isAfterLastKey())\\n        return anticipation;\\n    if (numKeys < 2)\\n        return anticipation;\\n    var nextKey = getNextKey(time);\\n    var aKey = nextKey;\\n    if (!isStill(aKey.time - 0.1, 0.1)) {\\n        aKey = getPrevKey(time);\\n        if (!isStill(aKey.time - 0.1, 0.1))\\n            return anticipation;\\n    }\\n    if (aKey.index == numKeys)\\n        return anticipation;\\n    var anticipationMiddle = aKey.time;\\n    var anticipationStart = $bm_sub(anticipationMiddle, anticipationDuration);\\n    var anticipationEnd = key(aKey.index + 1).time;\\n    var startValue = anticipation;\\n    var midValue = $bm_mul($bm_sum($bm_neg(valueAtTime($bm_sum(anticipationMiddle, anticipationDuration))), aKey.value), anticipationQuantity);\\n    var endValue = anticipation;\\n    if (time < anticipationStart) {\\n        return anticipation;\\n    } else if (time < anticipationMiddle) {\\n        if ($bm_isInstanceOfArray(value)) {\\n            for (var i = 0; i < value.length; i++) {\\n                anticipation[i] = bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue[i], midValue[i], [\\n                    slowOut,\\n                    0,\\n                    slowIn,\\n                    1\\n                ]);\\n            }\\n            return anticipation;\\n        } else {\\n            return bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue, midValue, [\\n                slowOut,\\n                0,\\n                slowIn,\\n                1\\n            ]);\\n        }\\n    } else if (time <= anticipationEnd) {\\n        if ($bm_isInstanceOfArray(value)) {\\n            for (var i = 0; i < value.length; i++) {\\n                anticipation[i] = bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue[i], endValue[i], [\\n                    slowOut,\\n                    0,\\n                    slowIn,\\n                    1\\n                ]);\\n            }\\n            return anticipation;\\n        } else {\\n            return bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue, endValue, [\\n                slowOut,\\n                0,\\n                slowIn,\\n                1\\n            ]);\\n        }\\n    } else {\\n        return anticipation;\\n    }\\n}\\nfunction followThroughAtTime(t) {\\n    var fThrough = zeroValue;\\n    if (elasticity == 0)\\n        return fThrough;\\n    var propSpeed;\\n    if (!simulate) {\\n        if (numKeys < 2)\\n            return fThrough;\\n        if (nearestKey(t).index == 1)\\n            return fThrough;\\n        propSpeed = length(velocityAtTime(t));\\n        if (propSpeed >= threshold)\\n            return fThrough;\\n    } else {\\n        propSpeed = getPropWorldSpeed(t, thisProperty);\\n        if (propSpeed >= threshold)\\n            return fThrough;\\n    }\\n    var fThroughStart = 0;\\n    var fThroughTime = 0;\\n    if (simulate) {\\n        var speedI = getPropWorldSpeed(t, thisProperty);\\n        var i = t;\\n        while (speedI < threshold && i > 0) {\\n            i = $bm_sub(i, $bm_div(thisComp.frameDuration, moBlurPrecision));\\n            speedI = getPropWorldSpeed(i, thisProperty);\\n        }\\n        fThroughStart = i;\\n    } else {\\n        var fThroughKey = getPrevKey(t);\\n        fThroughStart = fThroughKey.time;\\n    }\\n    if (fThroughStart == 0)\\n        return fThrough;\\n    fThroughTime = $bm_sub(t, fThroughStart);\\n    if (simulate)\\n        fThrough = $bm_div(getPropWorldVelocity($bm_sub(fThroughStart, thisComp.frameDuration), thisProperty), 2);\\n    else\\n        fThrough = $bm_div(velocityAtTime($bm_sub(fThroughStart, thisComp.frameDuration)), 2);\\n    if (bounce) {\\n        var cycleDamp = Math.exp($bm_mul($bm_mul(fThroughTime, damping), 0.1));\\n        var damp = $bm_div(Math.exp($bm_mul(fThroughTime, damping)), $bm_div(elasticity, 2));\\n        var cycleDuration = $bm_div(1, $bm_mul(elasticity, 2));\\n        cycleDuration = Math.round(timeToFrames(cycleDuration));\\n        cycleDuration = framesToTime(cycleDuration);\\n        var midDuration = $bm_div(cycleDuration, 2);\\n        var maxValue = $bm_mul(fThrough, midDuration);\\n        var cycvarime = fThroughTime;\\n        var numEndCycles = 1;\\n        while (cycvarime > cycleDuration) {\\n            cycvarime = $bm_sub(cycvarime, cycleDuration);\\n            cycleDuration = $bm_div(cycleDuration, cycleDamp);\\n            cycleDuration = Math.round(timeToFrames(cycleDuration));\\n            if (cycleDuration < 2) {\\n                cycleDuration = 2;\\n                numEndCycles++;\\n            }\\n            cycleDuration = framesToTime(cycleDuration);\\n            midDuration = $bm_div(cycleDuration, 2);\\n            maxValue = $bm_div($bm_mul(fThrough, midDuration), damp);\\n            if (numEndCycles > 100 / damping && maxValue < threshold)\\n                return zeroValue;\\n        }\\n        if (cycvarime < midDuration)\\n            fThrough = bezierInterpolation(cycvarime, 0, midDuration, 0, maxValue, [\\n                0,\\n                0.1,\\n                slowIn,\\n                1\\n            ]);\\n        else\\n            fThrough = bezierInterpolation(cycvarime, midDuration, cycleDuration, maxValue, 0, [\\n                $bm_sub(1, slowIn),\\n                0,\\n                1,\\n                0.9\\n            ]);\\n    } else {\\n        var damp = Math.exp($bm_mul(fThroughTime, damping));\\n        var sinus = $bm_mul($bm_mul($bm_mul(elasticity, fThroughTime), 2), Math.PI);\\n        sinus = Math.sin(sinus);\\n        sinus = $bm_mul($bm_div(0.3, elasticity), sinus);\\n        sinus = $bm_div(sinus, damp);\\n        if (Math.abs(sinus) < $bm_div(threshold, 100))\\n            return 0;\\n        fThrough = $bm_mul(fThrough, sinus);\\n        if (threshold > 0) {\\n            fThrough = $bm_mul(fThrough, $bm_sub(1, $bm_div(propSpeed, threshold)));\\n        }\\n    }\\n    if (bounce) {\\n        var prevValue = valueAtTime($bm_sub(fThroughStart, thisComp.frameDuration));\\n        var startValue = valueAtTime(fThroughStart);\\n        if ($bm_isInstanceOfArray(value)) {\\n            for (var i = 0; i < prevValue.length; i++) {\\n                if (prevValue[i] > startValue[i])\\n                    fThrough[i] = Math.abs(fThrough[i]);\\n                if (prevValue[i] < startValue[i])\\n                    fThrough[i] = $bm_neg(Math.abs(fThrough[i]));\\n            }\\n        } else {\\n            if (prevValue > startValue)\\n                fThrough = Math.abs(fThrough);\\n            if (prevValue < startValue)\\n                fThrough = $bm_neg(Math.abs(fThrough));\\n        }\\n    }\\n    if (simulate) {\\n        if (!isThisPosition) {\\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer));\\n            fThrough = $bm_sub(thisLayer.fromWorld(fThrough), thisLayer.anchorPoint);\\n        } else if (thisLayer.hasParent) {\\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer.parent));\\n            fThrough = $bm_sub(thisLayer.parent.fromWorld(fThrough), thisLayer.parent.anchorPoint);\\n        }\\n    }\\n    return fThrough;\\n}\\nfunction followThrough() {\\n    var propSpeed = length(velocity);\\n    if (propSpeed < threshold)\\n        return followThroughAtTime($bm_sub(time, overlapDuration));\\n    var fThrough = zeroValue;\\n    var t = time;\\n    while (t > 0) {\\n        t = $bm_sub(t, thisComp.frameDuration);\\n        if (simulate)\\n            propSpeed = getPropWorldSpeed($bm_sub(t, overlapDuration), thisProperty);\\n        else\\n            propSpeed = length(velocityAtTime(t));\\n        if (propSpeed < threshold) {\\n            fThrough = followThroughAtTime($bm_sub(t, overlapDuration));\\n            break;\\n        }\\n    }\\n    return linear(time, t, $bm_sum(t, $bm_mul(anticipationDuration, 2)), fThrough, zeroValue);\\n}\\nfunction smartSmooth(axis) {\\n    var startKey = nearestKey(time);\\n    var endKey = startKey;\\n    if (time == startKey.time)\\n        return 0;\\n    if (time < startKey.time && startKey.index == 1)\\n        return 0;\\n    if (time > startKey.time && startKey.index == numKeys)\\n        return 0;\\n    if (time < startKey.time)\\n        startKey = key($bm_sub(startKey.index, 1));\\n    if (time > startKey.time)\\n        endKey = key($bm_sum(startKey.index, 1));\\n    var sI = 0.66;\\n    var sO = 0.33;\\n    var sIV = 1;\\n    var sOV = 0;\\n    var sVal = startKey.value;\\n    var eVal = endKey.value;\\n    if ($bm_isInstanceOfArray(value)) {\\n        sVal = sVal[axis];\\n        eVal = eVal[axis];\\n    }\\n    var sTime = startKey.time;\\n    var eTime = endKey.time;\\n    if (isKeyTop(startKey, axis))\\n        sO = slowOut;\\n    else {\\n        var prevKey = key($bm_sub(startKey.index, 1));\\n        var pVal = prevKey.value;\\n        if ($bm_isInstanceOfArray(value))\\n            pVal = pVal[axis];\\n        sOV = $bm_div($bm_sub(sVal, pVal), $bm_sub(eVal, pVal));\\n    }\\n    if (isKeyTop(endKey, axis)) {\\n        sI = slowIn;\\n        if (endKey.index != numKeys) {\\n            var nextKey = key($bm_sum(endKey.index, 1));\\n            var nVal = nextKey.value;\\n            if ($bm_isInstanceOfArray(value))\\n                nVal = nVal[axis];\\n            if (Math.abs(nVal - eVal) < 0.01 && doFollowThrough)\\n                sI = 1;\\n        }\\n    } else {\\n        var nextKey = key($bm_sum(endKey.index, 1));\\n        var nVal = nextKey.value;\\n        if ($bm_isInstanceOfArray(value))\\n            nVal = nVal[axis];\\n        sIV = $bm_div($bm_sub(eVal, sVal), $bm_sub(nVal, sVal));\\n    }\\n    if (endKey.index == numKeys && doFollowThrough) {\\n        sI = 1;\\n    }\\n    var val = value;\\n    if ($bm_isInstanceOfArray(value))\\n        val = val[axis];\\n    return $bm_sub(bezierInterpolation(time, sTime, eTime, sVal, eVal, [\\n        sO,\\n        sOV,\\n        sI,\\n        sIV\\n    ]), val);\\n}\\nfunction overlap() {\\n    var ol = zeroValue;\\n    if (isThisPosition && !hasParent)\\n        return zeroValue;\\n    ol = $bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisProperty), getPropWorldValue(time, thisProperty));\\n    var motionRatio = $bm_div($bm_div(length(zeroValue, ol), thisLayer.width), 2);\\n    if (isThisPosition) {\\n        var originalDistance = length(valueAtTime(0));\\n        motionRatio = $bm_div(length(zeroValue, ol), thisComp.width);\\n    }\\n    ol = $bm_sum(ol, getPropWorldValue(time, thisProperty));\\n    ol = $bm_sum(ol, $bm_mul($bm_mul($bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisLayer.anchorPoint), ol), motionRatio), flexibility));\\n    ol = thisLayer.fromWorld(ol);\\n    if (!isThisPosition)\\n        ol = $bm_sub(ol, value);\\n    else {\\n        ol = linear(flexibility, 0, 100, $bm_div(ol, 2), 0);\\n        var prevParentWorldPos = getLayerWorldPos($bm_sub(time, overlapDuration), parent);\\n        ol = $bm_sum(ol, $bm_mul($bm_mul($bm_mul(thisLayer.fromWorld(prevParentWorldPos), motionRatio), flexibility), 5));\\n    }\\n    return ol;\\n}\\nvar okToGo = false;\\nif (simulate && fx.enabled)\\n    okToGo = true;\\nelse if (numKeys > 1 && fx.enabled)\\n    okToGo = true;\\nif (okToGo) {\\n    var smartSmoothResult = zeroValue;\\n    if (doInterpolation) {\\n        if ($bm_isInstanceOfArray(value)) {\\n            if (value.length == 2)\\n                smartSmoothResult = [\\n                    smartSmooth(0),\\n                    smartSmooth(1)\\n                ];\\n            else if (value.length == 3)\\n                smartSmoothResult = [\\n                    smartSmooth(0),\\n                    smartSmooth(1),\\n                    smartSmooth(2)\\n                ];\\n            else if (value.length == 4)\\n                smartSmoothResult = [\\n                    smartSmooth(0),\\n                    smartSmooth(1),\\n                    smartSmooth(2),\\n                    smartSmooth(3)\\n                ];\\n        } else {\\n            smartSmoothResult = smartSmooth(0);\\n        }\\n    }\\n    if (doAnticipation)\\n        result = $bm_sum(result, anticipate());\\n    result = $bm_sum(result, smartSmoothResult);\\n    if (doFollowThrough)\\n        result = $bm_sum(result, followThrough());\\n    if (doOverlap)\\n        result = $bm_sum(result, overlap());\\n}\\n$bm_rt = result;"},"o":{"a":0,"k":0,"ix":3},"m":1,"ix":2,"nm":"Trim Paths 1","mn":"ADBE Vector Filter - Trim","hd":false},{"ty":"st","c":{"a":0,"k":[0.988235294819,0.364705890417,0.349019616842,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":10,"ix":5},"lc":1,"lj":1,"ml":10,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[-65.017,-53.069],[-118.177,-53.069],[-118.177,-106.229],[-65.017,-106.229]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.164705887437,0.192156866193,0.203921571374,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":1.453,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"fl","c":{"a":0,"k":[1,1,1,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":1,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":120,"st":0,"bm":0},{"ddd":0,"ind":2,"ty":4,"nm":"Layer 3","td":1,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[147.076,428.27,0],"ix":2,"l":2},"a":{"a":0,"k":[-108.924,172.27,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"v":[[128.267,126.901],[47.822,308.572],[-197.684,350.303],[-307.258,301.527],[-346.116,146.527],[-296.55,-5.763],[-159.137,6.177],[128.267,124.865]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.164705887437,0.192156866193,0.203921571374,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":120,"st":0,"bm":0},{"ddd":0,"ind":3,"ty":4,"nm":"Layer 4","tt":2,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":1,"k":[{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":9,"s":[191.831,432.009,0],"to":[14.966,-31.796,0],"ti":[-14.966,31.796,0]},{"t":17,"s":[281.63,241.234,0]}],"ix":2,"l":2,"x":"var $bm_rt;\\nvar fx = effect(\'ŝlosilo pli pura 4\');\\nvar doAnticipation = fx(1).value;\\nvar doInterpolation = fx(2).value;\\nvar doFollowThrough = fx(3).value;\\nvar damping = $bm_div(fx(15).value, 10);\\nvar elasticity = $bm_div(fx(13).value, 10);\\nvar bounce = fx(17).value;\\nvar anticipationDuration = fx(5).value;\\nvar anticipationQuantity = $bm_div(fx(6).value, 100);\\nvar slowIn = $bm_div(fx(9).value, 100);\\nvar slowOut = $bm_div(fx(10).value, 100);\\nvar spatialMode = fx(21).value;\\nvar spatialDoInterpolation = fx(20).value;\\nvar moBlurPrecision = fx(32).value;\\nvar elasticityRandom = fx(14).value;\\nvar dampingRandom = fx(16).value;\\nvar softBody = fx(28).value;\\nvar flexibility = $bm_div(fx(29).value, 100);\\nvar doOverlap = fx(23).value;\\nvar overlapDuration = fx(24).value;\\nvar overlapRandom = fx(25).value;\\nvar threshold = $bm_div($bm_div(1, moBlurPrecision), 1000);\\nvar zeroValue;\\nif ($bm_isInstanceOfArray(value)) {\\n    if (value.length == 2)\\n        zeroValue = [\\n            0,\\n            0\\n        ];\\n    else if (value.length == 3)\\n        zeroValue = [\\n            0,\\n            0,\\n            0\\n        ];\\n    else if (value.length == 4)\\n        zeroValue = [\\n            0,\\n            0,\\n            0,\\n            0\\n        ];\\n} else\\n    zeroValue = 0;\\nvar isThisSpatial = isSpatial(thisProperty);\\nvar isThisPosition = thisProperty === $bm_transform.position;\\nvar simulate = false;\\nif (isThisSpatial) {\\n    doInterpolation = doInterpolation && spatialDoInterpolation;\\n    if (isThisPosition && thisProperty.numKeys > 0) {\\n        doOverlap = false;\\n        simulate = false;\\n    } else {\\n        simulate = spatialMode == 2;\\n        doOverlap = overlapDuration != 0 && doOverlap && simulate;\\n    }\\n} else {\\n    doOverlap = false;\\n}\\nif (!doOverlap) {\\n    overlapDuration = 0;\\n}\\nif (simulate && softBody && isThisSpatial && !isThisPosition && (doFollowThrough || doOverlap)) {\\n    var distanceRatio = $bm_div(length(valueAtTime(0), $bm_transform.anchorPoint), $bm_div(thisLayer.width, 2));\\n    distanceRatio = $bm_div($bm_sum(1, $bm_mul(distanceRatio, flexibility)), 2);\\n    if (doFollowThrough) {\\n        elasticity = $bm_div(elasticity, distanceRatio);\\n        damping = $bm_div(damping, distanceRatio);\\n    }\\n    if (doOverlap) {\\n        overlapDuration = $bm_mul(overlapDuration, distanceRatio);\\n    }\\n}\\nseedRandom(0, true);\\nif (doFollowThrough) {\\n    if (elasticityRandom > 0)\\n        elasticity = addNoise(elasticity, elasticityRandom);\\n    if (dampingRandom > 0)\\n        damping = addNoise(damping, dampingRandom);\\n}\\nif (doOverlap) {\\n    if (doOverlap && overlapRandom > 0)\\n        overlapDuration = addNoise(overlapDuration, overlapRandom);\\n}\\nvar result = value;\\nfunction isSpatial(prop) {\\n    if (!(prop.value instanceof Array))\\n        return false;\\n    if (prop.value.length != 2 && prop.value.length != 3)\\n        return false;\\n    try {\\n        if (typeof prop.speed !== \'undefined\')\\n            return true;\\n    } catch (e) {\\n        return false;\\n    }\\n}\\nfunction addNoise(val, quantity) {\\n    var randomValue = random(0.9, 1.1);\\n    var noiseValue = noise($bm_mul(valueAtTime(0), randomValue));\\n    noiseValue = $bm_mul(noiseValue, $bm_div(quantity, 100));\\n    return $bm_mul(val, $bm_sum(noiseValue, 1));\\n}\\nfunction isAfterLastKey() {\\n    if (numKeys == 0)\\n        return false;\\n    var nKey = nearestKey(time);\\n    return nKey.time <= time && nKey.index == numKeys;\\n}\\nfunction isStill(t, threshold) {\\n    var d = $bm_sub(valueAtTime(t), valueAtTime($bm_sum(t, framesToTime(1))));\\n    if ($bm_isInstanceOfArray(d)) {\\n        for (var i = 0; i < d.length; i++) {\\n            d[i] = Math.abs(d[i]);\\n            if (d[i] >= threshold) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    } else {\\n        d = Math.abs(d);\\n        return d < threshold;\\n    }\\n}\\nfunction bezierInterpolation(t, tMin, tMax, value1, value2, bezierPoints) {\\n    if (arguments.length !== 5 && arguments.length !== 6)\\n        return t;\\n    var a = $bm_sub(value2, value1);\\n    var b = $bm_sub(tMax, tMin);\\n    if (b == 0)\\n        return t;\\n    var c = clamp($bm_div($bm_sub(t, tMin), b), 0, 1);\\n    if (!(bezierPoints instanceof Array) || bezierPoints.length !== 4)\\n        bezierPoints = [\\n            0.33,\\n            0,\\n            0.66,\\n            1\\n        ];\\n    return $bm_sum($bm_mul(a, h(c, bezierPoints)), value1);\\n    function h(f, g) {\\n        var x = $bm_mul(3, g[0]);\\n        var j = $bm_sub($bm_mul(3, $bm_sub(g[2], g[0])), x);\\n        var k = $bm_sub($bm_sub(1, x), j);\\n        var l = $bm_mul(3, g[1]);\\n        var m = $bm_sub($bm_mul(3, $bm_sub(g[3], g[1])), l);\\n        var n = $bm_sub($bm_sub(1, l), m);\\n        var d = f;\\n        for (var i = 0; i < 5; i++) {\\n            var z = $bm_sub($bm_mul(d, $bm_sum(x, $bm_mul(d, $bm_sum(j, $bm_mul(d, k))))), f);\\n            if (Math.abs(z) < 0.001)\\n                break;\\n            d = $bm_sub(d, $bm_div(z, $bm_sum(x, $bm_mul(d, $bm_sum($bm_mul(2, j), $bm_mul($bm_mul(3, k), d))))));\\n        }\\n        return $bm_mul(d, $bm_sum(l, $bm_mul(d, $bm_sum(m, $bm_mul(d, n)))));\\n    }\\n}\\nfunction getPropWorldSpeed(t, prop) {\\n    return length(getPropWorldVelocity(t, prop));\\n}\\nfunction getPrevKey(t) {\\n    if (numKeys == 0)\\n        return null;\\n    var nKey = nearestKey(t);\\n    if (nKey.time <= t)\\n        return nKey;\\n    if (nKey.index > 1)\\n        return key($bm_sub(nKey.index, 1));\\n    return null;\\n}\\nfunction getNextKey(t) {\\n    if (numKeys == 0)\\n        return null;\\n    var nKey = nearestKey(t);\\n    if (nKey.time >= t)\\n        return nKey;\\n    if (nKey.index < numKeys)\\n        return key($bm_sum(nKey.index, 1));\\n    return null;\\n}\\nfunction getPropWorldVelocity(t, prop) {\\n    return $bm_mul($bm_sub(getPropWorldValue($bm_sum(t, 0.005), prop), getPropWorldValue($bm_sub(t, 0.005), prop)), 100);\\n}\\nfunction getLayerWorldPos(t, l) {\\n    return l.toWorld(l.anchorPoint, t);\\n}\\nfunction getPropWorldValue(t, prop) {\\n    if (isPosition(prop))\\n        return getLayerWorldPos(t, thisLayer);\\n    return thisLayer.toWorld(prop.valueAtTime(t), t);\\n}\\nfunction isPosition(prop) {\\n    return prop === $bm_transform.position;\\n}\\nfunction isKeyTop(k, axis) {\\n    var prevSpeed = velocityAtTime($bm_sub(k.time, threshold));\\n    var nextSpeed = velocityAtTime($bm_sum(k.time, threshold));\\n    if ($bm_isInstanceOfArray(value)) {\\n        prevSpeed = prevSpeed[axis];\\n        nextSpeed = nextSpeed[axis];\\n    }\\n    if (Math.abs(prevSpeed) < 0.01 || Math.abs(nextSpeed) < 0.01)\\n        return true;\\n    return $bm_mul(prevSpeed, nextSpeed) < 0;\\n}\\nfunction anticipate() {\\n    var anticipation = zeroValue;\\n    if (isAfterLastKey())\\n        return anticipation;\\n    if (numKeys < 2)\\n        return anticipation;\\n    var nextKey = getNextKey(time);\\n    var aKey = nextKey;\\n    if (!isStill(aKey.time - 0.1, 0.1)) {\\n        aKey = getPrevKey(time);\\n        if (!isStill(aKey.time - 0.1, 0.1))\\n            return anticipation;\\n    }\\n    if (aKey.index == numKeys)\\n        return anticipation;\\n    var anticipationMiddle = aKey.time;\\n    var anticipationStart = $bm_sub(anticipationMiddle, anticipationDuration);\\n    var anticipationEnd = key(aKey.index + 1).time;\\n    var startValue = anticipation;\\n    var midValue = $bm_mul($bm_sum($bm_neg(valueAtTime($bm_sum(anticipationMiddle, anticipationDuration))), aKey.value), anticipationQuantity);\\n    var endValue = anticipation;\\n    if (time < anticipationStart) {\\n        return anticipation;\\n    } else if (time < anticipationMiddle) {\\n        if ($bm_isInstanceOfArray(value)) {\\n            for (var i = 0; i < value.length; i++) {\\n                anticipation[i] = bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue[i], midValue[i], [\\n                    slowOut,\\n                    0,\\n                    slowIn,\\n                    1\\n                ]);\\n            }\\n            return anticipation;\\n        } else {\\n            return bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue, midValue, [\\n                slowOut,\\n                0,\\n                slowIn,\\n                1\\n            ]);\\n        }\\n    } else if (time <= anticipationEnd) {\\n        if ($bm_isInstanceOfArray(value)) {\\n            for (var i = 0; i < value.length; i++) {\\n                anticipation[i] = bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue[i], endValue[i], [\\n                    slowOut,\\n                    0,\\n                    slowIn,\\n                    1\\n                ]);\\n            }\\n            return anticipation;\\n        } else {\\n            return bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue, endValue, [\\n                slowOut,\\n                0,\\n                slowIn,\\n                1\\n            ]);\\n        }\\n    } else {\\n        return anticipation;\\n    }\\n}\\nfunction followThroughAtTime(t) {\\n    var fThrough = zeroValue;\\n    if (elasticity == 0)\\n        return fThrough;\\n    var propSpeed;\\n    if (!simulate) {\\n        if (numKeys < 2)\\n            return fThrough;\\n        if (nearestKey(t).index == 1)\\n            return fThrough;\\n        propSpeed = length(velocityAtTime(t));\\n        if (propSpeed >= threshold)\\n            return fThrough;\\n    } else {\\n        propSpeed = getPropWorldSpeed(t, thisProperty);\\n        if (propSpeed >= threshold)\\n            return fThrough;\\n    }\\n    var fThroughStart = 0;\\n    var fThroughTime = 0;\\n    if (simulate) {\\n        var speedI = getPropWorldSpeed(t, thisProperty);\\n        var i = t;\\n        while (speedI < threshold && i > 0) {\\n            i = $bm_sub(i, $bm_div(thisComp.frameDuration, moBlurPrecision));\\n            speedI = getPropWorldSpeed(i, thisProperty);\\n        }\\n        fThroughStart = i;\\n    } else {\\n        var fThroughKey = getPrevKey(t);\\n        fThroughStart = fThroughKey.time;\\n    }\\n    if (fThroughStart == 0)\\n        return fThrough;\\n    fThroughTime = $bm_sub(t, fThroughStart);\\n    if (simulate)\\n        fThrough = $bm_div(getPropWorldVelocity($bm_sub(fThroughStart, thisComp.frameDuration), thisProperty), 2);\\n    else\\n        fThrough = $bm_div(velocityAtTime($bm_sub(fThroughStart, thisComp.frameDuration)), 2);\\n    if (bounce) {\\n        var cycleDamp = Math.exp($bm_mul($bm_mul(fThroughTime, damping), 0.1));\\n        var damp = $bm_div(Math.exp($bm_mul(fThroughTime, damping)), $bm_div(elasticity, 2));\\n        var cycleDuration = $bm_div(1, $bm_mul(elasticity, 2));\\n        cycleDuration = Math.round(timeToFrames(cycleDuration));\\n        cycleDuration = framesToTime(cycleDuration);\\n        var midDuration = $bm_div(cycleDuration, 2);\\n        var maxValue = $bm_mul(fThrough, midDuration);\\n        var cycvarime = fThroughTime;\\n        var numEndCycles = 1;\\n        while (cycvarime > cycleDuration) {\\n            cycvarime = $bm_sub(cycvarime, cycleDuration);\\n            cycleDuration = $bm_div(cycleDuration, cycleDamp);\\n            cycleDuration = Math.round(timeToFrames(cycleDuration));\\n            if (cycleDuration < 2) {\\n                cycleDuration = 2;\\n                numEndCycles++;\\n            }\\n            cycleDuration = framesToTime(cycleDuration);\\n            midDuration = $bm_div(cycleDuration, 2);\\n            maxValue = $bm_div($bm_mul(fThrough, midDuration), damp);\\n            if (numEndCycles > 100 / damping && maxValue < threshold)\\n                return zeroValue;\\n        }\\n        if (cycvarime < midDuration)\\n            fThrough = bezierInterpolation(cycvarime, 0, midDuration, 0, maxValue, [\\n                0,\\n                0.1,\\n                slowIn,\\n                1\\n            ]);\\n        else\\n            fThrough = bezierInterpolation(cycvarime, midDuration, cycleDuration, maxValue, 0, [\\n                $bm_sub(1, slowIn),\\n                0,\\n                1,\\n                0.9\\n            ]);\\n    } else {\\n        var damp = Math.exp($bm_mul(fThroughTime, damping));\\n        var sinus = $bm_mul($bm_mul($bm_mul(elasticity, fThroughTime), 2), Math.PI);\\n        sinus = Math.sin(sinus);\\n        sinus = $bm_mul($bm_div(0.3, elasticity), sinus);\\n        sinus = $bm_div(sinus, damp);\\n        if (Math.abs(sinus) < $bm_div(threshold, 100))\\n            return 0;\\n        fThrough = $bm_mul(fThrough, sinus);\\n        if (threshold > 0) {\\n            fThrough = $bm_mul(fThrough, $bm_sub(1, $bm_div(propSpeed, threshold)));\\n        }\\n    }\\n    if (bounce) {\\n        var prevValue = valueAtTime($bm_sub(fThroughStart, thisComp.frameDuration));\\n        var startValue = valueAtTime(fThroughStart);\\n        if ($bm_isInstanceOfArray(value)) {\\n            for (var i = 0; i < prevValue.length; i++) {\\n                if (prevValue[i] > startValue[i])\\n                    fThrough[i] = Math.abs(fThrough[i]);\\n                if (prevValue[i] < startValue[i])\\n                    fThrough[i] = $bm_neg(Math.abs(fThrough[i]));\\n            }\\n        } else {\\n            if (prevValue > startValue)\\n                fThrough = Math.abs(fThrough);\\n            if (prevValue < startValue)\\n                fThrough = $bm_neg(Math.abs(fThrough));\\n        }\\n    }\\n    if (simulate) {\\n        if (!isThisPosition) {\\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer));\\n            fThrough = $bm_sub(thisLayer.fromWorld(fThrough), thisLayer.anchorPoint);\\n        } else if (thisLayer.hasParent) {\\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer.parent));\\n            fThrough = $bm_sub(thisLayer.parent.fromWorld(fThrough), thisLayer.parent.anchorPoint);\\n        }\\n    }\\n    return fThrough;\\n}\\nfunction followThrough() {\\n    var propSpeed = length(velocity);\\n    if (propSpeed < threshold)\\n        return followThroughAtTime($bm_sub(time, overlapDuration));\\n    var fThrough = zeroValue;\\n    var t = time;\\n    while (t > 0) {\\n        t = $bm_sub(t, thisComp.frameDuration);\\n        if (simulate)\\n            propSpeed = getPropWorldSpeed($bm_sub(t, overlapDuration), thisProperty);\\n        else\\n            propSpeed = length(velocityAtTime(t));\\n        if (propSpeed < threshold) {\\n            fThrough = followThroughAtTime($bm_sub(t, overlapDuration));\\n            break;\\n        }\\n    }\\n    return linear(time, t, $bm_sum(t, $bm_mul(anticipationDuration, 2)), fThrough, zeroValue);\\n}\\nfunction smartSmooth(axis) {\\n    var startKey = nearestKey(time);\\n    var endKey = startKey;\\n    if (time == startKey.time)\\n        return 0;\\n    if (time < startKey.time && startKey.index == 1)\\n        return 0;\\n    if (time > startKey.time && startKey.index == numKeys)\\n        return 0;\\n    if (time < startKey.time)\\n        startKey = key($bm_sub(startKey.index, 1));\\n    if (time > startKey.time)\\n        endKey = key($bm_sum(startKey.index, 1));\\n    var sI = 0.66;\\n    var sO = 0.33;\\n    var sIV = 1;\\n    var sOV = 0;\\n    var sVal = startKey.value;\\n    var eVal = endKey.value;\\n    if ($bm_isInstanceOfArray(value)) {\\n        sVal = sVal[axis];\\n        eVal = eVal[axis];\\n    }\\n    var sTime = startKey.time;\\n    var eTime = endKey.time;\\n    if (isKeyTop(startKey, axis))\\n        sO = slowOut;\\n    else {\\n        var prevKey = key($bm_sub(startKey.index, 1));\\n        var pVal = prevKey.value;\\n        if ($bm_isInstanceOfArray(value))\\n            pVal = pVal[axis];\\n        sOV = $bm_div($bm_sub(sVal, pVal), $bm_sub(eVal, pVal));\\n    }\\n    if (isKeyTop(endKey, axis)) {\\n        sI = slowIn;\\n        if (endKey.index != numKeys) {\\n            var nextKey = key($bm_sum(endKey.index, 1));\\n            var nVal = nextKey.value;\\n            if ($bm_isInstanceOfArray(value))\\n                nVal = nVal[axis];\\n            if (Math.abs(nVal - eVal) < 0.01 && doFollowThrough)\\n                sI = 1;\\n        }\\n    } else {\\n        var nextKey = key($bm_sum(endKey.index, 1));\\n        var nVal = nextKey.value;\\n        if ($bm_isInstanceOfArray(value))\\n            nVal = nVal[axis];\\n        sIV = $bm_div($bm_sub(eVal, sVal), $bm_sub(nVal, sVal));\\n    }\\n    if (endKey.index == numKeys && doFollowThrough) {\\n        sI = 1;\\n    }\\n    var val = value;\\n    if ($bm_isInstanceOfArray(value))\\n        val = val[axis];\\n    return $bm_sub(bezierInterpolation(time, sTime, eTime, sVal, eVal, [\\n        sO,\\n        sOV,\\n        sI,\\n        sIV\\n    ]), val);\\n}\\nfunction overlap() {\\n    var ol = zeroValue;\\n    if (isThisPosition && !hasParent)\\n        return zeroValue;\\n    ol = $bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisProperty), getPropWorldValue(time, thisProperty));\\n    var motionRatio = $bm_div($bm_div(length(zeroValue, ol), thisLayer.width), 2);\\n    if (isThisPosition) {\\n        var originalDistance = length(valueAtTime(0));\\n        motionRatio = $bm_div(length(zeroValue, ol), thisComp.width);\\n    }\\n    ol = $bm_sum(ol, getPropWorldValue(time, thisProperty));\\n    ol = $bm_sum(ol, $bm_mul($bm_mul($bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisLayer.anchorPoint), ol), motionRatio), flexibility));\\n    ol = thisLayer.fromWorld(ol);\\n    if (!isThisPosition)\\n        ol = $bm_sub(ol, value);\\n    else {\\n        ol = linear(flexibility, 0, 100, $bm_div(ol, 2), 0);\\n        var prevParentWorldPos = getLayerWorldPos($bm_sub(time, overlapDuration), parent);\\n        ol = $bm_sum(ol, $bm_mul($bm_mul($bm_mul(thisLayer.fromWorld(prevParentWorldPos), motionRatio), flexibility), 5));\\n    }\\n    return ol;\\n}\\nvar okToGo = false;\\nif (simulate && fx.enabled)\\n    okToGo = true;\\nelse if (numKeys > 1 && fx.enabled)\\n    okToGo = true;\\nif (okToGo) {\\n    var smartSmoothResult = zeroValue;\\n    if (doInterpolation) {\\n        if ($bm_isInstanceOfArray(value)) {\\n            if (value.length == 2)\\n                smartSmoothResult = [\\n                    smartSmooth(0),\\n                    smartSmooth(1)\\n                ];\\n            else if (value.length == 3)\\n                smartSmoothResult = [\\n                    smartSmooth(0),\\n                    smartSmooth(1),\\n                    smartSmooth(2)\\n                ];\\n            else if (value.length == 4)\\n                smartSmoothResult = [\\n                    smartSmooth(0),\\n                    smartSmooth(1),\\n                    smartSmooth(2),\\n                    smartSmooth(3)\\n                ];\\n        } else {\\n            smartSmoothResult = smartSmooth(0);\\n        }\\n    }\\n    if (doAnticipation)\\n        result = $bm_sum(result, anticipate());\\n    result = $bm_sum(result, smartSmoothResult);\\n    if (doFollowThrough)\\n        result = $bm_sum(result, followThrough());\\n    if (doOverlap)\\n        result = $bm_sum(result, overlap());\\n}\\n$bm_rt = result;"},"a":{"a":0,"k":[17.63,-5.766,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"ef":[{"ty":5,"nm":"ŝlosilo pli pura","np":34,"mn":"Pseudo/Duik Kleaner v3.2","ix":1,"en":1,"ef":[{"ty":7,"nm":"Anticipation","mn":"Pseudo/Duik Kleaner v3.2-0001","ix":1,"v":{"a":0,"k":0,"ix":1}},{"ty":7,"nm":"Smart Interpolation","mn":"Pseudo/Duik Kleaner v3.2-0002","ix":2,"v":{"a":0,"k":0,"ix":2}},{"ty":7,"nm":"Follow Through","mn":"Pseudo/Duik Kleaner v3.2-0003","ix":3,"v":{"a":0,"k":1,"ix":3}},{"ty":6,"nm":"Anticipation","mn":"Pseudo/Duik Kleaner v3.2-0004","ix":4,"v":0},{"ty":0,"nm":"Duration (s)","mn":"Pseudo/Duik Kleaner v3.2-0005","ix":5,"v":{"a":0,"k":0.3,"ix":5}},{"ty":0,"nm":"Amplitude","mn":"Pseudo/Duik Kleaner v3.2-0006","ix":6,"v":{"a":0,"k":50,"ix":6}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0007","ix":7,"v":0},{"ty":6,"nm":"Interpolation","mn":"Pseudo/Duik Kleaner v3.2-0008","ix":8,"v":0},{"ty":0,"nm":"Slow In","mn":"Pseudo/Duik Kleaner v3.2-0009","ix":9,"v":{"a":0,"k":60,"ix":9}},{"ty":0,"nm":"Slow Out","mn":"Pseudo/Duik Kleaner v3.2-0010","ix":10,"v":{"a":0,"k":25,"ix":10}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0011","ix":11,"v":0},{"ty":6,"nm":"Follow Through","mn":"Pseudo/Duik Kleaner v3.2-0012","ix":12,"v":0},{"ty":0,"nm":"Elasticity","mn":"Pseudo/Duik Kleaner v3.2-0013","ix":13,"v":{"a":0,"k":10,"ix":13}},{"ty":0,"nm":"Elasticity random","mn":"Pseudo/Duik Kleaner v3.2-0014","ix":14,"v":{"a":0,"k":0,"ix":14}},{"ty":0,"nm":"Damping","mn":"Pseudo/Duik Kleaner v3.2-0015","ix":15,"v":{"a":0,"k":50,"ix":15}},{"ty":0,"nm":"Damping random","mn":"Pseudo/Duik Kleaner v3.2-0016","ix":16,"v":{"a":0,"k":0,"ix":16}},{"ty":7,"nm":"Bounce","mn":"Pseudo/Duik Kleaner v3.2-0017","ix":17,"v":{"a":0,"k":0,"ix":17}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0018","ix":18,"v":0},{"ty":6,"nm":"Spatial Options","mn":"Pseudo/Duik Kleaner v3.2-0019","ix":19,"v":0},{"ty":7,"nm":"Smart Interpolation","mn":"Pseudo/Duik Kleaner v3.2-0020","ix":20,"v":{"a":0,"k":0,"ix":20}},{"ty":7,"nm":"Mode","mn":"Pseudo/Duik Kleaner v3.2-0021","ix":21,"v":{"a":0,"k":1,"ix":21}},{"ty":6,"nm":"Overlap (simulation)","mn":"Pseudo/Duik Kleaner v3.2-0022","ix":22,"v":0},{"ty":7,"nm":"Overlap","mn":"Pseudo/Duik Kleaner v3.2-0023","ix":23,"v":{"a":0,"k":1,"ix":23}},{"ty":0,"nm":"Delay (s)","mn":"Pseudo/Duik Kleaner v3.2-0024","ix":24,"v":{"a":0,"k":0.05,"ix":24}},{"ty":0,"nm":"Overlap random","mn":"Pseudo/Duik Kleaner v3.2-0025","ix":25,"v":{"a":0,"k":0,"ix":25}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0026","ix":26,"v":0},{"ty":6,"nm":"Soft Body (simulation)","mn":"Pseudo/Duik Kleaner v3.2-0027","ix":27,"v":0},{"ty":7,"nm":"Soft Body","mn":"Pseudo/Duik Kleaner v3.2-0028","ix":28,"v":{"a":0,"k":1,"ix":28}},{"ty":0,"nm":"Soft-Body Flexibility","mn":"Pseudo/Duik Kleaner v3.2-0029","ix":29,"v":{"a":0,"k":100,"ix":29}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0030","ix":30,"v":0},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0031","ix":31,"v":0},{"ty":0,"nm":"Precision","mn":"Pseudo/Duik Kleaner v3.2-0032","ix":32,"v":{"a":0,"k":1,"ix":32}}]},{"ty":5,"nm":"ŝlosilo pli pura 2","np":34,"mn":"Pseudo/Duik Kleaner v3.2","ix":2,"en":1,"ef":[{"ty":7,"nm":"Anticipation","mn":"Pseudo/Duik Kleaner v3.2-0001","ix":1,"v":{"a":0,"k":0,"ix":1}},{"ty":7,"nm":"Smart Interpolation","mn":"Pseudo/Duik Kleaner v3.2-0002","ix":2,"v":{"a":0,"k":0,"ix":2}},{"ty":7,"nm":"Follow Through","mn":"Pseudo/Duik Kleaner v3.2-0003","ix":3,"v":{"a":0,"k":1,"ix":3}},{"ty":6,"nm":"Anticipation","mn":"Pseudo/Duik Kleaner v3.2-0004","ix":4,"v":0},{"ty":0,"nm":"Duration (s)","mn":"Pseudo/Duik Kleaner v3.2-0005","ix":5,"v":{"a":0,"k":0.3,"ix":5}},{"ty":0,"nm":"Amplitude","mn":"Pseudo/Duik Kleaner v3.2-0006","ix":6,"v":{"a":0,"k":50,"ix":6}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0007","ix":7,"v":0},{"ty":6,"nm":"Interpolation","mn":"Pseudo/Duik Kleaner v3.2-0008","ix":8,"v":0},{"ty":0,"nm":"Slow In","mn":"Pseudo/Duik Kleaner v3.2-0009","ix":9,"v":{"a":0,"k":60,"ix":9}},{"ty":0,"nm":"Slow Out","mn":"Pseudo/Duik Kleaner v3.2-0010","ix":10,"v":{"a":0,"k":25,"ix":10}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0011","ix":11,"v":0},{"ty":6,"nm":"Follow Through","mn":"Pseudo/Duik Kleaner v3.2-0012","ix":12,"v":0},{"ty":0,"nm":"Elasticity","mn":"Pseudo/Duik Kleaner v3.2-0013","ix":13,"v":{"a":0,"k":10,"ix":13}},{"ty":0,"nm":"Elasticity random","mn":"Pseudo/Duik Kleaner v3.2-0014","ix":14,"v":{"a":0,"k":0,"ix":14}},{"ty":0,"nm":"Damping","mn":"Pseudo/Duik Kleaner v3.2-0015","ix":15,"v":{"a":0,"k":50,"ix":15}},{"ty":0,"nm":"Damping random","mn":"Pseudo/Duik Kleaner v3.2-0016","ix":16,"v":{"a":0,"k":0,"ix":16}},{"ty":7,"nm":"Bounce","mn":"Pseudo/Duik Kleaner v3.2-0017","ix":17,"v":{"a":0,"k":0,"ix":17}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0018","ix":18,"v":0},{"ty":6,"nm":"Spatial Options","mn":"Pseudo/Duik Kleaner v3.2-0019","ix":19,"v":0},{"ty":7,"nm":"Smart Interpolation","mn":"Pseudo/Duik Kleaner v3.2-0020","ix":20,"v":{"a":0,"k":0,"ix":20}},{"ty":7,"nm":"Mode","mn":"Pseudo/Duik Kleaner v3.2-0021","ix":21,"v":{"a":0,"k":1,"ix":21}},{"ty":6,"nm":"Overlap (simulation)","mn":"Pseudo/Duik Kleaner v3.2-0022","ix":22,"v":0},{"ty":7,"nm":"Overlap","mn":"Pseudo/Duik Kleaner v3.2-0023","ix":23,"v":{"a":0,"k":1,"ix":23}},{"ty":0,"nm":"Delay (s)","mn":"Pseudo/Duik Kleaner v3.2-0024","ix":24,"v":{"a":0,"k":0.05,"ix":24}},{"ty":0,"nm":"Overlap random","mn":"Pseudo/Duik Kleaner v3.2-0025","ix":25,"v":{"a":0,"k":0,"ix":25}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0026","ix":26,"v":0},{"ty":6,"nm":"Soft Body (simulation)","mn":"Pseudo/Duik Kleaner v3.2-0027","ix":27,"v":0},{"ty":7,"nm":"Soft Body","mn":"Pseudo/Duik Kleaner v3.2-0028","ix":28,"v":{"a":0,"k":1,"ix":28}},{"ty":0,"nm":"Soft-Body Flexibility","mn":"Pseudo/Duik Kleaner v3.2-0029","ix":29,"v":{"a":0,"k":100,"ix":29}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0030","ix":30,"v":0},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0031","ix":31,"v":0},{"ty":0,"nm":"Precision","mn":"Pseudo/Duik Kleaner v3.2-0032","ix":32,"v":{"a":0,"k":1,"ix":32}}]},{"ty":5,"nm":"ŝlosilo pli pura 3","np":34,"mn":"Pseudo/Duik Kleaner v3.2","ix":3,"en":1,"ef":[{"ty":7,"nm":"Anticipation","mn":"Pseudo/Duik Kleaner v3.2-0001","ix":1,"v":{"a":0,"k":0,"ix":1}},{"ty":7,"nm":"Smart Interpolation","mn":"Pseudo/Duik Kleaner v3.2-0002","ix":2,"v":{"a":0,"k":0,"ix":2}},{"ty":7,"nm":"Follow Through","mn":"Pseudo/Duik Kleaner v3.2-0003","ix":3,"v":{"a":0,"k":1,"ix":3}},{"ty":6,"nm":"Anticipation","mn":"Pseudo/Duik Kleaner v3.2-0004","ix":4,"v":0},{"ty":0,"nm":"Duration (s)","mn":"Pseudo/Duik Kleaner v3.2-0005","ix":5,"v":{"a":0,"k":0.3,"ix":5}},{"ty":0,"nm":"Amplitude","mn":"Pseudo/Duik Kleaner v3.2-0006","ix":6,"v":{"a":0,"k":50,"ix":6}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0007","ix":7,"v":0},{"ty":6,"nm":"Interpolation","mn":"Pseudo/Duik Kleaner v3.2-0008","ix":8,"v":0},{"ty":0,"nm":"Slow In","mn":"Pseudo/Duik Kleaner v3.2-0009","ix":9,"v":{"a":0,"k":60,"ix":9}},{"ty":0,"nm":"Slow Out","mn":"Pseudo/Duik Kleaner v3.2-0010","ix":10,"v":{"a":0,"k":25,"ix":10}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0011","ix":11,"v":0},{"ty":6,"nm":"Follow Through","mn":"Pseudo/Duik Kleaner v3.2-0012","ix":12,"v":0},{"ty":0,"nm":"Elasticity","mn":"Pseudo/Duik Kleaner v3.2-0013","ix":13,"v":{"a":0,"k":10,"ix":13}},{"ty":0,"nm":"Elasticity random","mn":"Pseudo/Duik Kleaner v3.2-0014","ix":14,"v":{"a":0,"k":0,"ix":14}},{"ty":0,"nm":"Damping","mn":"Pseudo/Duik Kleaner v3.2-0015","ix":15,"v":{"a":0,"k":50,"ix":15}},{"ty":0,"nm":"Damping random","mn":"Pseudo/Duik Kleaner v3.2-0016","ix":16,"v":{"a":0,"k":0,"ix":16}},{"ty":7,"nm":"Bounce","mn":"Pseudo/Duik Kleaner v3.2-0017","ix":17,"v":{"a":0,"k":0,"ix":17}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0018","ix":18,"v":0},{"ty":6,"nm":"Spatial Options","mn":"Pseudo/Duik Kleaner v3.2-0019","ix":19,"v":0},{"ty":7,"nm":"Smart Interpolation","mn":"Pseudo/Duik Kleaner v3.2-0020","ix":20,"v":{"a":0,"k":0,"ix":20}},{"ty":7,"nm":"Mode","mn":"Pseudo/Duik Kleaner v3.2-0021","ix":21,"v":{"a":0,"k":1,"ix":21}},{"ty":6,"nm":"Overlap (simulation)","mn":"Pseudo/Duik Kleaner v3.2-0022","ix":22,"v":0},{"ty":7,"nm":"Overlap","mn":"Pseudo/Duik Kleaner v3.2-0023","ix":23,"v":{"a":0,"k":1,"ix":23}},{"ty":0,"nm":"Delay (s)","mn":"Pseudo/Duik Kleaner v3.2-0024","ix":24,"v":{"a":0,"k":0.05,"ix":24}},{"ty":0,"nm":"Overlap random","mn":"Pseudo/Duik Kleaner v3.2-0025","ix":25,"v":{"a":0,"k":0,"ix":25}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0026","ix":26,"v":0},{"ty":6,"nm":"Soft Body (simulation)","mn":"Pseudo/Duik Kleaner v3.2-0027","ix":27,"v":0},{"ty":7,"nm":"Soft Body","mn":"Pseudo/Duik Kleaner v3.2-0028","ix":28,"v":{"a":0,"k":1,"ix":28}},{"ty":0,"nm":"Soft-Body Flexibility","mn":"Pseudo/Duik Kleaner v3.2-0029","ix":29,"v":{"a":0,"k":100,"ix":29}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0030","ix":30,"v":0},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0031","ix":31,"v":0},{"ty":0,"nm":"Precision","mn":"Pseudo/Duik Kleaner v3.2-0032","ix":32,"v":{"a":0,"k":1,"ix":32}}]},{"ty":5,"nm":"ŝlosilo pli pura 4","np":34,"mn":"Pseudo/Duik Kleaner v3.2","ix":4,"en":1,"ef":[{"ty":7,"nm":"Anticipation","mn":"Pseudo/Duik Kleaner v3.2-0001","ix":1,"v":{"a":0,"k":0,"ix":1}},{"ty":7,"nm":"Smart Interpolation","mn":"Pseudo/Duik Kleaner v3.2-0002","ix":2,"v":{"a":0,"k":0,"ix":2}},{"ty":7,"nm":"Follow Through","mn":"Pseudo/Duik Kleaner v3.2-0003","ix":3,"v":{"a":0,"k":1,"ix":3}},{"ty":6,"nm":"Anticipation","mn":"Pseudo/Duik Kleaner v3.2-0004","ix":4,"v":0},{"ty":0,"nm":"Duration (s)","mn":"Pseudo/Duik Kleaner v3.2-0005","ix":5,"v":{"a":0,"k":0.3,"ix":5}},{"ty":0,"nm":"Amplitude","mn":"Pseudo/Duik Kleaner v3.2-0006","ix":6,"v":{"a":0,"k":50,"ix":6}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0007","ix":7,"v":0},{"ty":6,"nm":"Interpolation","mn":"Pseudo/Duik Kleaner v3.2-0008","ix":8,"v":0},{"ty":0,"nm":"Slow In","mn":"Pseudo/Duik Kleaner v3.2-0009","ix":9,"v":{"a":0,"k":60,"ix":9}},{"ty":0,"nm":"Slow Out","mn":"Pseudo/Duik Kleaner v3.2-0010","ix":10,"v":{"a":0,"k":25,"ix":10}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0011","ix":11,"v":0},{"ty":6,"nm":"Follow Through","mn":"Pseudo/Duik Kleaner v3.2-0012","ix":12,"v":0},{"ty":0,"nm":"Elasticity","mn":"Pseudo/Duik Kleaner v3.2-0013","ix":13,"v":{"a":0,"k":10,"ix":13}},{"ty":0,"nm":"Elasticity random","mn":"Pseudo/Duik Kleaner v3.2-0014","ix":14,"v":{"a":0,"k":0,"ix":14}},{"ty":0,"nm":"Damping","mn":"Pseudo/Duik Kleaner v3.2-0015","ix":15,"v":{"a":0,"k":50,"ix":15}},{"ty":0,"nm":"Damping random","mn":"Pseudo/Duik Kleaner v3.2-0016","ix":16,"v":{"a":0,"k":0,"ix":16}},{"ty":7,"nm":"Bounce","mn":"Pseudo/Duik Kleaner v3.2-0017","ix":17,"v":{"a":0,"k":0,"ix":17}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0018","ix":18,"v":0},{"ty":6,"nm":"Spatial Options","mn":"Pseudo/Duik Kleaner v3.2-0019","ix":19,"v":0},{"ty":7,"nm":"Smart Interpolation","mn":"Pseudo/Duik Kleaner v3.2-0020","ix":20,"v":{"a":0,"k":0,"ix":20}},{"ty":7,"nm":"Mode","mn":"Pseudo/Duik Kleaner v3.2-0021","ix":21,"v":{"a":0,"k":1,"ix":21}},{"ty":6,"nm":"Overlap (simulation)","mn":"Pseudo/Duik Kleaner v3.2-0022","ix":22,"v":0},{"ty":7,"nm":"Overlap","mn":"Pseudo/Duik Kleaner v3.2-0023","ix":23,"v":{"a":0,"k":1,"ix":23}},{"ty":0,"nm":"Delay (s)","mn":"Pseudo/Duik Kleaner v3.2-0024","ix":24,"v":{"a":0,"k":0.05,"ix":24}},{"ty":0,"nm":"Overlap random","mn":"Pseudo/Duik Kleaner v3.2-0025","ix":25,"v":{"a":0,"k":0,"ix":25}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0026","ix":26,"v":0},{"ty":6,"nm":"Soft Body (simulation)","mn":"Pseudo/Duik Kleaner v3.2-0027","ix":27,"v":0},{"ty":7,"nm":"Soft Body","mn":"Pseudo/Duik Kleaner v3.2-0028","ix":28,"v":{"a":0,"k":1,"ix":28}},{"ty":0,"nm":"Soft-Body Flexibility","mn":"Pseudo/Duik Kleaner v3.2-0029","ix":29,"v":{"a":0,"k":100,"ix":29}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0030","ix":30,"v":0},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0031","ix":31,"v":0},{"ty":0,"nm":"Precision","mn":"Pseudo/Duik Kleaner v3.2-0032","ix":32,"v":{"a":0,"k":1,"ix":32}}]},{"ty":5,"nm":"ŝlosilo pli pura 5","np":34,"mn":"Pseudo/Duik Kleaner v3.2","ix":5,"en":1,"ef":[{"ty":7,"nm":"Anticipation","mn":"Pseudo/Duik Kleaner v3.2-0001","ix":1,"v":{"a":0,"k":0,"ix":1}},{"ty":7,"nm":"Smart Interpolation","mn":"Pseudo/Duik Kleaner v3.2-0002","ix":2,"v":{"a":0,"k":0,"ix":2}},{"ty":7,"nm":"Follow Through","mn":"Pseudo/Duik Kleaner v3.2-0003","ix":3,"v":{"a":0,"k":1,"ix":3}},{"ty":6,"nm":"Anticipation","mn":"Pseudo/Duik Kleaner v3.2-0004","ix":4,"v":0},{"ty":0,"nm":"Duration (s)","mn":"Pseudo/Duik Kleaner v3.2-0005","ix":5,"v":{"a":0,"k":0.3,"ix":5}},{"ty":0,"nm":"Amplitude","mn":"Pseudo/Duik Kleaner v3.2-0006","ix":6,"v":{"a":0,"k":50,"ix":6}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0007","ix":7,"v":0},{"ty":6,"nm":"Interpolation","mn":"Pseudo/Duik Kleaner v3.2-0008","ix":8,"v":0},{"ty":0,"nm":"Slow In","mn":"Pseudo/Duik Kleaner v3.2-0009","ix":9,"v":{"a":0,"k":60,"ix":9}},{"ty":0,"nm":"Slow Out","mn":"Pseudo/Duik Kleaner v3.2-0010","ix":10,"v":{"a":0,"k":25,"ix":10}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0011","ix":11,"v":0},{"ty":6,"nm":"Follow Through","mn":"Pseudo/Duik Kleaner v3.2-0012","ix":12,"v":0},{"ty":0,"nm":"Elasticity","mn":"Pseudo/Duik Kleaner v3.2-0013","ix":13,"v":{"a":0,"k":10,"ix":13}},{"ty":0,"nm":"Elasticity random","mn":"Pseudo/Duik Kleaner v3.2-0014","ix":14,"v":{"a":0,"k":0,"ix":14}},{"ty":0,"nm":"Damping","mn":"Pseudo/Duik Kleaner v3.2-0015","ix":15,"v":{"a":0,"k":50,"ix":15}},{"ty":0,"nm":"Damping random","mn":"Pseudo/Duik Kleaner v3.2-0016","ix":16,"v":{"a":0,"k":0,"ix":16}},{"ty":7,"nm":"Bounce","mn":"Pseudo/Duik Kleaner v3.2-0017","ix":17,"v":{"a":0,"k":0,"ix":17}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0018","ix":18,"v":0},{"ty":6,"nm":"Spatial Options","mn":"Pseudo/Duik Kleaner v3.2-0019","ix":19,"v":0},{"ty":7,"nm":"Smart Interpolation","mn":"Pseudo/Duik Kleaner v3.2-0020","ix":20,"v":{"a":0,"k":0,"ix":20}},{"ty":7,"nm":"Mode","mn":"Pseudo/Duik Kleaner v3.2-0021","ix":21,"v":{"a":0,"k":1,"ix":21}},{"ty":6,"nm":"Overlap (simulation)","mn":"Pseudo/Duik Kleaner v3.2-0022","ix":22,"v":0},{"ty":7,"nm":"Overlap","mn":"Pseudo/Duik Kleaner v3.2-0023","ix":23,"v":{"a":0,"k":1,"ix":23}},{"ty":0,"nm":"Delay (s)","mn":"Pseudo/Duik Kleaner v3.2-0024","ix":24,"v":{"a":0,"k":0.05,"ix":24}},{"ty":0,"nm":"Overlap random","mn":"Pseudo/Duik Kleaner v3.2-0025","ix":25,"v":{"a":0,"k":0,"ix":25}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0026","ix":26,"v":0},{"ty":6,"nm":"Soft Body (simulation)","mn":"Pseudo/Duik Kleaner v3.2-0027","ix":27,"v":0},{"ty":7,"nm":"Soft Body","mn":"Pseudo/Duik Kleaner v3.2-0028","ix":28,"v":{"a":0,"k":1,"ix":28}},{"ty":0,"nm":"Soft-Body Flexibility","mn":"Pseudo/Duik Kleaner v3.2-0029","ix":29,"v":{"a":0,"k":100,"ix":29}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0030","ix":30,"v":0},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0031","ix":31,"v":0},{"ty":0,"nm":"Precision","mn":"Pseudo/Duik Kleaner v3.2-0032","ix":32,"v":{"a":0,"k":1,"ix":32}}]}],"shapes":[{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0]],"v":[[-19.69,48.288],[-14.68,66.244],[0.63,57.519],[5.322,22.298],[-2.221,18.458]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.164705887437,0.192156866193,0.203921571374,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":1.453,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0,0],[-0.117,2.289],[-4.458,6.254],[-1.56,1.197],[-1.923,-0.464],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0.4,-8.185],[1.165,-1.644],[1.553,-1.178],[0,0],[0,0],[0,0],[0,0]],"v":[[-19.688,48.279],[-17.138,55.885],[-14.68,66.244],[-13.873,51.127],[-4.618,29.755],[-0.679,25.25],[4.763,23.815],[5.101,23.965],[5.324,22.289],[-2.219,18.449]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.117647059262,0.737254917622,0.40000000596,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":2,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"v":[[-19.688,48.279],[-17.138,55.885],[-17.086,56.024],[-14.68,66.244],[0.627,57.523],[5.101,23.965],[5.324,22.289],[-2.219,18.449]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.227450981736,0.800000011921,0.505882382393,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 3","np":2,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ty":"gr","it":[{"ty":"gr","it":[{"ty":"gr","it":[{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0.796,-0.948],[0.622,0.572],[-0.796,0.948],[-0.625,-0.575]],"o":[[-0.796,0.948],[-0.625,-0.575],[0.796,-0.948],[0.622,0.572]],"v":[[48.791,-52.735],[46.22,-52.055],[46.531,-54.814],[49.106,-55.49]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[1,1,1,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":1,"k":[{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":17,"s":[0,2],"to":[0,-0.333],"ti":[0,0.333]},{"t":22,"s":[0,0]}],"ix":2,"x":"var $bm_rt;\\nvar fx = effect(\'ŝlosilo pli pura 4\');\\nvar doAnticipation = fx(1).value;\\nvar doInterpolation = fx(2).value;\\nvar doFollowThrough = fx(3).value;\\nvar damping = $bm_div(fx(15).value, 10);\\nvar elasticity = $bm_div(fx(13).value, 10);\\nvar bounce = fx(17).value;\\nvar anticipationDuration = fx(5).value;\\nvar anticipationQuantity = $bm_div(fx(6).value, 100);\\nvar slowIn = $bm_div(fx(9).value, 100);\\nvar slowOut = $bm_div(fx(10).value, 100);\\nvar spatialMode = fx(21).value;\\nvar spatialDoInterpolation = fx(20).value;\\nvar moBlurPrecision = fx(32).value;\\nvar elasticityRandom = fx(14).value;\\nvar dampingRandom = fx(16).value;\\nvar softBody = fx(28).value;\\nvar flexibility = $bm_div(fx(29).value, 100);\\nvar doOverlap = fx(23).value;\\nvar overlapDuration = fx(24).value;\\nvar overlapRandom = fx(25).value;\\nvar threshold = $bm_div($bm_div(1, moBlurPrecision), 1000);\\nvar zeroValue;\\nif ($bm_isInstanceOfArray(value)) {\\n    if (value.length == 2)\\n        zeroValue = [\\n            0,\\n            0\\n        ];\\n    else if (value.length == 3)\\n        zeroValue = [\\n            0,\\n            0,\\n            0\\n        ];\\n    else if (value.length == 4)\\n        zeroValue = [\\n            0,\\n            0,\\n            0,\\n            0\\n        ];\\n} else\\n    zeroValue = 0;\\nvar isThisSpatial = isSpatial(thisProperty);\\nvar isThisPosition = thisProperty === $bm_transform.position;\\nvar simulate = false;\\nif (isThisSpatial) {\\n    doInterpolation = doInterpolation && spatialDoInterpolation;\\n    if (isThisPosition && thisProperty.numKeys > 0) {\\n        doOverlap = false;\\n        simulate = false;\\n    } else {\\n        simulate = spatialMode == 2;\\n        doOverlap = overlapDuration != 0 && doOverlap && simulate;\\n    }\\n} else {\\n    doOverlap = false;\\n}\\nif (!doOverlap) {\\n    overlapDuration = 0;\\n}\\nif (simulate && softBody && isThisSpatial && !isThisPosition && (doFollowThrough || doOverlap)) {\\n    var distanceRatio = $bm_div(length(valueAtTime(0), $bm_transform.anchorPoint), $bm_div(thisLayer.width, 2));\\n    distanceRatio = $bm_div($bm_sum(1, $bm_mul(distanceRatio, flexibility)), 2);\\n    if (doFollowThrough) {\\n        elasticity = $bm_div(elasticity, distanceRatio);\\n        damping = $bm_div(damping, distanceRatio);\\n    }\\n    if (doOverlap) {\\n        overlapDuration = $bm_mul(overlapDuration, distanceRatio);\\n    }\\n}\\nseedRandom(0, true);\\nif (doFollowThrough) {\\n    if (elasticityRandom > 0)\\n        elasticity = addNoise(elasticity, elasticityRandom);\\n    if (dampingRandom > 0)\\n        damping = addNoise(damping, dampingRandom);\\n}\\nif (doOverlap) {\\n    if (doOverlap && overlapRandom > 0)\\n        overlapDuration = addNoise(overlapDuration, overlapRandom);\\n}\\nvar result = value;\\nfunction isSpatial(prop) {\\n    if (!(prop.value instanceof Array))\\n        return false;\\n    if (prop.value.length != 2 && prop.value.length != 3)\\n        return false;\\n    try {\\n        if (typeof prop.speed !== \'undefined\')\\n            return true;\\n    } catch (e) {\\n        return false;\\n    }\\n}\\nfunction addNoise(val, quantity) {\\n    var randomValue = random(0.9, 1.1);\\n    var noiseValue = noise($bm_mul(valueAtTime(0), randomValue));\\n    noiseValue = $bm_mul(noiseValue, $bm_div(quantity, 100));\\n    return $bm_mul(val, $bm_sum(noiseValue, 1));\\n}\\nfunction isAfterLastKey() {\\n    if (numKeys == 0)\\n        return false;\\n    var nKey = nearestKey(time);\\n    return nKey.time <= time && nKey.index == numKeys;\\n}\\nfunction isStill(t, threshold) {\\n    var d = $bm_sub(valueAtTime(t), valueAtTime($bm_sum(t, framesToTime(1))));\\n    if ($bm_isInstanceOfArray(d)) {\\n        for (var i = 0; i < d.length; i++) {\\n            d[i] = Math.abs(d[i]);\\n            if (d[i] >= threshold) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    } else {\\n        d = Math.abs(d);\\n        return d < threshold;\\n    }\\n}\\nfunction bezierInterpolation(t, tMin, tMax, value1, value2, bezierPoints) {\\n    if (arguments.length !== 5 && arguments.length !== 6)\\n        return t;\\n    var a = $bm_sub(value2, value1);\\n    var b = $bm_sub(tMax, tMin);\\n    if (b == 0)\\n        return t;\\n    var c = clamp($bm_div($bm_sub(t, tMin), b), 0, 1);\\n    if (!(bezierPoints instanceof Array) || bezierPoints.length !== 4)\\n        bezierPoints = [\\n            0.33,\\n            0,\\n            0.66,\\n            1\\n        ];\\n    return $bm_sum($bm_mul(a, h(c, bezierPoints)), value1);\\n    function h(f, g) {\\n        var x = $bm_mul(3, g[0]);\\n        var j = $bm_sub($bm_mul(3, $bm_sub(g[2], g[0])), x);\\n        var k = $bm_sub($bm_sub(1, x), j);\\n        var l = $bm_mul(3, g[1]);\\n        var m = $bm_sub($bm_mul(3, $bm_sub(g[3], g[1])), l);\\n        var n = $bm_sub($bm_sub(1, l), m);\\n        var d = f;\\n        for (var i = 0; i < 5; i++) {\\n            var z = $bm_sub($bm_mul(d, $bm_sum(x, $bm_mul(d, $bm_sum(j, $bm_mul(d, k))))), f);\\n            if (Math.abs(z) < 0.001)\\n                break;\\n            d = $bm_sub(d, $bm_div(z, $bm_sum(x, $bm_mul(d, $bm_sum($bm_mul(2, j), $bm_mul($bm_mul(3, k), d))))));\\n        }\\n        return $bm_mul(d, $bm_sum(l, $bm_mul(d, $bm_sum(m, $bm_mul(d, n)))));\\n    }\\n}\\nfunction getPropWorldSpeed(t, prop) {\\n    return length(getPropWorldVelocity(t, prop));\\n}\\nfunction getPrevKey(t) {\\n    if (numKeys == 0)\\n        return null;\\n    var nKey = nearestKey(t);\\n    if (nKey.time <= t)\\n        return nKey;\\n    if (nKey.index > 1)\\n        return key($bm_sub(nKey.index, 1));\\n    return null;\\n}\\nfunction getNextKey(t) {\\n    if (numKeys == 0)\\n        return null;\\n    var nKey = nearestKey(t);\\n    if (nKey.time >= t)\\n        return nKey;\\n    if (nKey.index < numKeys)\\n        return key($bm_sum(nKey.index, 1));\\n    return null;\\n}\\nfunction getPropWorldVelocity(t, prop) {\\n    return $bm_mul($bm_sub(getPropWorldValue($bm_sum(t, 0.005), prop), getPropWorldValue($bm_sub(t, 0.005), prop)), 100);\\n}\\nfunction getLayerWorldPos(t, l) {\\n    return l.toWorld(l.anchorPoint, t);\\n}\\nfunction getPropWorldValue(t, prop) {\\n    if (isPosition(prop))\\n        return getLayerWorldPos(t, thisLayer);\\n    return thisLayer.toWorld(prop.valueAtTime(t), t);\\n}\\nfunction isPosition(prop) {\\n    return prop === $bm_transform.position;\\n}\\nfunction isKeyTop(k, axis) {\\n    var prevSpeed = velocityAtTime($bm_sub(k.time, threshold));\\n    var nextSpeed = velocityAtTime($bm_sum(k.time, threshold));\\n    if ($bm_isInstanceOfArray(value)) {\\n        prevSpeed = prevSpeed[axis];\\n        nextSpeed = nextSpeed[axis];\\n    }\\n    if (Math.abs(prevSpeed) < 0.01 || Math.abs(nextSpeed) < 0.01)\\n        return true;\\n    return $bm_mul(prevSpeed, nextSpeed) < 0;\\n}\\nfunction anticipate() {\\n    var anticipation = zeroValue;\\n    if (isAfterLastKey())\\n        return anticipation;\\n    if (numKeys < 2)\\n        return anticipation;\\n    var nextKey = getNextKey(time);\\n    var aKey = nextKey;\\n    if (!isStill(aKey.time - 0.1, 0.1)) {\\n        aKey = getPrevKey(time);\\n        if (!isStill(aKey.time - 0.1, 0.1))\\n            return anticipation;\\n    }\\n    if (aKey.index == numKeys)\\n        return anticipation;\\n    var anticipationMiddle = aKey.time;\\n    var anticipationStart = $bm_sub(anticipationMiddle, anticipationDuration);\\n    var anticipationEnd = key(aKey.index + 1).time;\\n    var startValue = anticipation;\\n    var midValue = $bm_mul($bm_sum($bm_neg(valueAtTime($bm_sum(anticipationMiddle, anticipationDuration))), aKey.value), anticipationQuantity);\\n    var endValue = anticipation;\\n    if (time < anticipationStart) {\\n        return anticipation;\\n    } else if (time < anticipationMiddle) {\\n        if ($bm_isInstanceOfArray(value)) {\\n            for (var i = 0; i < value.length; i++) {\\n                anticipation[i] = bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue[i], midValue[i], [\\n                    slowOut,\\n                    0,\\n                    slowIn,\\n                    1\\n                ]);\\n            }\\n            return anticipation;\\n        } else {\\n            return bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue, midValue, [\\n                slowOut,\\n                0,\\n                slowIn,\\n                1\\n            ]);\\n        }\\n    } else if (time <= anticipationEnd) {\\n        if ($bm_isInstanceOfArray(value)) {\\n            for (var i = 0; i < value.length; i++) {\\n                anticipation[i] = bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue[i], endValue[i], [\\n                    slowOut,\\n                    0,\\n                    slowIn,\\n                    1\\n                ]);\\n            }\\n            return anticipation;\\n        } else {\\n            return bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue, endValue, [\\n                slowOut,\\n                0,\\n                slowIn,\\n                1\\n            ]);\\n        }\\n    } else {\\n        return anticipation;\\n    }\\n}\\nfunction followThroughAtTime(t) {\\n    var fThrough = zeroValue;\\n    if (elasticity == 0)\\n        return fThrough;\\n    var propSpeed;\\n    if (!simulate) {\\n        if (numKeys < 2)\\n            return fThrough;\\n        if (nearestKey(t).index == 1)\\n            return fThrough;\\n        propSpeed = length(velocityAtTime(t));\\n        if (propSpeed >= threshold)\\n            return fThrough;\\n    } else {\\n        propSpeed = getPropWorldSpeed(t, thisProperty);\\n        if (propSpeed >= threshold)\\n            return fThrough;\\n    }\\n    var fThroughStart = 0;\\n    var fThroughTime = 0;\\n    if (simulate) {\\n        var speedI = getPropWorldSpeed(t, thisProperty);\\n        var i = t;\\n        while (speedI < threshold && i > 0) {\\n            i = $bm_sub(i, $bm_div(thisComp.frameDuration, moBlurPrecision));\\n            speedI = getPropWorldSpeed(i, thisProperty);\\n        }\\n        fThroughStart = i;\\n    } else {\\n        var fThroughKey = getPrevKey(t);\\n        fThroughStart = fThroughKey.time;\\n    }\\n    if (fThroughStart == 0)\\n        return fThrough;\\n    fThroughTime = $bm_sub(t, fThroughStart);\\n    if (simulate)\\n        fThrough = $bm_div(getPropWorldVelocity($bm_sub(fThroughStart, thisComp.frameDuration), thisProperty), 2);\\n    else\\n        fThrough = $bm_div(velocityAtTime($bm_sub(fThroughStart, thisComp.frameDuration)), 2);\\n    if (bounce) {\\n        var cycleDamp = Math.exp($bm_mul($bm_mul(fThroughTime, damping), 0.1));\\n        var damp = $bm_div(Math.exp($bm_mul(fThroughTime, damping)), $bm_div(elasticity, 2));\\n        var cycleDuration = $bm_div(1, $bm_mul(elasticity, 2));\\n        cycleDuration = Math.round(timeToFrames(cycleDuration));\\n        cycleDuration = framesToTime(cycleDuration);\\n        var midDuration = $bm_div(cycleDuration, 2);\\n        var maxValue = $bm_mul(fThrough, midDuration);\\n        var cycvarime = fThroughTime;\\n        var numEndCycles = 1;\\n        while (cycvarime > cycleDuration) {\\n            cycvarime = $bm_sub(cycvarime, cycleDuration);\\n            cycleDuration = $bm_div(cycleDuration, cycleDamp);\\n            cycleDuration = Math.round(timeToFrames(cycleDuration));\\n            if (cycleDuration < 2) {\\n                cycleDuration = 2;\\n                numEndCycles++;\\n            }\\n            cycleDuration = framesToTime(cycleDuration);\\n            midDuration = $bm_div(cycleDuration, 2);\\n            maxValue = $bm_div($bm_mul(fThrough, midDuration), damp);\\n            if (numEndCycles > 100 / damping && maxValue < threshold)\\n                return zeroValue;\\n        }\\n        if (cycvarime < midDuration)\\n            fThrough = bezierInterpolation(cycvarime, 0, midDuration, 0, maxValue, [\\n                0,\\n                0.1,\\n                slowIn,\\n                1\\n            ]);\\n        else\\n            fThrough = bezierInterpolation(cycvarime, midDuration, cycleDuration, maxValue, 0, [\\n                $bm_sub(1, slowIn),\\n                0,\\n                1,\\n                0.9\\n            ]);\\n    } else {\\n        var damp = Math.exp($bm_mul(fThroughTime, damping));\\n        var sinus = $bm_mul($bm_mul($bm_mul(elasticity, fThroughTime), 2), Math.PI);\\n        sinus = Math.sin(sinus);\\n        sinus = $bm_mul($bm_div(0.3, elasticity), sinus);\\n        sinus = $bm_div(sinus, damp);\\n        if (Math.abs(sinus) < $bm_div(threshold, 100))\\n            return 0;\\n        fThrough = $bm_mul(fThrough, sinus);\\n        if (threshold > 0) {\\n            fThrough = $bm_mul(fThrough, $bm_sub(1, $bm_div(propSpeed, threshold)));\\n        }\\n    }\\n    if (bounce) {\\n        var prevValue = valueAtTime($bm_sub(fThroughStart, thisComp.frameDuration));\\n        var startValue = valueAtTime(fThroughStart);\\n        if ($bm_isInstanceOfArray(value)) {\\n            for (var i = 0; i < prevValue.length; i++) {\\n                if (prevValue[i] > startValue[i])\\n                    fThrough[i] = Math.abs(fThrough[i]);\\n                if (prevValue[i] < startValue[i])\\n                    fThrough[i] = $bm_neg(Math.abs(fThrough[i]));\\n            }\\n        } else {\\n            if (prevValue > startValue)\\n                fThrough = Math.abs(fThrough);\\n            if (prevValue < startValue)\\n                fThrough = $bm_neg(Math.abs(fThrough));\\n        }\\n    }\\n    if (simulate) {\\n        if (!isThisPosition) {\\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer));\\n            fThrough = $bm_sub(thisLayer.fromWorld(fThrough), thisLayer.anchorPoint);\\n        } else if (thisLayer.hasParent) {\\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer.parent));\\n            fThrough = $bm_sub(thisLayer.parent.fromWorld(fThrough), thisLayer.parent.anchorPoint);\\n        }\\n    }\\n    return fThrough;\\n}\\nfunction followThrough() {\\n    var propSpeed = length(velocity);\\n    if (propSpeed < threshold)\\n        return followThroughAtTime($bm_sub(time, overlapDuration));\\n    var fThrough = zeroValue;\\n    var t = time;\\n    while (t > 0) {\\n        t = $bm_sub(t, thisComp.frameDuration);\\n        if (simulate)\\n            propSpeed = getPropWorldSpeed($bm_sub(t, overlapDuration), thisProperty);\\n        else\\n            propSpeed = length(velocityAtTime(t));\\n        if (propSpeed < threshold) {\\n            fThrough = followThroughAtTime($bm_sub(t, overlapDuration));\\n            break;\\n        }\\n    }\\n    return linear(time, t, $bm_sum(t, $bm_mul(anticipationDuration, 2)), fThrough, zeroValue);\\n}\\nfunction smartSmooth(axis) {\\n    var startKey = nearestKey(time);\\n    var endKey = startKey;\\n    if (time == startKey.time)\\n        return 0;\\n    if (time < startKey.time && startKey.index == 1)\\n        return 0;\\n    if (time > startKey.time && startKey.index == numKeys)\\n        return 0;\\n    if (time < startKey.time)\\n        startKey = key($bm_sub(startKey.index, 1));\\n    if (time > startKey.time)\\n        endKey = key($bm_sum(startKey.index, 1));\\n    var sI = 0.66;\\n    var sO = 0.33;\\n    var sIV = 1;\\n    var sOV = 0;\\n    var sVal = startKey.value;\\n    var eVal = endKey.value;\\n    if ($bm_isInstanceOfArray(value)) {\\n        sVal = sVal[axis];\\n        eVal = eVal[axis];\\n    }\\n    var sTime = startKey.time;\\n    var eTime = endKey.time;\\n    if (isKeyTop(startKey, axis))\\n        sO = slowOut;\\n    else {\\n        var prevKey = key($bm_sub(startKey.index, 1));\\n        var pVal = prevKey.value;\\n        if ($bm_isInstanceOfArray(value))\\n            pVal = pVal[axis];\\n        sOV = $bm_div($bm_sub(sVal, pVal), $bm_sub(eVal, pVal));\\n    }\\n    if (isKeyTop(endKey, axis)) {\\n        sI = slowIn;\\n        if (endKey.index != numKeys) {\\n            var nextKey = key($bm_sum(endKey.index, 1));\\n            var nVal = nextKey.value;\\n            if ($bm_isInstanceOfArray(value))\\n                nVal = nVal[axis];\\n            if (Math.abs(nVal - eVal) < 0.01 && doFollowThrough)\\n                sI = 1;\\n        }\\n    } else {\\n        var nextKey = key($bm_sum(endKey.index, 1));\\n        var nVal = nextKey.value;\\n        if ($bm_isInstanceOfArray(value))\\n            nVal = nVal[axis];\\n        sIV = $bm_div($bm_sub(eVal, sVal), $bm_sub(nVal, sVal));\\n    }\\n    if (endKey.index == numKeys && doFollowThrough) {\\n        sI = 1;\\n    }\\n    var val = value;\\n    if ($bm_isInstanceOfArray(value))\\n        val = val[axis];\\n    return $bm_sub(bezierInterpolation(time, sTime, eTime, sVal, eVal, [\\n        sO,\\n        sOV,\\n        sI,\\n        sIV\\n    ]), val);\\n}\\nfunction overlap() {\\n    var ol = zeroValue;\\n    if (isThisPosition && !hasParent)\\n        return zeroValue;\\n    ol = $bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisProperty), getPropWorldValue(time, thisProperty));\\n    var motionRatio = $bm_div($bm_div(length(zeroValue, ol), thisLayer.width), 2);\\n    if (isThisPosition) {\\n        var originalDistance = length(valueAtTime(0));\\n        motionRatio = $bm_div(length(zeroValue, ol), thisComp.width);\\n    }\\n    ol = $bm_sum(ol, getPropWorldValue(time, thisProperty));\\n    ol = $bm_sum(ol, $bm_mul($bm_mul($bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisLayer.anchorPoint), ol), motionRatio), flexibility));\\n    ol = thisLayer.fromWorld(ol);\\n    if (!isThisPosition)\\n        ol = $bm_sub(ol, value);\\n    else {\\n        ol = linear(flexibility, 0, 100, $bm_div(ol, 2), 0);\\n        var prevParentWorldPos = getLayerWorldPos($bm_sub(time, overlapDuration), parent);\\n        ol = $bm_sum(ol, $bm_mul($bm_mul($bm_mul(thisLayer.fromWorld(prevParentWorldPos), motionRatio), flexibility), 5));\\n    }\\n    return ol;\\n}\\nvar okToGo = false;\\nif (simulate && fx.enabled)\\n    okToGo = true;\\nelse if (numKeys > 1 && fx.enabled)\\n    okToGo = true;\\nif (okToGo) {\\n    var smartSmoothResult = zeroValue;\\n    if (doInterpolation) {\\n        if ($bm_isInstanceOfArray(value)) {\\n            if (value.length == 2)\\n                smartSmoothResult = [\\n                    smartSmooth(0),\\n                    smartSmooth(1)\\n                ];\\n            else if (value.length == 3)\\n                smartSmoothResult = [\\n                    smartSmooth(0),\\n                    smartSmooth(1),\\n                    smartSmooth(2)\\n                ];\\n            else if (value.length == 4)\\n                smartSmoothResult = [\\n                    smartSmooth(0),\\n                    smartSmooth(1),\\n                    smartSmooth(2),\\n                    smartSmooth(3)\\n                ];\\n        } else {\\n            smartSmoothResult = smartSmooth(0);\\n        }\\n    }\\n    if (doAnticipation)\\n        result = $bm_sum(result, anticipate());\\n    result = $bm_sum(result, smartSmoothResult);\\n    if (doFollowThrough)\\n        result = $bm_sum(result, followThrough());\\n    if (doOverlap)\\n        result = $bm_sum(result, overlap());\\n}\\n$bm_rt = result;"},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":1,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[2.208,1.314],[0.572,-0.665],[0.044,-1.579],[-0.542,-0.709],[-0.138,-0.123],[-2.311,2.745],[-0.265,1.268]],"o":[[-0.656,0.442],[-1.291,1.553],[-0.018,1.029],[0.103,0.159],[1.803,1.657],[0.993,-1.178],[-2.216,-1.327]],"v":[[47.972,-58.885],[46.121,-57.21],[44.088,-52.255],[44.85,-49.609],[45.222,-49.184],[52.704,-51.155],[54.59,-54.923]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.164705887437,0.192156866193,0.203921571374,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":1,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":1,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0.796,-0.948],[0.622,0.572],[-0.796,0.948],[-0.625,-0.575]],"o":[[-0.796,0.948],[-0.625,-0.575],[0.796,-0.948],[0.622,0.572]],"v":[[12.169,-72.312],[9.598,-71.632],[9.909,-74.391],[12.483,-75.068]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[1,1,1,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":1,"k":[{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":17,"s":[0,2],"to":[0,-0.333],"ti":[0,0.333]},{"t":22,"s":[0,0]}],"ix":2,"x":"var $bm_rt;\\nvar fx = effect(\'ŝlosilo pli pura 4\');\\nvar doAnticipation = fx(1).value;\\nvar doInterpolation = fx(2).value;\\nvar doFollowThrough = fx(3).value;\\nvar damping = $bm_div(fx(15).value, 10);\\nvar elasticity = $bm_div(fx(13).value, 10);\\nvar bounce = fx(17).value;\\nvar anticipationDuration = fx(5).value;\\nvar anticipationQuantity = $bm_div(fx(6).value, 100);\\nvar slowIn = $bm_div(fx(9).value, 100);\\nvar slowOut = $bm_div(fx(10).value, 100);\\nvar spatialMode = fx(21).value;\\nvar spatialDoInterpolation = fx(20).value;\\nvar moBlurPrecision = fx(32).value;\\nvar elasticityRandom = fx(14).value;\\nvar dampingRandom = fx(16).value;\\nvar softBody = fx(28).value;\\nvar flexibility = $bm_div(fx(29).value, 100);\\nvar doOverlap = fx(23).value;\\nvar overlapDuration = fx(24).value;\\nvar overlapRandom = fx(25).value;\\nvar threshold = $bm_div($bm_div(1, moBlurPrecision), 1000);\\nvar zeroValue;\\nif ($bm_isInstanceOfArray(value)) {\\n    if (value.length == 2)\\n        zeroValue = [\\n            0,\\n            0\\n        ];\\n    else if (value.length == 3)\\n        zeroValue = [\\n            0,\\n            0,\\n            0\\n        ];\\n    else if (value.length == 4)\\n        zeroValue = [\\n            0,\\n            0,\\n            0,\\n            0\\n        ];\\n} else\\n    zeroValue = 0;\\nvar isThisSpatial = isSpatial(thisProperty);\\nvar isThisPosition = thisProperty === $bm_transform.position;\\nvar simulate = false;\\nif (isThisSpatial) {\\n    doInterpolation = doInterpolation && spatialDoInterpolation;\\n    if (isThisPosition && thisProperty.numKeys > 0) {\\n        doOverlap = false;\\n        simulate = false;\\n    } else {\\n        simulate = spatialMode == 2;\\n        doOverlap = overlapDuration != 0 && doOverlap && simulate;\\n    }\\n} else {\\n    doOverlap = false;\\n}\\nif (!doOverlap) {\\n    overlapDuration = 0;\\n}\\nif (simulate && softBody && isThisSpatial && !isThisPosition && (doFollowThrough || doOverlap)) {\\n    var distanceRatio = $bm_div(length(valueAtTime(0), $bm_transform.anchorPoint), $bm_div(thisLayer.width, 2));\\n    distanceRatio = $bm_div($bm_sum(1, $bm_mul(distanceRatio, flexibility)), 2);\\n    if (doFollowThrough) {\\n        elasticity = $bm_div(elasticity, distanceRatio);\\n        damping = $bm_div(damping, distanceRatio);\\n    }\\n    if (doOverlap) {\\n        overlapDuration = $bm_mul(overlapDuration, distanceRatio);\\n    }\\n}\\nseedRandom(0, true);\\nif (doFollowThrough) {\\n    if (elasticityRandom > 0)\\n        elasticity = addNoise(elasticity, elasticityRandom);\\n    if (dampingRandom > 0)\\n        damping = addNoise(damping, dampingRandom);\\n}\\nif (doOverlap) {\\n    if (doOverlap && overlapRandom > 0)\\n        overlapDuration = addNoise(overlapDuration, overlapRandom);\\n}\\nvar result = value;\\nfunction isSpatial(prop) {\\n    if (!(prop.value instanceof Array))\\n        return false;\\n    if (prop.value.length != 2 && prop.value.length != 3)\\n        return false;\\n    try {\\n        if (typeof prop.speed !== \'undefined\')\\n            return true;\\n    } catch (e) {\\n        return false;\\n    }\\n}\\nfunction addNoise(val, quantity) {\\n    var randomValue = random(0.9, 1.1);\\n    var noiseValue = noise($bm_mul(valueAtTime(0), randomValue));\\n    noiseValue = $bm_mul(noiseValue, $bm_div(quantity, 100));\\n    return $bm_mul(val, $bm_sum(noiseValue, 1));\\n}\\nfunction isAfterLastKey() {\\n    if (numKeys == 0)\\n        return false;\\n    var nKey = nearestKey(time);\\n    return nKey.time <= time && nKey.index == numKeys;\\n}\\nfunction isStill(t, threshold) {\\n    var d = $bm_sub(valueAtTime(t), valueAtTime($bm_sum(t, framesToTime(1))));\\n    if ($bm_isInstanceOfArray(d)) {\\n        for (var i = 0; i < d.length; i++) {\\n            d[i] = Math.abs(d[i]);\\n            if (d[i] >= threshold) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    } else {\\n        d = Math.abs(d);\\n        return d < threshold;\\n    }\\n}\\nfunction bezierInterpolation(t, tMin, tMax, value1, value2, bezierPoints) {\\n    if (arguments.length !== 5 && arguments.length !== 6)\\n        return t;\\n    var a = $bm_sub(value2, value1);\\n    var b = $bm_sub(tMax, tMin);\\n    if (b == 0)\\n        return t;\\n    var c = clamp($bm_div($bm_sub(t, tMin), b), 0, 1);\\n    if (!(bezierPoints instanceof Array) || bezierPoints.length !== 4)\\n        bezierPoints = [\\n            0.33,\\n            0,\\n            0.66,\\n            1\\n        ];\\n    return $bm_sum($bm_mul(a, h(c, bezierPoints)), value1);\\n    function h(f, g) {\\n        var x = $bm_mul(3, g[0]);\\n        var j = $bm_sub($bm_mul(3, $bm_sub(g[2], g[0])), x);\\n        var k = $bm_sub($bm_sub(1, x), j);\\n        var l = $bm_mul(3, g[1]);\\n        var m = $bm_sub($bm_mul(3, $bm_sub(g[3], g[1])), l);\\n        var n = $bm_sub($bm_sub(1, l), m);\\n        var d = f;\\n        for (var i = 0; i < 5; i++) {\\n            var z = $bm_sub($bm_mul(d, $bm_sum(x, $bm_mul(d, $bm_sum(j, $bm_mul(d, k))))), f);\\n            if (Math.abs(z) < 0.001)\\n                break;\\n            d = $bm_sub(d, $bm_div(z, $bm_sum(x, $bm_mul(d, $bm_sum($bm_mul(2, j), $bm_mul($bm_mul(3, k), d))))));\\n        }\\n        return $bm_mul(d, $bm_sum(l, $bm_mul(d, $bm_sum(m, $bm_mul(d, n)))));\\n    }\\n}\\nfunction getPropWorldSpeed(t, prop) {\\n    return length(getPropWorldVelocity(t, prop));\\n}\\nfunction getPrevKey(t) {\\n    if (numKeys == 0)\\n        return null;\\n    var nKey = nearestKey(t);\\n    if (nKey.time <= t)\\n        return nKey;\\n    if (nKey.index > 1)\\n        return key($bm_sub(nKey.index, 1));\\n    return null;\\n}\\nfunction getNextKey(t) {\\n    if (numKeys == 0)\\n        return null;\\n    var nKey = nearestKey(t);\\n    if (nKey.time >= t)\\n        return nKey;\\n    if (nKey.index < numKeys)\\n        return key($bm_sum(nKey.index, 1));\\n    return null;\\n}\\nfunction getPropWorldVelocity(t, prop) {\\n    return $bm_mul($bm_sub(getPropWorldValue($bm_sum(t, 0.005), prop), getPropWorldValue($bm_sub(t, 0.005), prop)), 100);\\n}\\nfunction getLayerWorldPos(t, l) {\\n    return l.toWorld(l.anchorPoint, t);\\n}\\nfunction getPropWorldValue(t, prop) {\\n    if (isPosition(prop))\\n        return getLayerWorldPos(t, thisLayer);\\n    return thisLayer.toWorld(prop.valueAtTime(t), t);\\n}\\nfunction isPosition(prop) {\\n    return prop === $bm_transform.position;\\n}\\nfunction isKeyTop(k, axis) {\\n    var prevSpeed = velocityAtTime($bm_sub(k.time, threshold));\\n    var nextSpeed = velocityAtTime($bm_sum(k.time, threshold));\\n    if ($bm_isInstanceOfArray(value)) {\\n        prevSpeed = prevSpeed[axis];\\n        nextSpeed = nextSpeed[axis];\\n    }\\n    if (Math.abs(prevSpeed) < 0.01 || Math.abs(nextSpeed) < 0.01)\\n        return true;\\n    return $bm_mul(prevSpeed, nextSpeed) < 0;\\n}\\nfunction anticipate() {\\n    var anticipation = zeroValue;\\n    if (isAfterLastKey())\\n        return anticipation;\\n    if (numKeys < 2)\\n        return anticipation;\\n    var nextKey = getNextKey(time);\\n    var aKey = nextKey;\\n    if (!isStill(aKey.time - 0.1, 0.1)) {\\n        aKey = getPrevKey(time);\\n        if (!isStill(aKey.time - 0.1, 0.1))\\n            return anticipation;\\n    }\\n    if (aKey.index == numKeys)\\n        return anticipation;\\n    var anticipationMiddle = aKey.time;\\n    var anticipationStart = $bm_sub(anticipationMiddle, anticipationDuration);\\n    var anticipationEnd = key(aKey.index + 1).time;\\n    var startValue = anticipation;\\n    var midValue = $bm_mul($bm_sum($bm_neg(valueAtTime($bm_sum(anticipationMiddle, anticipationDuration))), aKey.value), anticipationQuantity);\\n    var endValue = anticipation;\\n    if (time < anticipationStart) {\\n        return anticipation;\\n    } else if (time < anticipationMiddle) {\\n        if ($bm_isInstanceOfArray(value)) {\\n            for (var i = 0; i < value.length; i++) {\\n                anticipation[i] = bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue[i], midValue[i], [\\n                    slowOut,\\n                    0,\\n                    slowIn,\\n                    1\\n                ]);\\n            }\\n            return anticipation;\\n        } else {\\n            return bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue, midValue, [\\n                slowOut,\\n                0,\\n                slowIn,\\n                1\\n            ]);\\n        }\\n    } else if (time <= anticipationEnd) {\\n        if ($bm_isInstanceOfArray(value)) {\\n            for (var i = 0; i < value.length; i++) {\\n                anticipation[i] = bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue[i], endValue[i], [\\n                    slowOut,\\n                    0,\\n                    slowIn,\\n                    1\\n                ]);\\n            }\\n            return anticipation;\\n        } else {\\n            return bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue, endValue, [\\n                slowOut,\\n                0,\\n                slowIn,\\n                1\\n            ]);\\n        }\\n    } else {\\n        return anticipation;\\n    }\\n}\\nfunction followThroughAtTime(t) {\\n    var fThrough = zeroValue;\\n    if (elasticity == 0)\\n        return fThrough;\\n    var propSpeed;\\n    if (!simulate) {\\n        if (numKeys < 2)\\n            return fThrough;\\n        if (nearestKey(t).index == 1)\\n            return fThrough;\\n        propSpeed = length(velocityAtTime(t));\\n        if (propSpeed >= threshold)\\n            return fThrough;\\n    } else {\\n        propSpeed = getPropWorldSpeed(t, thisProperty);\\n        if (propSpeed >= threshold)\\n            return fThrough;\\n    }\\n    var fThroughStart = 0;\\n    var fThroughTime = 0;\\n    if (simulate) {\\n        var speedI = getPropWorldSpeed(t, thisProperty);\\n        var i = t;\\n        while (speedI < threshold && i > 0) {\\n            i = $bm_sub(i, $bm_div(thisComp.frameDuration, moBlurPrecision));\\n            speedI = getPropWorldSpeed(i, thisProperty);\\n        }\\n        fThroughStart = i;\\n    } else {\\n        var fThroughKey = getPrevKey(t);\\n        fThroughStart = fThroughKey.time;\\n    }\\n    if (fThroughStart == 0)\\n        return fThrough;\\n    fThroughTime = $bm_sub(t, fThroughStart);\\n    if (simulate)\\n        fThrough = $bm_div(getPropWorldVelocity($bm_sub(fThroughStart, thisComp.frameDuration), thisProperty), 2);\\n    else\\n        fThrough = $bm_div(velocityAtTime($bm_sub(fThroughStart, thisComp.frameDuration)), 2);\\n    if (bounce) {\\n        var cycleDamp = Math.exp($bm_mul($bm_mul(fThroughTime, damping), 0.1));\\n        var damp = $bm_div(Math.exp($bm_mul(fThroughTime, damping)), $bm_div(elasticity, 2));\\n        var cycleDuration = $bm_div(1, $bm_mul(elasticity, 2));\\n        cycleDuration = Math.round(timeToFrames(cycleDuration));\\n        cycleDuration = framesToTime(cycleDuration);\\n        var midDuration = $bm_div(cycleDuration, 2);\\n        var maxValue = $bm_mul(fThrough, midDuration);\\n        var cycvarime = fThroughTime;\\n        var numEndCycles = 1;\\n        while (cycvarime > cycleDuration) {\\n            cycvarime = $bm_sub(cycvarime, cycleDuration);\\n            cycleDuration = $bm_div(cycleDuration, cycleDamp);\\n            cycleDuration = Math.round(timeToFrames(cycleDuration));\\n            if (cycleDuration < 2) {\\n                cycleDuration = 2;\\n                numEndCycles++;\\n            }\\n            cycleDuration = framesToTime(cycleDuration);\\n            midDuration = $bm_div(cycleDuration, 2);\\n            maxValue = $bm_div($bm_mul(fThrough, midDuration), damp);\\n            if (numEndCycles > 100 / damping && maxValue < threshold)\\n                return zeroValue;\\n        }\\n        if (cycvarime < midDuration)\\n            fThrough = bezierInterpolation(cycvarime, 0, midDuration, 0, maxValue, [\\n                0,\\n                0.1,\\n                slowIn,\\n                1\\n            ]);\\n        else\\n            fThrough = bezierInterpolation(cycvarime, midDuration, cycleDuration, maxValue, 0, [\\n                $bm_sub(1, slowIn),\\n                0,\\n                1,\\n                0.9\\n            ]);\\n    } else {\\n        var damp = Math.exp($bm_mul(fThroughTime, damping));\\n        var sinus = $bm_mul($bm_mul($bm_mul(elasticity, fThroughTime), 2), Math.PI);\\n        sinus = Math.sin(sinus);\\n        sinus = $bm_mul($bm_div(0.3, elasticity), sinus);\\n        sinus = $bm_div(sinus, damp);\\n        if (Math.abs(sinus) < $bm_div(threshold, 100))\\n            return 0;\\n        fThrough = $bm_mul(fThrough, sinus);\\n        if (threshold > 0) {\\n            fThrough = $bm_mul(fThrough, $bm_sub(1, $bm_div(propSpeed, threshold)));\\n        }\\n    }\\n    if (bounce) {\\n        var prevValue = valueAtTime($bm_sub(fThroughStart, thisComp.frameDuration));\\n        var startValue = valueAtTime(fThroughStart);\\n        if ($bm_isInstanceOfArray(value)) {\\n            for (var i = 0; i < prevValue.length; i++) {\\n                if (prevValue[i] > startValue[i])\\n                    fThrough[i] = Math.abs(fThrough[i]);\\n                if (prevValue[i] < startValue[i])\\n                    fThrough[i] = $bm_neg(Math.abs(fThrough[i]));\\n            }\\n        } else {\\n            if (prevValue > startValue)\\n                fThrough = Math.abs(fThrough);\\n            if (prevValue < startValue)\\n                fThrough = $bm_neg(Math.abs(fThrough));\\n        }\\n    }\\n    if (simulate) {\\n        if (!isThisPosition) {\\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer));\\n            fThrough = $bm_sub(thisLayer.fromWorld(fThrough), thisLayer.anchorPoint);\\n        } else if (thisLayer.hasParent) {\\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer.parent));\\n            fThrough = $bm_sub(thisLayer.parent.fromWorld(fThrough), thisLayer.parent.anchorPoint);\\n        }\\n    }\\n    return fThrough;\\n}\\nfunction followThrough() {\\n    var propSpeed = length(velocity);\\n    if (propSpeed < threshold)\\n        return followThroughAtTime($bm_sub(time, overlapDuration));\\n    var fThrough = zeroValue;\\n    var t = time;\\n    while (t > 0) {\\n        t = $bm_sub(t, thisComp.frameDuration);\\n        if (simulate)\\n            propSpeed = getPropWorldSpeed($bm_sub(t, overlapDuration), thisProperty);\\n        else\\n            propSpeed = length(velocityAtTime(t));\\n        if (propSpeed < threshold) {\\n            fThrough = followThroughAtTime($bm_sub(t, overlapDuration));\\n            break;\\n        }\\n    }\\n    return linear(time, t, $bm_sum(t, $bm_mul(anticipationDuration, 2)), fThrough, zeroValue);\\n}\\nfunction smartSmooth(axis) {\\n    var startKey = nearestKey(time);\\n    var endKey = startKey;\\n    if (time == startKey.time)\\n        return 0;\\n    if (time < startKey.time && startKey.index == 1)\\n        return 0;\\n    if (time > startKey.time && startKey.index == numKeys)\\n        return 0;\\n    if (time < startKey.time)\\n        startKey = key($bm_sub(startKey.index, 1));\\n    if (time > startKey.time)\\n        endKey = key($bm_sum(startKey.index, 1));\\n    var sI = 0.66;\\n    var sO = 0.33;\\n    var sIV = 1;\\n    var sOV = 0;\\n    var sVal = startKey.value;\\n    var eVal = endKey.value;\\n    if ($bm_isInstanceOfArray(value)) {\\n        sVal = sVal[axis];\\n        eVal = eVal[axis];\\n    }\\n    var sTime = startKey.time;\\n    var eTime = endKey.time;\\n    if (isKeyTop(startKey, axis))\\n        sO = slowOut;\\n    else {\\n        var prevKey = key($bm_sub(startKey.index, 1));\\n        var pVal = prevKey.value;\\n        if ($bm_isInstanceOfArray(value))\\n            pVal = pVal[axis];\\n        sOV = $bm_div($bm_sub(sVal, pVal), $bm_sub(eVal, pVal));\\n    }\\n    if (isKeyTop(endKey, axis)) {\\n        sI = slowIn;\\n        if (endKey.index != numKeys) {\\n            var nextKey = key($bm_sum(endKey.index, 1));\\n            var nVal = nextKey.value;\\n            if ($bm_isInstanceOfArray(value))\\n                nVal = nVal[axis];\\n            if (Math.abs(nVal - eVal) < 0.01 && doFollowThrough)\\n                sI = 1;\\n        }\\n    } else {\\n        var nextKey = key($bm_sum(endKey.index, 1));\\n        var nVal = nextKey.value;\\n        if ($bm_isInstanceOfArray(value))\\n            nVal = nVal[axis];\\n        sIV = $bm_div($bm_sub(eVal, sVal), $bm_sub(nVal, sVal));\\n    }\\n    if (endKey.index == numKeys && doFollowThrough) {\\n        sI = 1;\\n    }\\n    var val = value;\\n    if ($bm_isInstanceOfArray(value))\\n        val = val[axis];\\n    return $bm_sub(bezierInterpolation(time, sTime, eTime, sVal, eVal, [\\n        sO,\\n        sOV,\\n        sI,\\n        sIV\\n    ]), val);\\n}\\nfunction overlap() {\\n    var ol = zeroValue;\\n    if (isThisPosition && !hasParent)\\n        return zeroValue;\\n    ol = $bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisProperty), getPropWorldValue(time, thisProperty));\\n    var motionRatio = $bm_div($bm_div(length(zeroValue, ol), thisLayer.width), 2);\\n    if (isThisPosition) {\\n        var originalDistance = length(valueAtTime(0));\\n        motionRatio = $bm_div(length(zeroValue, ol), thisComp.width);\\n    }\\n    ol = $bm_sum(ol, getPropWorldValue(time, thisProperty));\\n    ol = $bm_sum(ol, $bm_mul($bm_mul($bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisLayer.anchorPoint), ol), motionRatio), flexibility));\\n    ol = thisLayer.fromWorld(ol);\\n    if (!isThisPosition)\\n        ol = $bm_sub(ol, value);\\n    else {\\n        ol = linear(flexibility, 0, 100, $bm_div(ol, 2), 0);\\n        var prevParentWorldPos = getLayerWorldPos($bm_sub(time, overlapDuration), parent);\\n        ol = $bm_sum(ol, $bm_mul($bm_mul($bm_mul(thisLayer.fromWorld(prevParentWorldPos), motionRatio), flexibility), 5));\\n    }\\n    return ol;\\n}\\nvar okToGo = false;\\nif (simulate && fx.enabled)\\n    okToGo = true;\\nelse if (numKeys > 1 && fx.enabled)\\n    okToGo = true;\\nif (okToGo) {\\n    var smartSmoothResult = zeroValue;\\n    if (doInterpolation) {\\n        if ($bm_isInstanceOfArray(value)) {\\n            if (value.length == 2)\\n                smartSmoothResult = [\\n                    smartSmooth(0),\\n                    smartSmooth(1)\\n                ];\\n            else if (value.length == 3)\\n                smartSmoothResult = [\\n                    smartSmooth(0),\\n                    smartSmooth(1),\\n                    smartSmooth(2)\\n                ];\\n            else if (value.length == 4)\\n                smartSmoothResult = [\\n                    smartSmooth(0),\\n                    smartSmooth(1),\\n                    smartSmooth(2),\\n                    smartSmooth(3)\\n                ];\\n        } else {\\n            smartSmoothResult = smartSmooth(0);\\n        }\\n    }\\n    if (doAnticipation)\\n        result = $bm_sum(result, anticipate());\\n    result = $bm_sum(result, smartSmoothResult);\\n    if (doFollowThrough)\\n        result = $bm_sum(result, followThrough());\\n    if (doOverlap)\\n        result = $bm_sum(result, overlap());\\n}\\n$bm_rt = result;"},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":1,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[2.208,1.314],[0.572,-0.665],[0.044,-1.579],[-0.542,-0.709],[-0.138,-0.123],[-2.311,2.745],[-0.265,1.268]],"o":[[-0.656,0.442],[-1.291,1.553],[-0.018,1.029],[0.103,0.159],[1.803,1.657],[0.993,-1.178],[-2.216,-1.327]],"v":[[11.35,-78.462],[9.499,-76.787],[7.465,-71.832],[8.228,-69.187],[8.6,-68.761],[16.082,-70.733],[17.968,-74.5]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.164705887437,0.192156866193,0.203921571374,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":1,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":1,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":1,"k":[{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":17,"s":[33.25,-61.25],"to":[-0.333,-0.167],"ti":[0.333,0.167]},{"t":22,"s":[31.25,-62.25]}],"ix":2,"x":"var $bm_rt;\\nvar fx = effect(\'ŝlosilo pli pura 4\');\\nvar doAnticipation = fx(1).value;\\nvar doInterpolation = fx(2).value;\\nvar doFollowThrough = fx(3).value;\\nvar damping = $bm_div(fx(15).value, 10);\\nvar elasticity = $bm_div(fx(13).value, 10);\\nvar bounce = fx(17).value;\\nvar anticipationDuration = fx(5).value;\\nvar anticipationQuantity = $bm_div(fx(6).value, 100);\\nvar slowIn = $bm_div(fx(9).value, 100);\\nvar slowOut = $bm_div(fx(10).value, 100);\\nvar spatialMode = fx(21).value;\\nvar spatialDoInterpolation = fx(20).value;\\nvar moBlurPrecision = fx(32).value;\\nvar elasticityRandom = fx(14).value;\\nvar dampingRandom = fx(16).value;\\nvar softBody = fx(28).value;\\nvar flexibility = $bm_div(fx(29).value, 100);\\nvar doOverlap = fx(23).value;\\nvar overlapDuration = fx(24).value;\\nvar overlapRandom = fx(25).value;\\nvar threshold = $bm_div($bm_div(1, moBlurPrecision), 1000);\\nvar zeroValue;\\nif ($bm_isInstanceOfArray(value)) {\\n    if (value.length == 2)\\n        zeroValue = [\\n            0,\\n            0\\n        ];\\n    else if (value.length == 3)\\n        zeroValue = [\\n            0,\\n            0,\\n            0\\n        ];\\n    else if (value.length == 4)\\n        zeroValue = [\\n            0,\\n            0,\\n            0,\\n            0\\n        ];\\n} else\\n    zeroValue = 0;\\nvar isThisSpatial = isSpatial(thisProperty);\\nvar isThisPosition = thisProperty === $bm_transform.position;\\nvar simulate = false;\\nif (isThisSpatial) {\\n    doInterpolation = doInterpolation && spatialDoInterpolation;\\n    if (isThisPosition && thisProperty.numKeys > 0) {\\n        doOverlap = false;\\n        simulate = false;\\n    } else {\\n        simulate = spatialMode == 2;\\n        doOverlap = overlapDuration != 0 && doOverlap && simulate;\\n    }\\n} else {\\n    doOverlap = false;\\n}\\nif (!doOverlap) {\\n    overlapDuration = 0;\\n}\\nif (simulate && softBody && isThisSpatial && !isThisPosition && (doFollowThrough || doOverlap)) {\\n    var distanceRatio = $bm_div(length(valueAtTime(0), $bm_transform.anchorPoint), $bm_div(thisLayer.width, 2));\\n    distanceRatio = $bm_div($bm_sum(1, $bm_mul(distanceRatio, flexibility)), 2);\\n    if (doFollowThrough) {\\n        elasticity = $bm_div(elasticity, distanceRatio);\\n        damping = $bm_div(damping, distanceRatio);\\n    }\\n    if (doOverlap) {\\n        overlapDuration = $bm_mul(overlapDuration, distanceRatio);\\n    }\\n}\\nseedRandom(0, true);\\nif (doFollowThrough) {\\n    if (elasticityRandom > 0)\\n        elasticity = addNoise(elasticity, elasticityRandom);\\n    if (dampingRandom > 0)\\n        damping = addNoise(damping, dampingRandom);\\n}\\nif (doOverlap) {\\n    if (doOverlap && overlapRandom > 0)\\n        overlapDuration = addNoise(overlapDuration, overlapRandom);\\n}\\nvar result = value;\\nfunction isSpatial(prop) {\\n    if (!(prop.value instanceof Array))\\n        return false;\\n    if (prop.value.length != 2 && prop.value.length != 3)\\n        return false;\\n    try {\\n        if (typeof prop.speed !== \'undefined\')\\n            return true;\\n    } catch (e) {\\n        return false;\\n    }\\n}\\nfunction addNoise(val, quantity) {\\n    var randomValue = random(0.9, 1.1);\\n    var noiseValue = noise($bm_mul(valueAtTime(0), randomValue));\\n    noiseValue = $bm_mul(noiseValue, $bm_div(quantity, 100));\\n    return $bm_mul(val, $bm_sum(noiseValue, 1));\\n}\\nfunction isAfterLastKey() {\\n    if (numKeys == 0)\\n        return false;\\n    var nKey = nearestKey(time);\\n    return nKey.time <= time && nKey.index == numKeys;\\n}\\nfunction isStill(t, threshold) {\\n    var d = $bm_sub(valueAtTime(t), valueAtTime($bm_sum(t, framesToTime(1))));\\n    if ($bm_isInstanceOfArray(d)) {\\n        for (var i = 0; i < d.length; i++) {\\n            d[i] = Math.abs(d[i]);\\n            if (d[i] >= threshold) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    } else {\\n        d = Math.abs(d);\\n        return d < threshold;\\n    }\\n}\\nfunction bezierInterpolation(t, tMin, tMax, value1, value2, bezierPoints) {\\n    if (arguments.length !== 5 && arguments.length !== 6)\\n        return t;\\n    var a = $bm_sub(value2, value1);\\n    var b = $bm_sub(tMax, tMin);\\n    if (b == 0)\\n        return t;\\n    var c = clamp($bm_div($bm_sub(t, tMin), b), 0, 1);\\n    if (!(bezierPoints instanceof Array) || bezierPoints.length !== 4)\\n        bezierPoints = [\\n            0.33,\\n            0,\\n            0.66,\\n            1\\n        ];\\n    return $bm_sum($bm_mul(a, h(c, bezierPoints)), value1);\\n    function h(f, g) {\\n        var x = $bm_mul(3, g[0]);\\n        var j = $bm_sub($bm_mul(3, $bm_sub(g[2], g[0])), x);\\n        var k = $bm_sub($bm_sub(1, x), j);\\n        var l = $bm_mul(3, g[1]);\\n        var m = $bm_sub($bm_mul(3, $bm_sub(g[3], g[1])), l);\\n        var n = $bm_sub($bm_sub(1, l), m);\\n        var d = f;\\n        for (var i = 0; i < 5; i++) {\\n            var z = $bm_sub($bm_mul(d, $bm_sum(x, $bm_mul(d, $bm_sum(j, $bm_mul(d, k))))), f);\\n            if (Math.abs(z) < 0.001)\\n                break;\\n            d = $bm_sub(d, $bm_div(z, $bm_sum(x, $bm_mul(d, $bm_sum($bm_mul(2, j), $bm_mul($bm_mul(3, k), d))))));\\n        }\\n        return $bm_mul(d, $bm_sum(l, $bm_mul(d, $bm_sum(m, $bm_mul(d, n)))));\\n    }\\n}\\nfunction getPropWorldSpeed(t, prop) {\\n    return length(getPropWorldVelocity(t, prop));\\n}\\nfunction getPrevKey(t) {\\n    if (numKeys == 0)\\n        return null;\\n    var nKey = nearestKey(t);\\n    if (nKey.time <= t)\\n        return nKey;\\n    if (nKey.index > 1)\\n        return key($bm_sub(nKey.index, 1));\\n    return null;\\n}\\nfunction getNextKey(t) {\\n    if (numKeys == 0)\\n        return null;\\n    var nKey = nearestKey(t);\\n    if (nKey.time >= t)\\n        return nKey;\\n    if (nKey.index < numKeys)\\n        return key($bm_sum(nKey.index, 1));\\n    return null;\\n}\\nfunction getPropWorldVelocity(t, prop) {\\n    return $bm_mul($bm_sub(getPropWorldValue($bm_sum(t, 0.005), prop), getPropWorldValue($bm_sub(t, 0.005), prop)), 100);\\n}\\nfunction getLayerWorldPos(t, l) {\\n    return l.toWorld(l.anchorPoint, t);\\n}\\nfunction getPropWorldValue(t, prop) {\\n    if (isPosition(prop))\\n        return getLayerWorldPos(t, thisLayer);\\n    return thisLayer.toWorld(prop.valueAtTime(t), t);\\n}\\nfunction isPosition(prop) {\\n    return prop === $bm_transform.position;\\n}\\nfunction isKeyTop(k, axis) {\\n    var prevSpeed = velocityAtTime($bm_sub(k.time, threshold));\\n    var nextSpeed = velocityAtTime($bm_sum(k.time, threshold));\\n    if ($bm_isInstanceOfArray(value)) {\\n        prevSpeed = prevSpeed[axis];\\n        nextSpeed = nextSpeed[axis];\\n    }\\n    if (Math.abs(prevSpeed) < 0.01 || Math.abs(nextSpeed) < 0.01)\\n        return true;\\n    return $bm_mul(prevSpeed, nextSpeed) < 0;\\n}\\nfunction anticipate() {\\n    var anticipation = zeroValue;\\n    if (isAfterLastKey())\\n        return anticipation;\\n    if (numKeys < 2)\\n        return anticipation;\\n    var nextKey = getNextKey(time);\\n    var aKey = nextKey;\\n    if (!isStill(aKey.time - 0.1, 0.1)) {\\n        aKey = getPrevKey(time);\\n        if (!isStill(aKey.time - 0.1, 0.1))\\n            return anticipation;\\n    }\\n    if (aKey.index == numKeys)\\n        return anticipation;\\n    var anticipationMiddle = aKey.time;\\n    var anticipationStart = $bm_sub(anticipationMiddle, anticipationDuration);\\n    var anticipationEnd = key(aKey.index + 1).time;\\n    var startValue = anticipation;\\n    var midValue = $bm_mul($bm_sum($bm_neg(valueAtTime($bm_sum(anticipationMiddle, anticipationDuration))), aKey.value), anticipationQuantity);\\n    var endValue = anticipation;\\n    if (time < anticipationStart) {\\n        return anticipation;\\n    } else if (time < anticipationMiddle) {\\n        if ($bm_isInstanceOfArray(value)) {\\n            for (var i = 0; i < value.length; i++) {\\n                anticipation[i] = bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue[i], midValue[i], [\\n                    slowOut,\\n                    0,\\n                    slowIn,\\n                    1\\n                ]);\\n            }\\n            return anticipation;\\n        } else {\\n            return bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue, midValue, [\\n                slowOut,\\n                0,\\n                slowIn,\\n                1\\n            ]);\\n        }\\n    } else if (time <= anticipationEnd) {\\n        if ($bm_isInstanceOfArray(value)) {\\n            for (var i = 0; i < value.length; i++) {\\n                anticipation[i] = bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue[i], endValue[i], [\\n                    slowOut,\\n                    0,\\n                    slowIn,\\n                    1\\n                ]);\\n            }\\n            return anticipation;\\n        } else {\\n            return bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue, endValue, [\\n                slowOut,\\n                0,\\n                slowIn,\\n                1\\n            ]);\\n        }\\n    } else {\\n        return anticipation;\\n    }\\n}\\nfunction followThroughAtTime(t) {\\n    var fThrough = zeroValue;\\n    if (elasticity == 0)\\n        return fThrough;\\n    var propSpeed;\\n    if (!simulate) {\\n        if (numKeys < 2)\\n            return fThrough;\\n        if (nearestKey(t).index == 1)\\n            return fThrough;\\n        propSpeed = length(velocityAtTime(t));\\n        if (propSpeed >= threshold)\\n            return fThrough;\\n    } else {\\n        propSpeed = getPropWorldSpeed(t, thisProperty);\\n        if (propSpeed >= threshold)\\n            return fThrough;\\n    }\\n    var fThroughStart = 0;\\n    var fThroughTime = 0;\\n    if (simulate) {\\n        var speedI = getPropWorldSpeed(t, thisProperty);\\n        var i = t;\\n        while (speedI < threshold && i > 0) {\\n            i = $bm_sub(i, $bm_div(thisComp.frameDuration, moBlurPrecision));\\n            speedI = getPropWorldSpeed(i, thisProperty);\\n        }\\n        fThroughStart = i;\\n    } else {\\n        var fThroughKey = getPrevKey(t);\\n        fThroughStart = fThroughKey.time;\\n    }\\n    if (fThroughStart == 0)\\n        return fThrough;\\n    fThroughTime = $bm_sub(t, fThroughStart);\\n    if (simulate)\\n        fThrough = $bm_div(getPropWorldVelocity($bm_sub(fThroughStart, thisComp.frameDuration), thisProperty), 2);\\n    else\\n        fThrough = $bm_div(velocityAtTime($bm_sub(fThroughStart, thisComp.frameDuration)), 2);\\n    if (bounce) {\\n        var cycleDamp = Math.exp($bm_mul($bm_mul(fThroughTime, damping), 0.1));\\n        var damp = $bm_div(Math.exp($bm_mul(fThroughTime, damping)), $bm_div(elasticity, 2));\\n        var cycleDuration = $bm_div(1, $bm_mul(elasticity, 2));\\n        cycleDuration = Math.round(timeToFrames(cycleDuration));\\n        cycleDuration = framesToTime(cycleDuration);\\n        var midDuration = $bm_div(cycleDuration, 2);\\n        var maxValue = $bm_mul(fThrough, midDuration);\\n        var cycvarime = fThroughTime;\\n        var numEndCycles = 1;\\n        while (cycvarime > cycleDuration) {\\n            cycvarime = $bm_sub(cycvarime, cycleDuration);\\n            cycleDuration = $bm_div(cycleDuration, cycleDamp);\\n            cycleDuration = Math.round(timeToFrames(cycleDuration));\\n            if (cycleDuration < 2) {\\n                cycleDuration = 2;\\n                numEndCycles++;\\n            }\\n            cycleDuration = framesToTime(cycleDuration);\\n            midDuration = $bm_div(cycleDuration, 2);\\n            maxValue = $bm_div($bm_mul(fThrough, midDuration), damp);\\n            if (numEndCycles > 100 / damping && maxValue < threshold)\\n                return zeroValue;\\n        }\\n        if (cycvarime < midDuration)\\n            fThrough = bezierInterpolation(cycvarime, 0, midDuration, 0, maxValue, [\\n                0,\\n                0.1,\\n                slowIn,\\n                1\\n            ]);\\n        else\\n            fThrough = bezierInterpolation(cycvarime, midDuration, cycleDuration, maxValue, 0, [\\n                $bm_sub(1, slowIn),\\n                0,\\n                1,\\n                0.9\\n            ]);\\n    } else {\\n        var damp = Math.exp($bm_mul(fThroughTime, damping));\\n        var sinus = $bm_mul($bm_mul($bm_mul(elasticity, fThroughTime), 2), Math.PI);\\n        sinus = Math.sin(sinus);\\n        sinus = $bm_mul($bm_div(0.3, elasticity), sinus);\\n        sinus = $bm_div(sinus, damp);\\n        if (Math.abs(sinus) < $bm_div(threshold, 100))\\n            return 0;\\n        fThrough = $bm_mul(fThrough, sinus);\\n        if (threshold > 0) {\\n            fThrough = $bm_mul(fThrough, $bm_sub(1, $bm_div(propSpeed, threshold)));\\n        }\\n    }\\n    if (bounce) {\\n        var prevValue = valueAtTime($bm_sub(fThroughStart, thisComp.frameDuration));\\n        var startValue = valueAtTime(fThroughStart);\\n        if ($bm_isInstanceOfArray(value)) {\\n            for (var i = 0; i < prevValue.length; i++) {\\n                if (prevValue[i] > startValue[i])\\n                    fThrough[i] = Math.abs(fThrough[i]);\\n                if (prevValue[i] < startValue[i])\\n                    fThrough[i] = $bm_neg(Math.abs(fThrough[i]));\\n            }\\n        } else {\\n            if (prevValue > startValue)\\n                fThrough = Math.abs(fThrough);\\n            if (prevValue < startValue)\\n                fThrough = $bm_neg(Math.abs(fThrough));\\n        }\\n    }\\n    if (simulate) {\\n        if (!isThisPosition) {\\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer));\\n            fThrough = $bm_sub(thisLayer.fromWorld(fThrough), thisLayer.anchorPoint);\\n        } else if (thisLayer.hasParent) {\\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer.parent));\\n            fThrough = $bm_sub(thisLayer.parent.fromWorld(fThrough), thisLayer.parent.anchorPoint);\\n        }\\n    }\\n    return fThrough;\\n}\\nfunction followThrough() {\\n    var propSpeed = length(velocity);\\n    if (propSpeed < threshold)\\n        return followThroughAtTime($bm_sub(time, overlapDuration));\\n    var fThrough = zeroValue;\\n    var t = time;\\n    while (t > 0) {\\n        t = $bm_sub(t, thisComp.frameDuration);\\n        if (simulate)\\n            propSpeed = getPropWorldSpeed($bm_sub(t, overlapDuration), thisProperty);\\n        else\\n            propSpeed = length(velocityAtTime(t));\\n        if (propSpeed < threshold) {\\n            fThrough = followThroughAtTime($bm_sub(t, overlapDuration));\\n            break;\\n        }\\n    }\\n    return linear(time, t, $bm_sum(t, $bm_mul(anticipationDuration, 2)), fThrough, zeroValue);\\n}\\nfunction smartSmooth(axis) {\\n    var startKey = nearestKey(time);\\n    var endKey = startKey;\\n    if (time == startKey.time)\\n        return 0;\\n    if (time < startKey.time && startKey.index == 1)\\n        return 0;\\n    if (time > startKey.time && startKey.index == numKeys)\\n        return 0;\\n    if (time < startKey.time)\\n        startKey = key($bm_sub(startKey.index, 1));\\n    if (time > startKey.time)\\n        endKey = key($bm_sum(startKey.index, 1));\\n    var sI = 0.66;\\n    var sO = 0.33;\\n    var sIV = 1;\\n    var sOV = 0;\\n    var sVal = startKey.value;\\n    var eVal = endKey.value;\\n    if ($bm_isInstanceOfArray(value)) {\\n        sVal = sVal[axis];\\n        eVal = eVal[axis];\\n    }\\n    var sTime = startKey.time;\\n    var eTime = endKey.time;\\n    if (isKeyTop(startKey, axis))\\n        sO = slowOut;\\n    else {\\n        var prevKey = key($bm_sub(startKey.index, 1));\\n        var pVal = prevKey.value;\\n        if ($bm_isInstanceOfArray(value))\\n            pVal = pVal[axis];\\n        sOV = $bm_div($bm_sub(sVal, pVal), $bm_sub(eVal, pVal));\\n    }\\n    if (isKeyTop(endKey, axis)) {\\n        sI = slowIn;\\n        if (endKey.index != numKeys) {\\n            var nextKey = key($bm_sum(endKey.index, 1));\\n            var nVal = nextKey.value;\\n            if ($bm_isInstanceOfArray(value))\\n                nVal = nVal[axis];\\n            if (Math.abs(nVal - eVal) < 0.01 && doFollowThrough)\\n                sI = 1;\\n        }\\n    } else {\\n        var nextKey = key($bm_sum(endKey.index, 1));\\n        var nVal = nextKey.value;\\n        if ($bm_isInstanceOfArray(value))\\n            nVal = nVal[axis];\\n        sIV = $bm_div($bm_sub(eVal, sVal), $bm_sub(nVal, sVal));\\n    }\\n    if (endKey.index == numKeys && doFollowThrough) {\\n        sI = 1;\\n    }\\n    var val = value;\\n    if ($bm_isInstanceOfArray(value))\\n        val = val[axis];\\n    return $bm_sub(bezierInterpolation(time, sTime, eTime, sVal, eVal, [\\n        sO,\\n        sOV,\\n        sI,\\n        sIV\\n    ]), val);\\n}\\nfunction overlap() {\\n    var ol = zeroValue;\\n    if (isThisPosition && !hasParent)\\n        return zeroValue;\\n    ol = $bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisProperty), getPropWorldValue(time, thisProperty));\\n    var motionRatio = $bm_div($bm_div(length(zeroValue, ol), thisLayer.width), 2);\\n    if (isThisPosition) {\\n        var originalDistance = length(valueAtTime(0));\\n        motionRatio = $bm_div(length(zeroValue, ol), thisComp.width);\\n    }\\n    ol = $bm_sum(ol, getPropWorldValue(time, thisProperty));\\n    ol = $bm_sum(ol, $bm_mul($bm_mul($bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisLayer.anchorPoint), ol), motionRatio), flexibility));\\n    ol = thisLayer.fromWorld(ol);\\n    if (!isThisPosition)\\n        ol = $bm_sub(ol, value);\\n    else {\\n        ol = linear(flexibility, 0, 100, $bm_div(ol, 2), 0);\\n        var prevParentWorldPos = getLayerWorldPos($bm_sub(time, overlapDuration), parent);\\n        ol = $bm_sum(ol, $bm_mul($bm_mul($bm_mul(thisLayer.fromWorld(prevParentWorldPos), motionRatio), flexibility), 5));\\n    }\\n    return ol;\\n}\\nvar okToGo = false;\\nif (simulate && fx.enabled)\\n    okToGo = true;\\nelse if (numKeys > 1 && fx.enabled)\\n    okToGo = true;\\nif (okToGo) {\\n    var smartSmoothResult = zeroValue;\\n    if (doInterpolation) {\\n        if ($bm_isInstanceOfArray(value)) {\\n            if (value.length == 2)\\n                smartSmoothResult = [\\n                    smartSmooth(0),\\n                    smartSmooth(1)\\n                ];\\n            else if (value.length == 3)\\n                smartSmoothResult = [\\n                    smartSmooth(0),\\n                    smartSmooth(1),\\n                    smartSmooth(2)\\n                ];\\n            else if (value.length == 4)\\n                smartSmoothResult = [\\n                    smartSmooth(0),\\n                    smartSmooth(1),\\n                    smartSmooth(2),\\n                    smartSmooth(3)\\n                ];\\n        } else {\\n            smartSmoothResult = smartSmooth(0);\\n        }\\n    }\\n    if (doAnticipation)\\n        result = $bm_sum(result, anticipate());\\n    result = $bm_sum(result, smartSmoothResult);\\n    if (doFollowThrough)\\n        result = $bm_sum(result, followThrough());\\n    if (doOverlap)\\n        result = $bm_sum(result, overlap());\\n}\\n$bm_rt = result;"},"a":{"a":0,"k":[31.25,-62.25],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[-3.751,-2.271]],"o":[[3.751,2.271],[5.58,3.319]],"v":[[46.27,-60.072],[57.559,-53.276]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.164705887437,0.192156866193,0.203921571374,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":1.453,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[-3.751,-2.271]],"o":[[3.751,2.271],[5.58,3.319]],"v":[[9.648,-79.649],[20.937,-72.854]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.164705887437,0.192156866193,0.203921571374,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":1.453,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":2,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":2,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":17,"s":[{"i":[[0,0],[1.97,-5.727]],"o":[[11.129,-9.214],[0,0]],"v":[[2.996,-35.161],[14.905,-19.648]],"c":false}]},{"t":22,"s":[{"i":[[0,0],[-6.354,3.334]],"o":[[4.127,5.87],[0,0]],"v":[[5.121,-40.786],[24.28,-36.148]],"c":false}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.164705887437,0.192156866193,0.203921571374,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":1.453,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[14.5,-38.5],"ix":2},"a":{"a":0,"k":[14.5,-38.5],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0.493,0.435],[0.536,0.237],[0.26,-0.009],[-0.293,-0.62],[-1.231,-0.797],[-0.305,0.993],[0.51,0.672]],"o":[[-0.458,-0.405],[-0.238,-0.105],[-1.021,0.034],[0.622,1.318],[0.549,0.355],[0.276,-0.9],[-0.377,-0.496]],"v":[[24.089,-51.047],[22.592,-52.038],[21.84,-52.218],[21.363,-50.39],[24.207,-47.039],[26.365,-46.983],[25.4,-49.616]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[1,1,1,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-0.624,1.547],[0.606,0.913],[4.481,2.027],[0.624,-0.019],[-0.063,-1.527],[-4.863,0.185],[-1.809,0.369]],"o":[[0.274,-0.679],[-2.744,-4.135],[-0.569,-0.258],[-1.902,0.056],[0.143,3.489],[1.84,-0.07],[1.418,-0.289]],"v":[[29.741,-45.64],[29.151,-48.022],[17.736,-57.253],[15.943,-57.737],[13.642,-54.057],[19.499,-42.795],[24.998,-43.343]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.164705887437,0.192156866193,0.203921571374,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":2,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0]],"o":[[0,0]],"v":[[18.769,-70.174]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.164705887437,0.192156866193,0.203921571374,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":1.453,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":2,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0]],"o":[[0,0],[0,0]],"v":[[17.673,-45.232],[11.728,-36.339]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.164705887437,0.192156866193,0.203921571374,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":1.453,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 3","np":2,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":3,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 3","np":2,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":1,"k":[{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":23,"s":[26.75,-57.5],"to":[-0.167,0.25],"ti":[0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":26.334,"s":[25.75,-56],"to":[0,0],"ti":[0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":29.666,"s":[26.75,-57.5],"to":[0,0],"ti":[0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":33,"s":[25.75,-56],"to":[0,0],"ti":[0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":36.334,"s":[26.75,-57.5],"to":[0,0],"ti":[0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":39.666,"s":[25.75,-56],"to":[0,0],"ti":[-0.167,0.25]},{"t":43,"s":[26.75,-57.5]}],"ix":2,"x":"var $bm_rt;\\nvar fx = effect(\'ŝlosilo pli pura 4\');\\nvar doAnticipation = fx(1).value;\\nvar doInterpolation = fx(2).value;\\nvar doFollowThrough = fx(3).value;\\nvar damping = $bm_div(fx(15).value, 10);\\nvar elasticity = $bm_div(fx(13).value, 10);\\nvar bounce = fx(17).value;\\nvar anticipationDuration = fx(5).value;\\nvar anticipationQuantity = $bm_div(fx(6).value, 100);\\nvar slowIn = $bm_div(fx(9).value, 100);\\nvar slowOut = $bm_div(fx(10).value, 100);\\nvar spatialMode = fx(21).value;\\nvar spatialDoInterpolation = fx(20).value;\\nvar moBlurPrecision = fx(32).value;\\nvar elasticityRandom = fx(14).value;\\nvar dampingRandom = fx(16).value;\\nvar softBody = fx(28).value;\\nvar flexibility = $bm_div(fx(29).value, 100);\\nvar doOverlap = fx(23).value;\\nvar overlapDuration = fx(24).value;\\nvar overlapRandom = fx(25).value;\\nvar threshold = $bm_div($bm_div(1, moBlurPrecision), 1000);\\nvar zeroValue;\\nif ($bm_isInstanceOfArray(value)) {\\n    if (value.length == 2)\\n        zeroValue = [\\n            0,\\n            0\\n        ];\\n    else if (value.length == 3)\\n        zeroValue = [\\n            0,\\n            0,\\n            0\\n        ];\\n    else if (value.length == 4)\\n        zeroValue = [\\n            0,\\n            0,\\n            0,\\n            0\\n        ];\\n} else\\n    zeroValue = 0;\\nvar isThisSpatial = isSpatial(thisProperty);\\nvar isThisPosition = thisProperty === $bm_transform.position;\\nvar simulate = false;\\nif (isThisSpatial) {\\n    doInterpolation = doInterpolation && spatialDoInterpolation;\\n    if (isThisPosition && thisProperty.numKeys > 0) {\\n        doOverlap = false;\\n        simulate = false;\\n    } else {\\n        simulate = spatialMode == 2;\\n        doOverlap = overlapDuration != 0 && doOverlap && simulate;\\n    }\\n} else {\\n    doOverlap = false;\\n}\\nif (!doOverlap) {\\n    overlapDuration = 0;\\n}\\nif (simulate && softBody && isThisSpatial && !isThisPosition && (doFollowThrough || doOverlap)) {\\n    var distanceRatio = $bm_div(length(valueAtTime(0), $bm_transform.anchorPoint), $bm_div(thisLayer.width, 2));\\n    distanceRatio = $bm_div($bm_sum(1, $bm_mul(distanceRatio, flexibility)), 2);\\n    if (doFollowThrough) {\\n        elasticity = $bm_div(elasticity, distanceRatio);\\n        damping = $bm_div(damping, distanceRatio);\\n    }\\n    if (doOverlap) {\\n        overlapDuration = $bm_mul(overlapDuration, distanceRatio);\\n    }\\n}\\nseedRandom(0, true);\\nif (doFollowThrough) {\\n    if (elasticityRandom > 0)\\n        elasticity = addNoise(elasticity, elasticityRandom);\\n    if (dampingRandom > 0)\\n        damping = addNoise(damping, dampingRandom);\\n}\\nif (doOverlap) {\\n    if (doOverlap && overlapRandom > 0)\\n        overlapDuration = addNoise(overlapDuration, overlapRandom);\\n}\\nvar result = value;\\nfunction isSpatial(prop) {\\n    if (!(prop.value instanceof Array))\\n        return false;\\n    if (prop.value.length != 2 && prop.value.length != 3)\\n        return false;\\n    try {\\n        if (typeof prop.speed !== \'undefined\')\\n            return true;\\n    } catch (e) {\\n        return false;\\n    }\\n}\\nfunction addNoise(val, quantity) {\\n    var randomValue = random(0.9, 1.1);\\n    var noiseValue = noise($bm_mul(valueAtTime(0), randomValue));\\n    noiseValue = $bm_mul(noiseValue, $bm_div(quantity, 100));\\n    return $bm_mul(val, $bm_sum(noiseValue, 1));\\n}\\nfunction isAfterLastKey() {\\n    if (numKeys == 0)\\n        return false;\\n    var nKey = nearestKey(time);\\n    return nKey.time <= time && nKey.index == numKeys;\\n}\\nfunction isStill(t, threshold) {\\n    var d = $bm_sub(valueAtTime(t), valueAtTime($bm_sum(t, framesToTime(1))));\\n    if ($bm_isInstanceOfArray(d)) {\\n        for (var i = 0; i < d.length; i++) {\\n            d[i] = Math.abs(d[i]);\\n            if (d[i] >= threshold) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    } else {\\n        d = Math.abs(d);\\n        return d < threshold;\\n    }\\n}\\nfunction bezierInterpolation(t, tMin, tMax, value1, value2, bezierPoints) {\\n    if (arguments.length !== 5 && arguments.length !== 6)\\n        return t;\\n    var a = $bm_sub(value2, value1);\\n    var b = $bm_sub(tMax, tMin);\\n    if (b == 0)\\n        return t;\\n    var c = clamp($bm_div($bm_sub(t, tMin), b), 0, 1);\\n    if (!(bezierPoints instanceof Array) || bezierPoints.length !== 4)\\n        bezierPoints = [\\n            0.33,\\n            0,\\n            0.66,\\n            1\\n        ];\\n    return $bm_sum($bm_mul(a, h(c, bezierPoints)), value1);\\n    function h(f, g) {\\n        var x = $bm_mul(3, g[0]);\\n        var j = $bm_sub($bm_mul(3, $bm_sub(g[2], g[0])), x);\\n        var k = $bm_sub($bm_sub(1, x), j);\\n        var l = $bm_mul(3, g[1]);\\n        var m = $bm_sub($bm_mul(3, $bm_sub(g[3], g[1])), l);\\n        var n = $bm_sub($bm_sub(1, l), m);\\n        var d = f;\\n        for (var i = 0; i < 5; i++) {\\n            var z = $bm_sub($bm_mul(d, $bm_sum(x, $bm_mul(d, $bm_sum(j, $bm_mul(d, k))))), f);\\n            if (Math.abs(z) < 0.001)\\n                break;\\n            d = $bm_sub(d, $bm_div(z, $bm_sum(x, $bm_mul(d, $bm_sum($bm_mul(2, j), $bm_mul($bm_mul(3, k), d))))));\\n        }\\n        return $bm_mul(d, $bm_sum(l, $bm_mul(d, $bm_sum(m, $bm_mul(d, n)))));\\n    }\\n}\\nfunction getPropWorldSpeed(t, prop) {\\n    return length(getPropWorldVelocity(t, prop));\\n}\\nfunction getPrevKey(t) {\\n    if (numKeys == 0)\\n        return null;\\n    var nKey = nearestKey(t);\\n    if (nKey.time <= t)\\n        return nKey;\\n    if (nKey.index > 1)\\n        return key($bm_sub(nKey.index, 1));\\n    return null;\\n}\\nfunction getNextKey(t) {\\n    if (numKeys == 0)\\n        return null;\\n    var nKey = nearestKey(t);\\n    if (nKey.time >= t)\\n        return nKey;\\n    if (nKey.index < numKeys)\\n        return key($bm_sum(nKey.index, 1));\\n    return null;\\n}\\nfunction getPropWorldVelocity(t, prop) {\\n    return $bm_mul($bm_sub(getPropWorldValue($bm_sum(t, 0.005), prop), getPropWorldValue($bm_sub(t, 0.005), prop)), 100);\\n}\\nfunction getLayerWorldPos(t, l) {\\n    return l.toWorld(l.anchorPoint, t);\\n}\\nfunction getPropWorldValue(t, prop) {\\n    if (isPosition(prop))\\n        return getLayerWorldPos(t, thisLayer);\\n    return thisLayer.toWorld(prop.valueAtTime(t), t);\\n}\\nfunction isPosition(prop) {\\n    return prop === $bm_transform.position;\\n}\\nfunction isKeyTop(k, axis) {\\n    var prevSpeed = velocityAtTime($bm_sub(k.time, threshold));\\n    var nextSpeed = velocityAtTime($bm_sum(k.time, threshold));\\n    if ($bm_isInstanceOfArray(value)) {\\n        prevSpeed = prevSpeed[axis];\\n        nextSpeed = nextSpeed[axis];\\n    }\\n    if (Math.abs(prevSpeed) < 0.01 || Math.abs(nextSpeed) < 0.01)\\n        return true;\\n    return $bm_mul(prevSpeed, nextSpeed) < 0;\\n}\\nfunction anticipate() {\\n    var anticipation = zeroValue;\\n    if (isAfterLastKey())\\n        return anticipation;\\n    if (numKeys < 2)\\n        return anticipation;\\n    var nextKey = getNextKey(time);\\n    var aKey = nextKey;\\n    if (!isStill(aKey.time - 0.1, 0.1)) {\\n        aKey = getPrevKey(time);\\n        if (!isStill(aKey.time - 0.1, 0.1))\\n            return anticipation;\\n    }\\n    if (aKey.index == numKeys)\\n        return anticipation;\\n    var anticipationMiddle = aKey.time;\\n    var anticipationStart = $bm_sub(anticipationMiddle, anticipationDuration);\\n    var anticipationEnd = key(aKey.index + 1).time;\\n    var startValue = anticipation;\\n    var midValue = $bm_mul($bm_sum($bm_neg(valueAtTime($bm_sum(anticipationMiddle, anticipationDuration))), aKey.value), anticipationQuantity);\\n    var endValue = anticipation;\\n    if (time < anticipationStart) {\\n        return anticipation;\\n    } else if (time < anticipationMiddle) {\\n        if ($bm_isInstanceOfArray(value)) {\\n            for (var i = 0; i < value.length; i++) {\\n                anticipation[i] = bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue[i], midValue[i], [\\n                    slowOut,\\n                    0,\\n                    slowIn,\\n                    1\\n                ]);\\n            }\\n            return anticipation;\\n        } else {\\n            return bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue, midValue, [\\n                slowOut,\\n                0,\\n                slowIn,\\n                1\\n            ]);\\n        }\\n    } else if (time <= anticipationEnd) {\\n        if ($bm_isInstanceOfArray(value)) {\\n            for (var i = 0; i < value.length; i++) {\\n                anticipation[i] = bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue[i], endValue[i], [\\n                    slowOut,\\n                    0,\\n                    slowIn,\\n                    1\\n                ]);\\n            }\\n            return anticipation;\\n        } else {\\n            return bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue, endValue, [\\n                slowOut,\\n                0,\\n                slowIn,\\n                1\\n            ]);\\n        }\\n    } else {\\n        return anticipation;\\n    }\\n}\\nfunction followThroughAtTime(t) {\\n    var fThrough = zeroValue;\\n    if (elasticity == 0)\\n        return fThrough;\\n    var propSpeed;\\n    if (!simulate) {\\n        if (numKeys < 2)\\n            return fThrough;\\n        if (nearestKey(t).index == 1)\\n            return fThrough;\\n        propSpeed = length(velocityAtTime(t));\\n        if (propSpeed >= threshold)\\n            return fThrough;\\n    } else {\\n        propSpeed = getPropWorldSpeed(t, thisProperty);\\n        if (propSpeed >= threshold)\\n            return fThrough;\\n    }\\n    var fThroughStart = 0;\\n    var fThroughTime = 0;\\n    if (simulate) {\\n        var speedI = getPropWorldSpeed(t, thisProperty);\\n        var i = t;\\n        while (speedI < threshold && i > 0) {\\n            i = $bm_sub(i, $bm_div(thisComp.frameDuration, moBlurPrecision));\\n            speedI = getPropWorldSpeed(i, thisProperty);\\n        }\\n        fThroughStart = i;\\n    } else {\\n        var fThroughKey = getPrevKey(t);\\n        fThroughStart = fThroughKey.time;\\n    }\\n    if (fThroughStart == 0)\\n        return fThrough;\\n    fThroughTime = $bm_sub(t, fThroughStart);\\n    if (simulate)\\n        fThrough = $bm_div(getPropWorldVelocity($bm_sub(fThroughStart, thisComp.frameDuration), thisProperty), 2);\\n    else\\n        fThrough = $bm_div(velocityAtTime($bm_sub(fThroughStart, thisComp.frameDuration)), 2);\\n    if (bounce) {\\n        var cycleDamp = Math.exp($bm_mul($bm_mul(fThroughTime, damping), 0.1));\\n        var damp = $bm_div(Math.exp($bm_mul(fThroughTime, damping)), $bm_div(elasticity, 2));\\n        var cycleDuration = $bm_div(1, $bm_mul(elasticity, 2));\\n        cycleDuration = Math.round(timeToFrames(cycleDuration));\\n        cycleDuration = framesToTime(cycleDuration);\\n        var midDuration = $bm_div(cycleDuration, 2);\\n        var maxValue = $bm_mul(fThrough, midDuration);\\n        var cycvarime = fThroughTime;\\n        var numEndCycles = 1;\\n        while (cycvarime > cycleDuration) {\\n            cycvarime = $bm_sub(cycvarime, cycleDuration);\\n            cycleDuration = $bm_div(cycleDuration, cycleDamp);\\n            cycleDuration = Math.round(timeToFrames(cycleDuration));\\n            if (cycleDuration < 2) {\\n                cycleDuration = 2;\\n                numEndCycles++;\\n            }\\n            cycleDuration = framesToTime(cycleDuration);\\n            midDuration = $bm_div(cycleDuration, 2);\\n            maxValue = $bm_div($bm_mul(fThrough, midDuration), damp);\\n            if (numEndCycles > 100 / damping && maxValue < threshold)\\n                return zeroValue;\\n        }\\n        if (cycvarime < midDuration)\\n            fThrough = bezierInterpolation(cycvarime, 0, midDuration, 0, maxValue, [\\n                0,\\n                0.1,\\n                slowIn,\\n                1\\n            ]);\\n        else\\n            fThrough = bezierInterpolation(cycvarime, midDuration, cycleDuration, maxValue, 0, [\\n                $bm_sub(1, slowIn),\\n                0,\\n                1,\\n                0.9\\n            ]);\\n    } else {\\n        var damp = Math.exp($bm_mul(fThroughTime, damping));\\n        var sinus = $bm_mul($bm_mul($bm_mul(elasticity, fThroughTime), 2), Math.PI);\\n        sinus = Math.sin(sinus);\\n        sinus = $bm_mul($bm_div(0.3, elasticity), sinus);\\n        sinus = $bm_div(sinus, damp);\\n        if (Math.abs(sinus) < $bm_div(threshold, 100))\\n            return 0;\\n        fThrough = $bm_mul(fThrough, sinus);\\n        if (threshold > 0) {\\n            fThrough = $bm_mul(fThrough, $bm_sub(1, $bm_div(propSpeed, threshold)));\\n        }\\n    }\\n    if (bounce) {\\n        var prevValue = valueAtTime($bm_sub(fThroughStart, thisComp.frameDuration));\\n        var startValue = valueAtTime(fThroughStart);\\n        if ($bm_isInstanceOfArray(value)) {\\n            for (var i = 0; i < prevValue.length; i++) {\\n                if (prevValue[i] > startValue[i])\\n                    fThrough[i] = Math.abs(fThrough[i]);\\n                if (prevValue[i] < startValue[i])\\n                    fThrough[i] = $bm_neg(Math.abs(fThrough[i]));\\n            }\\n        } else {\\n            if (prevValue > startValue)\\n                fThrough = Math.abs(fThrough);\\n            if (prevValue < startValue)\\n                fThrough = $bm_neg(Math.abs(fThrough));\\n        }\\n    }\\n    if (simulate) {\\n        if (!isThisPosition) {\\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer));\\n            fThrough = $bm_sub(thisLayer.fromWorld(fThrough), thisLayer.anchorPoint);\\n        } else if (thisLayer.hasParent) {\\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer.parent));\\n            fThrough = $bm_sub(thisLayer.parent.fromWorld(fThrough), thisLayer.parent.anchorPoint);\\n        }\\n    }\\n    return fThrough;\\n}\\nfunction followThrough() {\\n    var propSpeed = length(velocity);\\n    if (propSpeed < threshold)\\n        return followThroughAtTime($bm_sub(time, overlapDuration));\\n    var fThrough = zeroValue;\\n    var t = time;\\n    while (t > 0) {\\n        t = $bm_sub(t, thisComp.frameDuration);\\n        if (simulate)\\n            propSpeed = getPropWorldSpeed($bm_sub(t, overlapDuration), thisProperty);\\n        else\\n            propSpeed = length(velocityAtTime(t));\\n        if (propSpeed < threshold) {\\n            fThrough = followThroughAtTime($bm_sub(t, overlapDuration));\\n            break;\\n        }\\n    }\\n    return linear(time, t, $bm_sum(t, $bm_mul(anticipationDuration, 2)), fThrough, zeroValue);\\n}\\nfunction smartSmooth(axis) {\\n    var startKey = nearestKey(time);\\n    var endKey = startKey;\\n    if (time == startKey.time)\\n        return 0;\\n    if (time < startKey.time && startKey.index == 1)\\n        return 0;\\n    if (time > startKey.time && startKey.index == numKeys)\\n        return 0;\\n    if (time < startKey.time)\\n        startKey = key($bm_sub(startKey.index, 1));\\n    if (time > startKey.time)\\n        endKey = key($bm_sum(startKey.index, 1));\\n    var sI = 0.66;\\n    var sO = 0.33;\\n    var sIV = 1;\\n    var sOV = 0;\\n    var sVal = startKey.value;\\n    var eVal = endKey.value;\\n    if ($bm_isInstanceOfArray(value)) {\\n        sVal = sVal[axis];\\n        eVal = eVal[axis];\\n    }\\n    var sTime = startKey.time;\\n    var eTime = endKey.time;\\n    if (isKeyTop(startKey, axis))\\n        sO = slowOut;\\n    else {\\n        var prevKey = key($bm_sub(startKey.index, 1));\\n        var pVal = prevKey.value;\\n        if ($bm_isInstanceOfArray(value))\\n            pVal = pVal[axis];\\n        sOV = $bm_div($bm_sub(sVal, pVal), $bm_sub(eVal, pVal));\\n    }\\n    if (isKeyTop(endKey, axis)) {\\n        sI = slowIn;\\n        if (endKey.index != numKeys) {\\n            var nextKey = key($bm_sum(endKey.index, 1));\\n            var nVal = nextKey.value;\\n            if ($bm_isInstanceOfArray(value))\\n                nVal = nVal[axis];\\n            if (Math.abs(nVal - eVal) < 0.01 && doFollowThrough)\\n                sI = 1;\\n        }\\n    } else {\\n        var nextKey = key($bm_sum(endKey.index, 1));\\n        var nVal = nextKey.value;\\n        if ($bm_isInstanceOfArray(value))\\n            nVal = nVal[axis];\\n        sIV = $bm_div($bm_sub(eVal, sVal), $bm_sub(nVal, sVal));\\n    }\\n    if (endKey.index == numKeys && doFollowThrough) {\\n        sI = 1;\\n    }\\n    var val = value;\\n    if ($bm_isInstanceOfArray(value))\\n        val = val[axis];\\n    return $bm_sub(bezierInterpolation(time, sTime, eTime, sVal, eVal, [\\n        sO,\\n        sOV,\\n        sI,\\n        sIV\\n    ]), val);\\n}\\nfunction overlap() {\\n    var ol = zeroValue;\\n    if (isThisPosition && !hasParent)\\n        return zeroValue;\\n    ol = $bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisProperty), getPropWorldValue(time, thisProperty));\\n    var motionRatio = $bm_div($bm_div(length(zeroValue, ol), thisLayer.width), 2);\\n    if (isThisPosition) {\\n        var originalDistance = length(valueAtTime(0));\\n        motionRatio = $bm_div(length(zeroValue, ol), thisComp.width);\\n    }\\n    ol = $bm_sum(ol, getPropWorldValue(time, thisProperty));\\n    ol = $bm_sum(ol, $bm_mul($bm_mul($bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisLayer.anchorPoint), ol), motionRatio), flexibility));\\n    ol = thisLayer.fromWorld(ol);\\n    if (!isThisPosition)\\n        ol = $bm_sub(ol, value);\\n    else {\\n        ol = linear(flexibility, 0, 100, $bm_div(ol, 2), 0);\\n        var prevParentWorldPos = getLayerWorldPos($bm_sub(time, overlapDuration), parent);\\n        ol = $bm_sum(ol, $bm_mul($bm_mul($bm_mul(thisLayer.fromWorld(prevParentWorldPos), motionRatio), flexibility), 5));\\n    }\\n    return ol;\\n}\\nvar okToGo = false;\\nif (simulate && fx.enabled)\\n    okToGo = true;\\nelse if (numKeys > 1 && fx.enabled)\\n    okToGo = true;\\nif (okToGo) {\\n    var smartSmoothResult = zeroValue;\\n    if (doInterpolation) {\\n        if ($bm_isInstanceOfArray(value)) {\\n            if (value.length == 2)\\n                smartSmoothResult = [\\n                    smartSmooth(0),\\n                    smartSmooth(1)\\n                ];\\n            else if (value.length == 3)\\n                smartSmoothResult = [\\n                    smartSmooth(0),\\n                    smartSmooth(1),\\n                    smartSmooth(2)\\n                ];\\n            else if (value.length == 4)\\n                smartSmoothResult = [\\n                    smartSmooth(0),\\n                    smartSmooth(1),\\n                    smartSmooth(2),\\n                    smartSmooth(3)\\n                ];\\n        } else {\\n            smartSmoothResult = smartSmooth(0);\\n        }\\n    }\\n    if (doAnticipation)\\n        result = $bm_sum(result, anticipate());\\n    result = $bm_sum(result, smartSmoothResult);\\n    if (doFollowThrough)\\n        result = $bm_sum(result, followThrough());\\n    if (doOverlap)\\n        result = $bm_sum(result, overlap());\\n}\\n$bm_rt = result;"},"a":{"a":0,"k":[26.75,-57.5],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[-3.251,-1.172],[-0.48,-3.417],[3.062,-2.315]],"o":[[3.37,-0.554],[3.251,1.172],[0.543,3.865],[0,0]],"v":[[88.2,-51.288],[98.371,-50.849],[104.99,-43.485],[99.9,-33.713]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.164705887437,0.192156866193,0.203921571374,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":1.453,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[2.148,-1.516],[0.359,-0.768],[-0.608,-0.615],[-0.618,-0.082],[-2.712,-1.253],[-0.172,-0.356],[0.238,-0.5],[0.76,-1.079],[-0.611,-0.669],[-1.259,-0.319],[-1.066,-0.822],[-0.896,0.7],[-1.338,2.042],[0.572,2.416],[2.489,1.03],[2.706,0.034]],"o":[[-0.69,0.487],[-0.359,0.768],[0.443,0.448],[2.942,0.391],[0.358,0.165],[0.246,0.508],[-0.57,1.194],[-0.509,0.724],[0.883,0.967],[0.536,1.233],[0.922,0.71],[1.92,-1.501],[1.338,-2.042],[-0.602,-2.54],[-2.619,-1.084],[-2.675,-0.034]],"v":[[82.681,-48.376],[80.959,-46.555],[81.243,-44.155],[82.953,-43.465],[91.746,-42.704],[92.64,-41.962],[92.426,-40.362],[90.427,-36.944],[89.985,-34.524],[93.669,-34.682],[94.648,-30.898],[97.748,-31.579],[102.895,-36.725],[104.4,-43.738],[98.918,-50.747],[90.363,-51.077]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.866666674614,0.89411765337,0.933333337307,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":2,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[-8.016,-4.379],[-0.661,-6.357],[3.69,-5.102],[7.7,-0.556],[3.978,6.749]],"o":[[8.246,-3.508],[5.638,3.08],[0.661,6.357],[-4.49,6.209],[-7.7,0.556],[0,0]],"v":[[77.909,-59.244],[103.979,-60.893],[113.936,-45.249],[108.787,-27.39],[89.562,-16.125],[69.701,-26.088]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.164705887437,0.192156866193,0.203921571374,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":1.453,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"fl","c":{"a":0,"k":[1,1,1,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":3,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[2.308,2.572],[3.347,-0.839],[0.995,-3.707]],"o":[[-0.752,-3.331],[-2.308,-2.572],[-3.786,0.949],[0,0]],"v":[[5.448,-102.589],[1.22,-111.85],[-8.091,-115.218],[-15.235,-106.829]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.164705887437,0.192156866193,0.203921571374,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":1.453,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0.598,-2.561],[0.577,-0.621],[0.799,0.333],[0.308,0.542],[2.18,2.043],[0.394,0.026],[0.374,-0.409],[0.715,-1.11],[0.849,0.315],[0.769,1.047],[1.162,0.679],[-0.312,1.093],[-1.389,2.007],[-2.454,0.377],[-1.89,-1.919],[-1.048,-2.495]],"o":[[-0.192,0.823],[-0.577,0.621],[-0.581,-0.242],[-1.468,-2.58],[-0.288,-0.27],[-0.563,-0.037],[-0.893,0.977],[-0.479,0.744],[-1.228,-0.455],[-1.344,-0.033],[-1.005,-0.587],[0.669,-2.343],[1.389,-2.007],[2.58,-0.397],[1.989,2.02],[1.036,2.467]],"v":[[4.823,-96.381],[3.782,-94.1],[1.451,-93.462],[0.17,-94.788],[-3.839,-102.651],[-4.863,-103.199],[-6.265,-102.4],[-8.682,-99.264],[-10.759,-97.945],[-11.996,-101.418],[-15.871,-100.904],[-16.405,-104.033],[-13.569,-110.736],[-7.636,-114.766],[0.92,-112.319],[4.44,-104.514]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.866666674614,0.89411765337,0.933333337307,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":2,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[7.07,5.783],[6.139,-1.775],[3.342,-5.336],[-2.377,-7.345],[-7.75,-1.151]],"o":[[0.153,-8.96],[-4.973,-4.068],[-6.139,1.775],[-4.067,6.494],[2.377,7.345],[0,0]],"v":[[16.687,-96.041],[8.422,-120.82],[-9.818,-124.171],[-24.434,-112.69],[-27.651,-90.641],[-10.956,-75.978]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.164705887437,0.192156866193,0.203921571374,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":1.453,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"fl","c":{"a":0,"k":[1,1,1,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":3,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":2,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[-2.529,-0.031],[-3.121,-1.44],[-3.114,-4.615],[8.865,-3.143],[-0.704,-0.572],[-2.215,-2.754],[2.949,0.394]],"o":[[2.466,-0.562],[3.437,0.041],[5.055,2.333],[-8.223,-4.565],[0.906,0.026],[2.744,2.228],[-2.769,-1.089],[0,0]],"v":[[47.268,-94.24],[54.756,-95.335],[64.65,-92.715],[77.599,-82.497],[50.313,-84.768],[52.71,-83.592],[60.177,-76.092],[51.616,-78.146]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.164705887437,0.192156866193,0.203921571374,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":1.453,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":1,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0.717,0.437],[2.389,0.854],[2.534,-0.106],[-3.164,0.188],[-0.101,-0.037],[-0.094,-0.115],[-1.677,-1.629],[-0.433,-1.388],[0.52,0.377]],"o":[[-2.166,-1.32],[-2.389,-0.854],[2.874,-1.336],[0.107,-0.006],[0.14,0.051],[1.482,1.807],[1.002,0.974],[0.231,0.74],[-0.679,-0.492]],"v":[[57.056,-77.253],[50.25,-80.627],[42.791,-81.876],[51.556,-85.373],[51.874,-85.347],[52.209,-85.061],[56.953,-79.901],[59.968,-76.311],[59.128,-75.847]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.866666674614,0.89411765337,0.933333337307,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":1,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[1.653,0.257],[5.94,-3],[-1.998,1.164],[-2.309,0.132],[-2.677,-0.693],[-2.03,-1.131],[-1.251,-0.885],[-0.601,-0.476],[0.093,-0.563],[0.544,0.243],[1.445,0.397]],"o":[[-6.576,-1.022],[-0.054,-2.312],[1.998,-1.164],[2.761,-0.158],[2.25,0.583],[1.339,0.746],[0.626,0.443],[0.381,0.302],[-0.186,1.124],[-1.369,-0.611],[-1.613,-0.443]],"v":[[62.206,-89.751],[42.678,-87.657],[46.193,-93.256],[52.864,-94.906],[61.099,-94.238],[67.512,-91.554],[71.402,-89.105],[73.242,-87.727],[74.496,-86.364],[71.352,-87.227],[67.115,-88.723]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.866666674614,0.89411765337,0.933333337307,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 3","np":1,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[-2.529,-0.031],[-3.121,-1.44],[-3.114,-4.615],[8.865,-3.143],[-0.704,-0.572],[-2.215,-2.754],[2.949,0.394]],"o":[[2.466,-0.562],[3.437,0.041],[5.055,2.333],[-8.223,-4.565],[0.906,0.026],[2.744,2.228],[-2.769,-1.089],[0,0]],"v":[[47.268,-94.24],[54.756,-95.335],[64.65,-92.715],[77.599,-82.497],[50.313,-84.768],[52.71,-83.592],[60.177,-76.092],[51.616,-78.146]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[1,1,1,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 4","np":1,"cix":2,"bm":0,"ix":4,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 3","np":4,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-6.467,-12.269],[-0.201,-0.352],[-0.685,-1.339],[-4.661,-3.547],[-11.914,-1.19],[-3.762,0.231],[-2.757,0.713],[-4.101,2.176],[-0.048,0.029],[-5.323,11.427],[-0.035,0.076],[-0.103,0.213],[-0.055,0.169],[0,0],[9.445,15.52],[15.35,2.968],[12.402,-6.663],[3.389,-3.283],[1.984,-2.85],[0.744,-1.288],[0.726,-1.57],[0.716,-2.348],[0.227,-0.861],[0,0]],"o":[[0.201,0.367],[0.765,1.296],[2.666,5.275],[9.457,7.193],[3.75,0.376],[2.84,-0.164],[4.504,-1.13],[0.048,-0.029],[10.405,-5.542],[0.035,-0.076],[0.104,-0.229],[0.07,-0.168],[0,0],[7.183,-16.975],[-8.101,-13.294],[-13.852,-2.696],[-4.213,2.249],[-2.494,2.422],[-0.85,1.221],[-0.878,1.485],[-1.072,2.301],[-0.273,0.859],[-0.001,0.016],[-3.597,13.811]],"v":[[-28.238,-16.86],[-27.635,-15.773],[-25.355,-11.886],[-13.74,0.793],[18.828,14.099],[30.118,14.31],[38.412,13.013],[51.375,8.041],[51.502,7.969],[75.948,-17.779],[76.052,-18.008],[76.363,-18.679],[76.574,-19.182],[76.574,-19.198],[71.511,-71.886],[34.448,-98.023],[-6.662,-91.568],[-18.085,-83.193],[-24.819,-75.256],[-27.218,-71.507],[-29.624,-66.933],[-32.313,-59.96],[-33.056,-57.364],[-33.057,-57.333]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.164705887437,0.192156866193,0.203921571374,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":1.453,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 4","np":2,"cix":2,"bm":0,"ix":4,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-6.467,-12.269],[-0.201,-0.352],[-0.035,0.092],[-0.116,-0.192],[-15.621,-3.974],[-4.858,-0.049],[-7.523,3.465],[-0.605,0.299],[-0.048,0.029],[-5.299,10.899],[0.105,0.425],[0.103,0.129],[0.272,0.184],[1.582,2.47],[9.759,-6.039],[15.569,12.69],[2.75,12.206],[-3.262,11.631],[0.726,-1.57],[0.716,-2.348],[0.227,-0.861],[0,0]],"o":[[0.201,0.367],[0.066,-0.075],[0.216,0.041],[8.475,13.831],[4.678,1.19],[8.277,0.072],[0.62,-0.283],[0.048,-0.029],[10.776,-5.494],[0.19,-0.396],[-0.039,-0.157],[-0.19,-0.258],[-2.413,-1.684],[-3.729,10.992],[-16.425,10.182],[-9.794,-7.987],[-2.645,-11.78],[-0.878,1.485],[-1.072,2.301],[-0.273,0.859],[-0.001,0.016],[-3.597,13.811]],"v":[[-28.238,-16.86],[-27.635,-15.773],[-27.467,-16.03],[-27.017,-15.667],[11,12.957],[25.462,14.032],[49.544,8.921],[51.375,8.041],[51.502,7.969],[76.511,-17.489],[76.787,-18.752],[76.574,-19.182],[75.826,-19.84],[69.737,-26.161],[49.606,-4.098],[-6.674,-8.576],[-26.526,-37.805],[-27.218,-71.507],[-29.624,-66.933],[-32.313,-59.96],[-33.056,-57.364],[-33.057,-57.333]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.866666674614,0.89411765337,0.933333337307,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 5","np":1,"cix":2,"bm":0,"ix":5,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[1.984,-2.85],[-1.943,-0.059],[-2.544,1.501],[0,0],[1.46,2.076],[0.38,0.531],[0.208,0.212]],"o":[[1.822,0.66],[2.953,0.09],[0,0],[-1.883,-1.69],[-0.365,-0.53],[-0.175,-0.242],[-2.494,2.422]],"v":[[-24.819,-75.256],[-19.102,-74.338],[-10.542,-76.011],[-10.667,-76.002],[-16.465,-80.877],[-17.509,-82.529],[-18.085,-83.193]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.866666674614,0.89411765337,0.933333337307,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 6","np":2,"cix":2,"bm":0,"ix":6,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-6.467,-12.269],[-0.201,-0.352],[-0.685,-1.339],[-4.661,-3.547],[-11.914,-1.19],[-3.762,0.231],[-2.757,0.713],[-4.101,2.176],[-0.048,0.029],[-5.323,11.427],[-0.035,0.076],[-0.103,0.213],[-0.055,0.169],[0,0],[9.445,15.52],[15.35,2.968],[12.402,-6.663],[3.389,-3.283],[1.984,-2.85],[0.744,-1.288],[0.726,-1.57],[0.716,-2.348],[0.227,-0.861],[0,0]],"o":[[0.201,0.367],[0.765,1.296],[2.666,5.275],[9.457,7.193],[3.75,0.376],[2.84,-0.164],[4.504,-1.13],[0.048,-0.029],[10.405,-5.542],[0.035,-0.076],[0.104,-0.229],[0.07,-0.168],[0,0],[7.183,-16.975],[-8.101,-13.294],[-13.852,-2.696],[-4.213,2.249],[-2.494,2.422],[-0.85,1.221],[-0.878,1.485],[-1.072,2.301],[-0.273,0.859],[-0.001,0.016],[-3.597,13.811]],"v":[[-28.238,-16.86],[-27.635,-15.773],[-25.355,-11.886],[-13.74,0.793],[18.828,14.099],[30.118,14.31],[38.412,13.013],[51.375,8.041],[51.502,7.969],[75.948,-17.779],[76.052,-18.008],[76.363,-18.679],[76.574,-19.182],[76.574,-19.198],[71.511,-71.886],[34.448,-98.023],[-6.662,-91.568],[-18.085,-83.193],[-24.819,-75.256],[-27.218,-71.507],[-29.624,-66.933],[-32.313,-59.96],[-33.056,-57.364],[-33.057,-57.333]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[1,1,1,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 7","np":2,"cix":2,"bm":0,"ix":7,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":7,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2,"x":"var $bm_rt;\\nvar fx = effect(\'ŝlosilo pli pura 3\');\\nvar doAnticipation = fx(1).value;\\nvar doInterpolation = fx(2).value;\\nvar doFollowThrough = fx(3).value;\\nvar damping = $bm_div(fx(15).value, 10);\\nvar elasticity = $bm_div(fx(13).value, 10);\\nvar bounce = fx(17).value;\\nvar anticipationDuration = fx(5).value;\\nvar anticipationQuantity = $bm_div(fx(6).value, 100);\\nvar slowIn = $bm_div(fx(9).value, 100);\\nvar slowOut = $bm_div(fx(10).value, 100);\\nvar spatialMode = fx(21).value;\\nvar spatialDoInterpolation = fx(20).value;\\nvar moBlurPrecision = fx(32).value;\\nvar elasticityRandom = fx(14).value;\\nvar dampingRandom = fx(16).value;\\nvar softBody = fx(28).value;\\nvar flexibility = $bm_div(fx(29).value, 100);\\nvar doOverlap = fx(23).value;\\nvar overlapDuration = fx(24).value;\\nvar overlapRandom = fx(25).value;\\nvar threshold = $bm_div($bm_div(1, moBlurPrecision), 1000);\\nvar zeroValue;\\nif ($bm_isInstanceOfArray(value)) {\\n    if (value.length == 2)\\n        zeroValue = [\\n            0,\\n            0\\n        ];\\n    else if (value.length == 3)\\n        zeroValue = [\\n            0,\\n            0,\\n            0\\n        ];\\n    else if (value.length == 4)\\n        zeroValue = [\\n            0,\\n            0,\\n            0,\\n            0\\n        ];\\n} else\\n    zeroValue = 0;\\nvar isThisSpatial = isSpatial(thisProperty);\\nvar isThisPosition = thisProperty === $bm_transform.position;\\nvar simulate = false;\\nif (isThisSpatial) {\\n    doInterpolation = doInterpolation && spatialDoInterpolation;\\n    if (isThisPosition && thisProperty.numKeys > 0) {\\n        doOverlap = false;\\n        simulate = false;\\n    } else {\\n        simulate = spatialMode == 2;\\n        doOverlap = overlapDuration != 0 && doOverlap && simulate;\\n    }\\n} else {\\n    doOverlap = false;\\n}\\nif (!doOverlap) {\\n    overlapDuration = 0;\\n}\\nif (simulate && softBody && isThisSpatial && !isThisPosition && (doFollowThrough || doOverlap)) {\\n    var distanceRatio = $bm_div(length(valueAtTime(0), $bm_transform.anchorPoint), $bm_div(thisLayer.width, 2));\\n    distanceRatio = $bm_div($bm_sum(1, $bm_mul(distanceRatio, flexibility)), 2);\\n    if (doFollowThrough) {\\n        elasticity = $bm_div(elasticity, distanceRatio);\\n        damping = $bm_div(damping, distanceRatio);\\n    }\\n    if (doOverlap) {\\n        overlapDuration = $bm_mul(overlapDuration, distanceRatio);\\n    }\\n}\\nseedRandom(0, true);\\nif (doFollowThrough) {\\n    if (elasticityRandom > 0)\\n        elasticity = addNoise(elasticity, elasticityRandom);\\n    if (dampingRandom > 0)\\n        damping = addNoise(damping, dampingRandom);\\n}\\nif (doOverlap) {\\n    if (doOverlap && overlapRandom > 0)\\n        overlapDuration = addNoise(overlapDuration, overlapRandom);\\n}\\nvar result = value;\\nfunction isSpatial(prop) {\\n    if (!(prop.value instanceof Array))\\n        return false;\\n    if (prop.value.length != 2 && prop.value.length != 3)\\n        return false;\\n    try {\\n        if (typeof prop.speed !== \'undefined\')\\n            return true;\\n    } catch (e) {\\n        return false;\\n    }\\n}\\nfunction addNoise(val, quantity) {\\n    var randomValue = random(0.9, 1.1);\\n    var noiseValue = noise($bm_mul(valueAtTime(0), randomValue));\\n    noiseValue = $bm_mul(noiseValue, $bm_div(quantity, 100));\\n    return $bm_mul(val, $bm_sum(noiseValue, 1));\\n}\\nfunction isAfterLastKey() {\\n    if (numKeys == 0)\\n        return false;\\n    var nKey = nearestKey(time);\\n    return nKey.time <= time && nKey.index == numKeys;\\n}\\nfunction isStill(t, threshold) {\\n    var d = $bm_sub(valueAtTime(t), valueAtTime($bm_sum(t, framesToTime(1))));\\n    if ($bm_isInstanceOfArray(d)) {\\n        for (var i = 0; i < d.length; i++) {\\n            d[i] = Math.abs(d[i]);\\n            if (d[i] >= threshold) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    } else {\\n        d = Math.abs(d);\\n        return d < threshold;\\n    }\\n}\\nfunction bezierInterpolation(t, tMin, tMax, value1, value2, bezierPoints) {\\n    if (arguments.length !== 5 && arguments.length !== 6)\\n        return t;\\n    var a = $bm_sub(value2, value1);\\n    var b = $bm_sub(tMax, tMin);\\n    if (b == 0)\\n        return t;\\n    var c = clamp($bm_div($bm_sub(t, tMin), b), 0, 1);\\n    if (!(bezierPoints instanceof Array) || bezierPoints.length !== 4)\\n        bezierPoints = [\\n            0.33,\\n            0,\\n            0.66,\\n            1\\n        ];\\n    return $bm_sum($bm_mul(a, h(c, bezierPoints)), value1);\\n    function h(f, g) {\\n        var x = $bm_mul(3, g[0]);\\n        var j = $bm_sub($bm_mul(3, $bm_sub(g[2], g[0])), x);\\n        var k = $bm_sub($bm_sub(1, x), j);\\n        var l = $bm_mul(3, g[1]);\\n        var m = $bm_sub($bm_mul(3, $bm_sub(g[3], g[1])), l);\\n        var n = $bm_sub($bm_sub(1, l), m);\\n        var d = f;\\n        for (var i = 0; i < 5; i++) {\\n            var z = $bm_sub($bm_mul(d, $bm_sum(x, $bm_mul(d, $bm_sum(j, $bm_mul(d, k))))), f);\\n            if (Math.abs(z) < 0.001)\\n                break;\\n            d = $bm_sub(d, $bm_div(z, $bm_sum(x, $bm_mul(d, $bm_sum($bm_mul(2, j), $bm_mul($bm_mul(3, k), d))))));\\n        }\\n        return $bm_mul(d, $bm_sum(l, $bm_mul(d, $bm_sum(m, $bm_mul(d, n)))));\\n    }\\n}\\nfunction getPropWorldSpeed(t, prop) {\\n    return length(getPropWorldVelocity(t, prop));\\n}\\nfunction getPrevKey(t) {\\n    if (numKeys == 0)\\n        return null;\\n    var nKey = nearestKey(t);\\n    if (nKey.time <= t)\\n        return nKey;\\n    if (nKey.index > 1)\\n        return key($bm_sub(nKey.index, 1));\\n    return null;\\n}\\nfunction getNextKey(t) {\\n    if (numKeys == 0)\\n        return null;\\n    var nKey = nearestKey(t);\\n    if (nKey.time >= t)\\n        return nKey;\\n    if (nKey.index < numKeys)\\n        return key($bm_sum(nKey.index, 1));\\n    return null;\\n}\\nfunction getPropWorldVelocity(t, prop) {\\n    return $bm_mul($bm_sub(getPropWorldValue($bm_sum(t, 0.005), prop), getPropWorldValue($bm_sub(t, 0.005), prop)), 100);\\n}\\nfunction getLayerWorldPos(t, l) {\\n    return l.toWorld(l.anchorPoint, t);\\n}\\nfunction getPropWorldValue(t, prop) {\\n    if (isPosition(prop))\\n        return getLayerWorldPos(t, thisLayer);\\n    return thisLayer.toWorld(prop.valueAtTime(t), t);\\n}\\nfunction isPosition(prop) {\\n    return prop === $bm_transform.position;\\n}\\nfunction isKeyTop(k, axis) {\\n    var prevSpeed = velocityAtTime($bm_sub(k.time, threshold));\\n    var nextSpeed = velocityAtTime($bm_sum(k.time, threshold));\\n    if ($bm_isInstanceOfArray(value)) {\\n        prevSpeed = prevSpeed[axis];\\n        nextSpeed = nextSpeed[axis];\\n    }\\n    if (Math.abs(prevSpeed) < 0.01 || Math.abs(nextSpeed) < 0.01)\\n        return true;\\n    return $bm_mul(prevSpeed, nextSpeed) < 0;\\n}\\nfunction anticipate() {\\n    var anticipation = zeroValue;\\n    if (isAfterLastKey())\\n        return anticipation;\\n    if (numKeys < 2)\\n        return anticipation;\\n    var nextKey = getNextKey(time);\\n    var aKey = nextKey;\\n    if (!isStill(aKey.time - 0.1, 0.1)) {\\n        aKey = getPrevKey(time);\\n        if (!isStill(aKey.time - 0.1, 0.1))\\n            return anticipation;\\n    }\\n    if (aKey.index == numKeys)\\n        return anticipation;\\n    var anticipationMiddle = aKey.time;\\n    var anticipationStart = $bm_sub(anticipationMiddle, anticipationDuration);\\n    var anticipationEnd = key(aKey.index + 1).time;\\n    var startValue = anticipation;\\n    var midValue = $bm_mul($bm_sum($bm_neg(valueAtTime($bm_sum(anticipationMiddle, anticipationDuration))), aKey.value), anticipationQuantity);\\n    var endValue = anticipation;\\n    if (time < anticipationStart) {\\n        return anticipation;\\n    } else if (time < anticipationMiddle) {\\n        if ($bm_isInstanceOfArray(value)) {\\n            for (var i = 0; i < value.length; i++) {\\n                anticipation[i] = bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue[i], midValue[i], [\\n                    slowOut,\\n                    0,\\n                    slowIn,\\n                    1\\n                ]);\\n            }\\n            return anticipation;\\n        } else {\\n            return bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue, midValue, [\\n                slowOut,\\n                0,\\n                slowIn,\\n                1\\n            ]);\\n        }\\n    } else if (time <= anticipationEnd) {\\n        if ($bm_isInstanceOfArray(value)) {\\n            for (var i = 0; i < value.length; i++) {\\n                anticipation[i] = bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue[i], endValue[i], [\\n                    slowOut,\\n                    0,\\n                    slowIn,\\n                    1\\n                ]);\\n            }\\n            return anticipation;\\n        } else {\\n            return bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue, endValue, [\\n                slowOut,\\n                0,\\n                slowIn,\\n                1\\n            ]);\\n        }\\n    } else {\\n        return anticipation;\\n    }\\n}\\nfunction followThroughAtTime(t) {\\n    var fThrough = zeroValue;\\n    if (elasticity == 0)\\n        return fThrough;\\n    var propSpeed;\\n    if (!simulate) {\\n        if (numKeys < 2)\\n            return fThrough;\\n        if (nearestKey(t).index == 1)\\n            return fThrough;\\n        propSpeed = length(velocityAtTime(t));\\n        if (propSpeed >= threshold)\\n            return fThrough;\\n    } else {\\n        propSpeed = getPropWorldSpeed(t, thisProperty);\\n        if (propSpeed >= threshold)\\n            return fThrough;\\n    }\\n    var fThroughStart = 0;\\n    var fThroughTime = 0;\\n    if (simulate) {\\n        var speedI = getPropWorldSpeed(t, thisProperty);\\n        var i = t;\\n        while (speedI < threshold && i > 0) {\\n            i = $bm_sub(i, $bm_div(thisComp.frameDuration, moBlurPrecision));\\n            speedI = getPropWorldSpeed(i, thisProperty);\\n        }\\n        fThroughStart = i;\\n    } else {\\n        var fThroughKey = getPrevKey(t);\\n        fThroughStart = fThroughKey.time;\\n    }\\n    if (fThroughStart == 0)\\n        return fThrough;\\n    fThroughTime = $bm_sub(t, fThroughStart);\\n    if (simulate)\\n        fThrough = $bm_div(getPropWorldVelocity($bm_sub(fThroughStart, thisComp.frameDuration), thisProperty), 2);\\n    else\\n        fThrough = $bm_div(velocityAtTime($bm_sub(fThroughStart, thisComp.frameDuration)), 2);\\n    if (bounce) {\\n        var cycleDamp = Math.exp($bm_mul($bm_mul(fThroughTime, damping), 0.1));\\n        var damp = $bm_div(Math.exp($bm_mul(fThroughTime, damping)), $bm_div(elasticity, 2));\\n        var cycleDuration = $bm_div(1, $bm_mul(elasticity, 2));\\n        cycleDuration = Math.round(timeToFrames(cycleDuration));\\n        cycleDuration = framesToTime(cycleDuration);\\n        var midDuration = $bm_div(cycleDuration, 2);\\n        var maxValue = $bm_mul(fThrough, midDuration);\\n        var cycvarime = fThroughTime;\\n        var numEndCycles = 1;\\n        while (cycvarime > cycleDuration) {\\n            cycvarime = $bm_sub(cycvarime, cycleDuration);\\n            cycleDuration = $bm_div(cycleDuration, cycleDamp);\\n            cycleDuration = Math.round(timeToFrames(cycleDuration));\\n            if (cycleDuration < 2) {\\n                cycleDuration = 2;\\n                numEndCycles++;\\n            }\\n            cycleDuration = framesToTime(cycleDuration);\\n            midDuration = $bm_div(cycleDuration, 2);\\n            maxValue = $bm_div($bm_mul(fThrough, midDuration), damp);\\n            if (numEndCycles > 100 / damping && maxValue < threshold)\\n                return zeroValue;\\n        }\\n        if (cycvarime < midDuration)\\n            fThrough = bezierInterpolation(cycvarime, 0, midDuration, 0, maxValue, [\\n                0,\\n                0.1,\\n                slowIn,\\n                1\\n            ]);\\n        else\\n            fThrough = bezierInterpolation(cycvarime, midDuration, cycleDuration, maxValue, 0, [\\n                $bm_sub(1, slowIn),\\n                0,\\n                1,\\n                0.9\\n            ]);\\n    } else {\\n        var damp = Math.exp($bm_mul(fThroughTime, damping));\\n        var sinus = $bm_mul($bm_mul($bm_mul(elasticity, fThroughTime), 2), Math.PI);\\n        sinus = Math.sin(sinus);\\n        sinus = $bm_mul($bm_div(0.3, elasticity), sinus);\\n        sinus = $bm_div(sinus, damp);\\n        if (Math.abs(sinus) < $bm_div(threshold, 100))\\n            return 0;\\n        fThrough = $bm_mul(fThrough, sinus);\\n        if (threshold > 0) {\\n            fThrough = $bm_mul(fThrough, $bm_sub(1, $bm_div(propSpeed, threshold)));\\n        }\\n    }\\n    if (bounce) {\\n        var prevValue = valueAtTime($bm_sub(fThroughStart, thisComp.frameDuration));\\n        var startValue = valueAtTime(fThroughStart);\\n        if ($bm_isInstanceOfArray(value)) {\\n            for (var i = 0; i < prevValue.length; i++) {\\n                if (prevValue[i] > startValue[i])\\n                    fThrough[i] = Math.abs(fThrough[i]);\\n                if (prevValue[i] < startValue[i])\\n                    fThrough[i] = $bm_neg(Math.abs(fThrough[i]));\\n            }\\n        } else {\\n            if (prevValue > startValue)\\n                fThrough = Math.abs(fThrough);\\n            if (prevValue < startValue)\\n                fThrough = $bm_neg(Math.abs(fThrough));\\n        }\\n    }\\n    if (simulate) {\\n        if (!isThisPosition) {\\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer));\\n            fThrough = $bm_sub(thisLayer.fromWorld(fThrough), thisLayer.anchorPoint);\\n        } else if (thisLayer.hasParent) {\\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer.parent));\\n            fThrough = $bm_sub(thisLayer.parent.fromWorld(fThrough), thisLayer.parent.anchorPoint);\\n        }\\n    }\\n    return fThrough;\\n}\\nfunction followThrough() {\\n    var propSpeed = length(velocity);\\n    if (propSpeed < threshold)\\n        return followThroughAtTime($bm_sub(time, overlapDuration));\\n    var fThrough = zeroValue;\\n    var t = time;\\n    while (t > 0) {\\n        t = $bm_sub(t, thisComp.frameDuration);\\n        if (simulate)\\n            propSpeed = getPropWorldSpeed($bm_sub(t, overlapDuration), thisProperty);\\n        else\\n            propSpeed = length(velocityAtTime(t));\\n        if (propSpeed < threshold) {\\n            fThrough = followThroughAtTime($bm_sub(t, overlapDuration));\\n            break;\\n        }\\n    }\\n    return linear(time, t, $bm_sum(t, $bm_mul(anticipationDuration, 2)), fThrough, zeroValue);\\n}\\nfunction smartSmooth(axis) {\\n    var startKey = nearestKey(time);\\n    var endKey = startKey;\\n    if (time == startKey.time)\\n        return 0;\\n    if (time < startKey.time && startKey.index == 1)\\n        return 0;\\n    if (time > startKey.time && startKey.index == numKeys)\\n        return 0;\\n    if (time < startKey.time)\\n        startKey = key($bm_sub(startKey.index, 1));\\n    if (time > startKey.time)\\n        endKey = key($bm_sum(startKey.index, 1));\\n    var sI = 0.66;\\n    var sO = 0.33;\\n    var sIV = 1;\\n    var sOV = 0;\\n    var sVal = startKey.value;\\n    var eVal = endKey.value;\\n    if ($bm_isInstanceOfArray(value)) {\\n        sVal = sVal[axis];\\n        eVal = eVal[axis];\\n    }\\n    var sTime = startKey.time;\\n    var eTime = endKey.time;\\n    if (isKeyTop(startKey, axis))\\n        sO = slowOut;\\n    else {\\n        var prevKey = key($bm_sub(startKey.index, 1));\\n        var pVal = prevKey.value;\\n        if ($bm_isInstanceOfArray(value))\\n            pVal = pVal[axis];\\n        sOV = $bm_div($bm_sub(sVal, pVal), $bm_sub(eVal, pVal));\\n    }\\n    if (isKeyTop(endKey, axis)) {\\n        sI = slowIn;\\n        if (endKey.index != numKeys) {\\n            var nextKey = key($bm_sum(endKey.index, 1));\\n            var nVal = nextKey.value;\\n            if ($bm_isInstanceOfArray(value))\\n                nVal = nVal[axis];\\n            if (Math.abs(nVal - eVal) < 0.01 && doFollowThrough)\\n                sI = 1;\\n        }\\n    } else {\\n        var nextKey = key($bm_sum(endKey.index, 1));\\n        var nVal = nextKey.value;\\n        if ($bm_isInstanceOfArray(value))\\n            nVal = nVal[axis];\\n        sIV = $bm_div($bm_sub(eVal, sVal), $bm_sub(nVal, sVal));\\n    }\\n    if (endKey.index == numKeys && doFollowThrough) {\\n        sI = 1;\\n    }\\n    var val = value;\\n    if ($bm_isInstanceOfArray(value))\\n        val = val[axis];\\n    return $bm_sub(bezierInterpolation(time, sTime, eTime, sVal, eVal, [\\n        sO,\\n        sOV,\\n        sI,\\n        sIV\\n    ]), val);\\n}\\nfunction overlap() {\\n    var ol = zeroValue;\\n    if (isThisPosition && !hasParent)\\n        return zeroValue;\\n    ol = $bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisProperty), getPropWorldValue(time, thisProperty));\\n    var motionRatio = $bm_div($bm_div(length(zeroValue, ol), thisLayer.width), 2);\\n    if (isThisPosition) {\\n        var originalDistance = length(valueAtTime(0));\\n        motionRatio = $bm_div(length(zeroValue, ol), thisComp.width);\\n    }\\n    ol = $bm_sum(ol, getPropWorldValue(time, thisProperty));\\n    ol = $bm_sum(ol, $bm_mul($bm_mul($bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisLayer.anchorPoint), ol), motionRatio), flexibility));\\n    ol = thisLayer.fromWorld(ol);\\n    if (!isThisPosition)\\n        ol = $bm_sub(ol, value);\\n    else {\\n        ol = linear(flexibility, 0, 100, $bm_div(ol, 2), 0);\\n        var prevParentWorldPos = getLayerWorldPos($bm_sub(time, overlapDuration), parent);\\n        ol = $bm_sum(ol, $bm_mul($bm_mul($bm_mul(thisLayer.fromWorld(prevParentWorldPos), motionRatio), flexibility), 5));\\n    }\\n    return ol;\\n}\\nvar okToGo = false;\\nif (simulate && fx.enabled)\\n    okToGo = true;\\nelse if (numKeys > 1 && fx.enabled)\\n    okToGo = true;\\nif (okToGo) {\\n    var smartSmoothResult = zeroValue;\\n    if (doInterpolation) {\\n        if ($bm_isInstanceOfArray(value)) {\\n            if (value.length == 2)\\n                smartSmoothResult = [\\n                    smartSmooth(0),\\n                    smartSmooth(1)\\n                ];\\n            else if (value.length == 3)\\n                smartSmoothResult = [\\n                    smartSmooth(0),\\n                    smartSmooth(1),\\n                    smartSmooth(2)\\n                ];\\n            else if (value.length == 4)\\n                smartSmoothResult = [\\n                    smartSmooth(0),\\n                    smartSmooth(1),\\n                    smartSmooth(2),\\n                    smartSmooth(3)\\n                ];\\n        } else {\\n            smartSmoothResult = smartSmooth(0);\\n        }\\n    }\\n    if (doAnticipation)\\n        result = $bm_sum(result, anticipate());\\n    result = $bm_sum(result, smartSmoothResult);\\n    if (doFollowThrough)\\n        result = $bm_sum(result, followThrough());\\n    if (doOverlap)\\n        result = $bm_sum(result, overlap());\\n}\\n$bm_rt = result;"},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":1,"k":[{"i":{"x":[0.667,0.667],"y":[1,1]},"o":{"x":[0.333,0.333],"y":[0,0]},"t":21,"s":[100,100]},{"i":{"x":[0.667,0.667],"y":[1,1]},"o":{"x":[0.333,0.333],"y":[0,0]},"t":23.857,"s":[100,93.422]},{"t":26,"s":[100,100]}],"ix":3,"x":"var $bm_rt;\\nvar fx = effect(\'ŝlosilo pli pura 4\');\\nvar doAnticipation = fx(1).value;\\nvar doInterpolation = fx(2).value;\\nvar doFollowThrough = fx(3).value;\\nvar damping = $bm_div(fx(15).value, 10);\\nvar elasticity = $bm_div(fx(13).value, 10);\\nvar bounce = fx(17).value;\\nvar anticipationDuration = fx(5).value;\\nvar anticipationQuantity = $bm_div(fx(6).value, 100);\\nvar slowIn = $bm_div(fx(9).value, 100);\\nvar slowOut = $bm_div(fx(10).value, 100);\\nvar spatialMode = fx(21).value;\\nvar spatialDoInterpolation = fx(20).value;\\nvar moBlurPrecision = fx(32).value;\\nvar elasticityRandom = fx(14).value;\\nvar dampingRandom = fx(16).value;\\nvar softBody = fx(28).value;\\nvar flexibility = $bm_div(fx(29).value, 100);\\nvar doOverlap = fx(23).value;\\nvar overlapDuration = fx(24).value;\\nvar overlapRandom = fx(25).value;\\nvar threshold = $bm_div($bm_div(1, moBlurPrecision), 1000);\\nvar zeroValue;\\nif ($bm_isInstanceOfArray(value)) {\\n    if (value.length == 2)\\n        zeroValue = [\\n            0,\\n            0\\n        ];\\n    else if (value.length == 3)\\n        zeroValue = [\\n            0,\\n            0,\\n            0\\n        ];\\n    else if (value.length == 4)\\n        zeroValue = [\\n            0,\\n            0,\\n            0,\\n            0\\n        ];\\n} else\\n    zeroValue = 0;\\nvar isThisSpatial = isSpatial(thisProperty);\\nvar isThisPosition = thisProperty === $bm_transform.position;\\nvar simulate = false;\\nif (isThisSpatial) {\\n    doInterpolation = doInterpolation && spatialDoInterpolation;\\n    if (isThisPosition && thisProperty.numKeys > 0) {\\n        doOverlap = false;\\n        simulate = false;\\n    } else {\\n        simulate = spatialMode == 2;\\n        doOverlap = overlapDuration != 0 && doOverlap && simulate;\\n    }\\n} else {\\n    doOverlap = false;\\n}\\nif (!doOverlap) {\\n    overlapDuration = 0;\\n}\\nif (simulate && softBody && isThisSpatial && !isThisPosition && (doFollowThrough || doOverlap)) {\\n    var distanceRatio = $bm_div(length(valueAtTime(0), $bm_transform.anchorPoint), $bm_div(thisLayer.width, 2));\\n    distanceRatio = $bm_div($bm_sum(1, $bm_mul(distanceRatio, flexibility)), 2);\\n    if (doFollowThrough) {\\n        elasticity = $bm_div(elasticity, distanceRatio);\\n        damping = $bm_div(damping, distanceRatio);\\n    }\\n    if (doOverlap) {\\n        overlapDuration = $bm_mul(overlapDuration, distanceRatio);\\n    }\\n}\\nseedRandom(0, true);\\nif (doFollowThrough) {\\n    if (elasticityRandom > 0)\\n        elasticity = addNoise(elasticity, elasticityRandom);\\n    if (dampingRandom > 0)\\n        damping = addNoise(damping, dampingRandom);\\n}\\nif (doOverlap) {\\n    if (doOverlap && overlapRandom > 0)\\n        overlapDuration = addNoise(overlapDuration, overlapRandom);\\n}\\nvar result = value;\\nfunction isSpatial(prop) {\\n    if (!(prop.value instanceof Array))\\n        return false;\\n    if (prop.value.length != 2 && prop.value.length != 3)\\n        return false;\\n    try {\\n        if (typeof prop.speed !== \'undefined\')\\n            return true;\\n    } catch (e) {\\n        return false;\\n    }\\n}\\nfunction addNoise(val, quantity) {\\n    var randomValue = random(0.9, 1.1);\\n    var noiseValue = noise($bm_mul(valueAtTime(0), randomValue));\\n    noiseValue = $bm_mul(noiseValue, $bm_div(quantity, 100));\\n    return $bm_mul(val, $bm_sum(noiseValue, 1));\\n}\\nfunction isAfterLastKey() {\\n    if (numKeys == 0)\\n        return false;\\n    var nKey = nearestKey(time);\\n    return nKey.time <= time && nKey.index == numKeys;\\n}\\nfunction isStill(t, threshold) {\\n    var d = $bm_sub(valueAtTime(t), valueAtTime($bm_sum(t, framesToTime(1))));\\n    if ($bm_isInstanceOfArray(d)) {\\n        for (var i = 0; i < d.length; i++) {\\n            d[i] = Math.abs(d[i]);\\n            if (d[i] >= threshold) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    } else {\\n        d = Math.abs(d);\\n        return d < threshold;\\n    }\\n}\\nfunction bezierInterpolation(t, tMin, tMax, value1, value2, bezierPoints) {\\n    if (arguments.length !== 5 && arguments.length !== 6)\\n        return t;\\n    var a = $bm_sub(value2, value1);\\n    var b = $bm_sub(tMax, tMin);\\n    if (b == 0)\\n        return t;\\n    var c = clamp($bm_div($bm_sub(t, tMin), b), 0, 1);\\n    if (!(bezierPoints instanceof Array) || bezierPoints.length !== 4)\\n        bezierPoints = [\\n            0.33,\\n            0,\\n            0.66,\\n            1\\n        ];\\n    return $bm_sum($bm_mul(a, h(c, bezierPoints)), value1);\\n    function h(f, g) {\\n        var x = $bm_mul(3, g[0]);\\n        var j = $bm_sub($bm_mul(3, $bm_sub(g[2], g[0])), x);\\n        var k = $bm_sub($bm_sub(1, x), j);\\n        var l = $bm_mul(3, g[1]);\\n        var m = $bm_sub($bm_mul(3, $bm_sub(g[3], g[1])), l);\\n        var n = $bm_sub($bm_sub(1, l), m);\\n        var d = f;\\n        for (var i = 0; i < 5; i++) {\\n            var z = $bm_sub($bm_mul(d, $bm_sum(x, $bm_mul(d, $bm_sum(j, $bm_mul(d, k))))), f);\\n            if (Math.abs(z) < 0.001)\\n                break;\\n            d = $bm_sub(d, $bm_div(z, $bm_sum(x, $bm_mul(d, $bm_sum($bm_mul(2, j), $bm_mul($bm_mul(3, k), d))))));\\n        }\\n        return $bm_mul(d, $bm_sum(l, $bm_mul(d, $bm_sum(m, $bm_mul(d, n)))));\\n    }\\n}\\nfunction getPropWorldSpeed(t, prop) {\\n    return length(getPropWorldVelocity(t, prop));\\n}\\nfunction getPrevKey(t) {\\n    if (numKeys == 0)\\n        return null;\\n    var nKey = nearestKey(t);\\n    if (nKey.time <= t)\\n        return nKey;\\n    if (nKey.index > 1)\\n        return key($bm_sub(nKey.index, 1));\\n    return null;\\n}\\nfunction getNextKey(t) {\\n    if (numKeys == 0)\\n        return null;\\n    var nKey = nearestKey(t);\\n    if (nKey.time >= t)\\n        return nKey;\\n    if (nKey.index < numKeys)\\n        return key($bm_sum(nKey.index, 1));\\n    return null;\\n}\\nfunction getPropWorldVelocity(t, prop) {\\n    return $bm_mul($bm_sub(getPropWorldValue($bm_sum(t, 0.005), prop), getPropWorldValue($bm_sub(t, 0.005), prop)), 100);\\n}\\nfunction getLayerWorldPos(t, l) {\\n    return l.toWorld(l.anchorPoint, t);\\n}\\nfunction getPropWorldValue(t, prop) {\\n    if (isPosition(prop))\\n        return getLayerWorldPos(t, thisLayer);\\n    return thisLayer.toWorld(prop.valueAtTime(t), t);\\n}\\nfunction isPosition(prop) {\\n    return prop === $bm_transform.position;\\n}\\nfunction isKeyTop(k, axis) {\\n    var prevSpeed = velocityAtTime($bm_sub(k.time, threshold));\\n    var nextSpeed = velocityAtTime($bm_sum(k.time, threshold));\\n    if ($bm_isInstanceOfArray(value)) {\\n        prevSpeed = prevSpeed[axis];\\n        nextSpeed = nextSpeed[axis];\\n    }\\n    if (Math.abs(prevSpeed) < 0.01 || Math.abs(nextSpeed) < 0.01)\\n        return true;\\n    return $bm_mul(prevSpeed, nextSpeed) < 0;\\n}\\nfunction anticipate() {\\n    var anticipation = zeroValue;\\n    if (isAfterLastKey())\\n        return anticipation;\\n    if (numKeys < 2)\\n        return anticipation;\\n    var nextKey = getNextKey(time);\\n    var aKey = nextKey;\\n    if (!isStill(aKey.time - 0.1, 0.1)) {\\n        aKey = getPrevKey(time);\\n        if (!isStill(aKey.time - 0.1, 0.1))\\n            return anticipation;\\n    }\\n    if (aKey.index == numKeys)\\n        return anticipation;\\n    var anticipationMiddle = aKey.time;\\n    var anticipationStart = $bm_sub(anticipationMiddle, anticipationDuration);\\n    var anticipationEnd = key(aKey.index + 1).time;\\n    var startValue = anticipation;\\n    var midValue = $bm_mul($bm_sum($bm_neg(valueAtTime($bm_sum(anticipationMiddle, anticipationDuration))), aKey.value), anticipationQuantity);\\n    var endValue = anticipation;\\n    if (time < anticipationStart) {\\n        return anticipation;\\n    } else if (time < anticipationMiddle) {\\n        if ($bm_isInstanceOfArray(value)) {\\n            for (var i = 0; i < value.length; i++) {\\n                anticipation[i] = bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue[i], midValue[i], [\\n                    slowOut,\\n                    0,\\n                    slowIn,\\n                    1\\n                ]);\\n            }\\n            return anticipation;\\n        } else {\\n            return bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue, midValue, [\\n                slowOut,\\n                0,\\n                slowIn,\\n                1\\n            ]);\\n        }\\n    } else if (time <= anticipationEnd) {\\n        if ($bm_isInstanceOfArray(value)) {\\n            for (var i = 0; i < value.length; i++) {\\n                anticipation[i] = bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue[i], endValue[i], [\\n                    slowOut,\\n                    0,\\n                    slowIn,\\n                    1\\n                ]);\\n            }\\n            return anticipation;\\n        } else {\\n            return bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue, endValue, [\\n                slowOut,\\n                0,\\n                slowIn,\\n                1\\n            ]);\\n        }\\n    } else {\\n        return anticipation;\\n    }\\n}\\nfunction followThroughAtTime(t) {\\n    var fThrough = zeroValue;\\n    if (elasticity == 0)\\n        return fThrough;\\n    var propSpeed;\\n    if (!simulate) {\\n        if (numKeys < 2)\\n            return fThrough;\\n        if (nearestKey(t).index == 1)\\n            return fThrough;\\n        propSpeed = length(velocityAtTime(t));\\n        if (propSpeed >= threshold)\\n            return fThrough;\\n    } else {\\n        propSpeed = getPropWorldSpeed(t, thisProperty);\\n        if (propSpeed >= threshold)\\n            return fThrough;\\n    }\\n    var fThroughStart = 0;\\n    var fThroughTime = 0;\\n    if (simulate) {\\n        var speedI = getPropWorldSpeed(t, thisProperty);\\n        var i = t;\\n        while (speedI < threshold && i > 0) {\\n            i = $bm_sub(i, $bm_div(thisComp.frameDuration, moBlurPrecision));\\n            speedI = getPropWorldSpeed(i, thisProperty);\\n        }\\n        fThroughStart = i;\\n    } else {\\n        var fThroughKey = getPrevKey(t);\\n        fThroughStart = fThroughKey.time;\\n    }\\n    if (fThroughStart == 0)\\n        return fThrough;\\n    fThroughTime = $bm_sub(t, fThroughStart);\\n    if (simulate)\\n        fThrough = $bm_div(getPropWorldVelocity($bm_sub(fThroughStart, thisComp.frameDuration), thisProperty), 2);\\n    else\\n        fThrough = $bm_div(velocityAtTime($bm_sub(fThroughStart, thisComp.frameDuration)), 2);\\n    if (bounce) {\\n        var cycleDamp = Math.exp($bm_mul($bm_mul(fThroughTime, damping), 0.1));\\n        var damp = $bm_div(Math.exp($bm_mul(fThroughTime, damping)), $bm_div(elasticity, 2));\\n        var cycleDuration = $bm_div(1, $bm_mul(elasticity, 2));\\n        cycleDuration = Math.round(timeToFrames(cycleDuration));\\n        cycleDuration = framesToTime(cycleDuration);\\n        var midDuration = $bm_div(cycleDuration, 2);\\n        var maxValue = $bm_mul(fThrough, midDuration);\\n        var cycvarime = fThroughTime;\\n        var numEndCycles = 1;\\n        while (cycvarime > cycleDuration) {\\n            cycvarime = $bm_sub(cycvarime, cycleDuration);\\n            cycleDuration = $bm_div(cycleDuration, cycleDamp);\\n            cycleDuration = Math.round(timeToFrames(cycleDuration));\\n            if (cycleDuration < 2) {\\n                cycleDuration = 2;\\n                numEndCycles++;\\n            }\\n            cycleDuration = framesToTime(cycleDuration);\\n            midDuration = $bm_div(cycleDuration, 2);\\n            maxValue = $bm_div($bm_mul(fThrough, midDuration), damp);\\n            if (numEndCycles > 100 / damping && maxValue < threshold)\\n                return zeroValue;\\n        }\\n        if (cycvarime < midDuration)\\n            fThrough = bezierInterpolation(cycvarime, 0, midDuration, 0, maxValue, [\\n                0,\\n                0.1,\\n                slowIn,\\n                1\\n            ]);\\n        else\\n            fThrough = bezierInterpolation(cycvarime, midDuration, cycleDuration, maxValue, 0, [\\n                $bm_sub(1, slowIn),\\n                0,\\n                1,\\n                0.9\\n            ]);\\n    } else {\\n        var damp = Math.exp($bm_mul(fThroughTime, damping));\\n        var sinus = $bm_mul($bm_mul($bm_mul(elasticity, fThroughTime), 2), Math.PI);\\n        sinus = Math.sin(sinus);\\n        sinus = $bm_mul($bm_div(0.3, elasticity), sinus);\\n        sinus = $bm_div(sinus, damp);\\n        if (Math.abs(sinus) < $bm_div(threshold, 100))\\n            return 0;\\n        fThrough = $bm_mul(fThrough, sinus);\\n        if (threshold > 0) {\\n            fThrough = $bm_mul(fThrough, $bm_sub(1, $bm_div(propSpeed, threshold)));\\n        }\\n    }\\n    if (bounce) {\\n        var prevValue = valueAtTime($bm_sub(fThroughStart, thisComp.frameDuration));\\n        var startValue = valueAtTime(fThroughStart);\\n        if ($bm_isInstanceOfArray(value)) {\\n            for (var i = 0; i < prevValue.length; i++) {\\n                if (prevValue[i] > startValue[i])\\n                    fThrough[i] = Math.abs(fThrough[i]);\\n                if (prevValue[i] < startValue[i])\\n                    fThrough[i] = $bm_neg(Math.abs(fThrough[i]));\\n            }\\n        } else {\\n            if (prevValue > startValue)\\n                fThrough = Math.abs(fThrough);\\n            if (prevValue < startValue)\\n                fThrough = $bm_neg(Math.abs(fThrough));\\n        }\\n    }\\n    if (simulate) {\\n        if (!isThisPosition) {\\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer));\\n            fThrough = $bm_sub(thisLayer.fromWorld(fThrough), thisLayer.anchorPoint);\\n        } else if (thisLayer.hasParent) {\\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer.parent));\\n            fThrough = $bm_sub(thisLayer.parent.fromWorld(fThrough), thisLayer.parent.anchorPoint);\\n        }\\n    }\\n    return fThrough;\\n}\\nfunction followThrough() {\\n    var propSpeed = length(velocity);\\n    if (propSpeed < threshold)\\n        return followThroughAtTime($bm_sub(time, overlapDuration));\\n    var fThrough = zeroValue;\\n    var t = time;\\n    while (t > 0) {\\n        t = $bm_sub(t, thisComp.frameDuration);\\n        if (simulate)\\n            propSpeed = getPropWorldSpeed($bm_sub(t, overlapDuration), thisProperty);\\n        else\\n            propSpeed = length(velocityAtTime(t));\\n        if (propSpeed < threshold) {\\n            fThrough = followThroughAtTime($bm_sub(t, overlapDuration));\\n            break;\\n        }\\n    }\\n    return linear(time, t, $bm_sum(t, $bm_mul(anticipationDuration, 2)), fThrough, zeroValue);\\n}\\nfunction smartSmooth(axis) {\\n    var startKey = nearestKey(time);\\n    var endKey = startKey;\\n    if (time == startKey.time)\\n        return 0;\\n    if (time < startKey.time && startKey.index == 1)\\n        return 0;\\n    if (time > startKey.time && startKey.index == numKeys)\\n        return 0;\\n    if (time < startKey.time)\\n        startKey = key($bm_sub(startKey.index, 1));\\n    if (time > startKey.time)\\n        endKey = key($bm_sum(startKey.index, 1));\\n    var sI = 0.66;\\n    var sO = 0.33;\\n    var sIV = 1;\\n    var sOV = 0;\\n    var sVal = startKey.value;\\n    var eVal = endKey.value;\\n    if ($bm_isInstanceOfArray(value)) {\\n        sVal = sVal[axis];\\n        eVal = eVal[axis];\\n    }\\n    var sTime = startKey.time;\\n    var eTime = endKey.time;\\n    if (isKeyTop(startKey, axis))\\n        sO = slowOut;\\n    else {\\n        var prevKey = key($bm_sub(startKey.index, 1));\\n        var pVal = prevKey.value;\\n        if ($bm_isInstanceOfArray(value))\\n            pVal = pVal[axis];\\n        sOV = $bm_div($bm_sub(sVal, pVal), $bm_sub(eVal, pVal));\\n    }\\n    if (isKeyTop(endKey, axis)) {\\n        sI = slowIn;\\n        if (endKey.index != numKeys) {\\n            var nextKey = key($bm_sum(endKey.index, 1));\\n            var nVal = nextKey.value;\\n            if ($bm_isInstanceOfArray(value))\\n                nVal = nVal[axis];\\n            if (Math.abs(nVal - eVal) < 0.01 && doFollowThrough)\\n                sI = 1;\\n        }\\n    } else {\\n        var nextKey = key($bm_sum(endKey.index, 1));\\n        var nVal = nextKey.value;\\n        if ($bm_isInstanceOfArray(value))\\n            nVal = nVal[axis];\\n        sIV = $bm_div($bm_sub(eVal, sVal), $bm_sub(nVal, sVal));\\n    }\\n    if (endKey.index == numKeys && doFollowThrough) {\\n        sI = 1;\\n    }\\n    var val = value;\\n    if ($bm_isInstanceOfArray(value))\\n        val = val[axis];\\n    return $bm_sub(bezierInterpolation(time, sTime, eTime, sVal, eVal, [\\n        sO,\\n        sOV,\\n        sI,\\n        sIV\\n    ]), val);\\n}\\nfunction overlap() {\\n    var ol = zeroValue;\\n    if (isThisPosition && !hasParent)\\n        return zeroValue;\\n    ol = $bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisProperty), getPropWorldValue(time, thisProperty));\\n    var motionRatio = $bm_div($bm_div(length(zeroValue, ol), thisLayer.width), 2);\\n    if (isThisPosition) {\\n        var originalDistance = length(valueAtTime(0));\\n        motionRatio = $bm_div(length(zeroValue, ol), thisComp.width);\\n    }\\n    ol = $bm_sum(ol, getPropWorldValue(time, thisProperty));\\n    ol = $bm_sum(ol, $bm_mul($bm_mul($bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisLayer.anchorPoint), ol), motionRatio), flexibility));\\n    ol = thisLayer.fromWorld(ol);\\n    if (!isThisPosition)\\n        ol = $bm_sub(ol, value);\\n    else {\\n        ol = linear(flexibility, 0, 100, $bm_div(ol, 2), 0);\\n        var prevParentWorldPos = getLayerWorldPos($bm_sub(time, overlapDuration), parent);\\n        ol = $bm_sum(ol, $bm_mul($bm_mul($bm_mul(thisLayer.fromWorld(prevParentWorldPos), motionRatio), flexibility), 5));\\n    }\\n    return ol;\\n}\\nvar okToGo = false;\\nif (simulate && fx.enabled)\\n    okToGo = true;\\nelse if (numKeys > 1 && fx.enabled)\\n    okToGo = true;\\nif (okToGo) {\\n    var smartSmoothResult = zeroValue;\\n    if (doInterpolation) {\\n        if ($bm_isInstanceOfArray(value)) {\\n            if (value.length == 2)\\n                smartSmoothResult = [\\n                    smartSmooth(0),\\n                    smartSmooth(1)\\n                ];\\n            else if (value.length == 3)\\n                smartSmoothResult = [\\n                    smartSmooth(0),\\n                    smartSmooth(1),\\n                    smartSmooth(2)\\n                ];\\n            else if (value.length == 4)\\n                smartSmoothResult = [\\n                    smartSmooth(0),\\n                    smartSmooth(1),\\n                    smartSmooth(2),\\n                    smartSmooth(3)\\n                ];\\n        } else {\\n            smartSmoothResult = smartSmooth(0);\\n        }\\n    }\\n    if (doAnticipation)\\n        result = $bm_sum(result, anticipate());\\n    result = $bm_sum(result, smartSmoothResult);\\n    if (doFollowThrough)\\n        result = $bm_sum(result, followThrough());\\n    if (doOverlap)\\n        result = $bm_sum(result, overlap());\\n}\\n$bm_rt = result;"},"r":{"a":1,"k":[{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":17,"s":[0]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":22.5,"s":[10]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":28,"s":[0]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":33.5,"s":[10]},{"t":39,"s":[0]}],"ix":6,"x":"var $bm_rt;\\nvar fx = effect(\'ŝlosilo pli pura 4\');\\nvar doAnticipation = fx(1).value;\\nvar doInterpolation = fx(2).value;\\nvar doFollowThrough = fx(3).value;\\nvar damping = $bm_div(fx(15).value, 10);\\nvar elasticity = $bm_div(fx(13).value, 10);\\nvar bounce = fx(17).value;\\nvar anticipationDuration = fx(5).value;\\nvar anticipationQuantity = $bm_div(fx(6).value, 100);\\nvar slowIn = $bm_div(fx(9).value, 100);\\nvar slowOut = $bm_div(fx(10).value, 100);\\nvar spatialMode = fx(21).value;\\nvar spatialDoInterpolation = fx(20).value;\\nvar moBlurPrecision = fx(32).value;\\nvar elasticityRandom = fx(14).value;\\nvar dampingRandom = fx(16).value;\\nvar softBody = fx(28).value;\\nvar flexibility = $bm_div(fx(29).value, 100);\\nvar doOverlap = fx(23).value;\\nvar overlapDuration = fx(24).value;\\nvar overlapRandom = fx(25).value;\\nvar threshold = $bm_div($bm_div(1, moBlurPrecision), 1000);\\nvar zeroValue;\\nif ($bm_isInstanceOfArray(value)) {\\n    if (value.length == 2)\\n        zeroValue = [\\n            0,\\n            0\\n        ];\\n    else if (value.length == 3)\\n        zeroValue = [\\n            0,\\n            0,\\n            0\\n        ];\\n    else if (value.length == 4)\\n        zeroValue = [\\n            0,\\n            0,\\n            0,\\n            0\\n        ];\\n} else\\n    zeroValue = 0;\\nvar isThisSpatial = isSpatial(thisProperty);\\nvar isThisPosition = thisProperty === $bm_transform.position;\\nvar simulate = false;\\nif (isThisSpatial) {\\n    doInterpolation = doInterpolation && spatialDoInterpolation;\\n    if (isThisPosition && thisProperty.numKeys > 0) {\\n        doOverlap = false;\\n        simulate = false;\\n    } else {\\n        simulate = spatialMode == 2;\\n        doOverlap = overlapDuration != 0 && doOverlap && simulate;\\n    }\\n} else {\\n    doOverlap = false;\\n}\\nif (!doOverlap) {\\n    overlapDuration = 0;\\n}\\nif (simulate && softBody && isThisSpatial && !isThisPosition && (doFollowThrough || doOverlap)) {\\n    var distanceRatio = $bm_div(length(valueAtTime(0), $bm_transform.anchorPoint), $bm_div(thisLayer.width, 2));\\n    distanceRatio = $bm_div($bm_sum(1, $bm_mul(distanceRatio, flexibility)), 2);\\n    if (doFollowThrough) {\\n        elasticity = $bm_div(elasticity, distanceRatio);\\n        damping = $bm_div(damping, distanceRatio);\\n    }\\n    if (doOverlap) {\\n        overlapDuration = $bm_mul(overlapDuration, distanceRatio);\\n    }\\n}\\nseedRandom(0, true);\\nif (doFollowThrough) {\\n    if (elasticityRandom > 0)\\n        elasticity = addNoise(elasticity, elasticityRandom);\\n    if (dampingRandom > 0)\\n        damping = addNoise(damping, dampingRandom);\\n}\\nif (doOverlap) {\\n    if (doOverlap && overlapRandom > 0)\\n        overlapDuration = addNoise(overlapDuration, overlapRandom);\\n}\\nvar result = value;\\nfunction isSpatial(prop) {\\n    if (!(prop.value instanceof Array))\\n        return false;\\n    if (prop.value.length != 2 && prop.value.length != 3)\\n        return false;\\n    try {\\n        if (typeof prop.speed !== \'undefined\')\\n            return true;\\n    } catch (e) {\\n        return false;\\n    }\\n}\\nfunction addNoise(val, quantity) {\\n    var randomValue = random(0.9, 1.1);\\n    var noiseValue = noise($bm_mul(valueAtTime(0), randomValue));\\n    noiseValue = $bm_mul(noiseValue, $bm_div(quantity, 100));\\n    return $bm_mul(val, $bm_sum(noiseValue, 1));\\n}\\nfunction isAfterLastKey() {\\n    if (numKeys == 0)\\n        return false;\\n    var nKey = nearestKey(time);\\n    return nKey.time <= time && nKey.index == numKeys;\\n}\\nfunction isStill(t, threshold) {\\n    var d = $bm_sub(valueAtTime(t), valueAtTime($bm_sum(t, framesToTime(1))));\\n    if ($bm_isInstanceOfArray(d)) {\\n        for (var i = 0; i < d.length; i++) {\\n            d[i] = Math.abs(d[i]);\\n            if (d[i] >= threshold) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    } else {\\n        d = Math.abs(d);\\n        return d < threshold;\\n    }\\n}\\nfunction bezierInterpolation(t, tMin, tMax, value1, value2, bezierPoints) {\\n    if (arguments.length !== 5 && arguments.length !== 6)\\n        return t;\\n    var a = $bm_sub(value2, value1);\\n    var b = $bm_sub(tMax, tMin);\\n    if (b == 0)\\n        return t;\\n    var c = clamp($bm_div($bm_sub(t, tMin), b), 0, 1);\\n    if (!(bezierPoints instanceof Array) || bezierPoints.length !== 4)\\n        bezierPoints = [\\n            0.33,\\n            0,\\n            0.66,\\n            1\\n        ];\\n    return $bm_sum($bm_mul(a, h(c, bezierPoints)), value1);\\n    function h(f, g) {\\n        var x = $bm_mul(3, g[0]);\\n        var j = $bm_sub($bm_mul(3, $bm_sub(g[2], g[0])), x);\\n        var k = $bm_sub($bm_sub(1, x), j);\\n        var l = $bm_mul(3, g[1]);\\n        var m = $bm_sub($bm_mul(3, $bm_sub(g[3], g[1])), l);\\n        var n = $bm_sub($bm_sub(1, l), m);\\n        var d = f;\\n        for (var i = 0; i < 5; i++) {\\n            var z = $bm_sub($bm_mul(d, $bm_sum(x, $bm_mul(d, $bm_sum(j, $bm_mul(d, k))))), f);\\n            if (Math.abs(z) < 0.001)\\n                break;\\n            d = $bm_sub(d, $bm_div(z, $bm_sum(x, $bm_mul(d, $bm_sum($bm_mul(2, j), $bm_mul($bm_mul(3, k), d))))));\\n        }\\n        return $bm_mul(d, $bm_sum(l, $bm_mul(d, $bm_sum(m, $bm_mul(d, n)))));\\n    }\\n}\\nfunction getPropWorldSpeed(t, prop) {\\n    return length(getPropWorldVelocity(t, prop));\\n}\\nfunction getPrevKey(t) {\\n    if (numKeys == 0)\\n        return null;\\n    var nKey = nearestKey(t);\\n    if (nKey.time <= t)\\n        return nKey;\\n    if (nKey.index > 1)\\n        return key($bm_sub(nKey.index, 1));\\n    return null;\\n}\\nfunction getNextKey(t) {\\n    if (numKeys == 0)\\n        return null;\\n    var nKey = nearestKey(t);\\n    if (nKey.time >= t)\\n        return nKey;\\n    if (nKey.index < numKeys)\\n        return key($bm_sum(nKey.index, 1));\\n    return null;\\n}\\nfunction getPropWorldVelocity(t, prop) {\\n    return $bm_mul($bm_sub(getPropWorldValue($bm_sum(t, 0.005), prop), getPropWorldValue($bm_sub(t, 0.005), prop)), 100);\\n}\\nfunction getLayerWorldPos(t, l) {\\n    return l.toWorld(l.anchorPoint, t);\\n}\\nfunction getPropWorldValue(t, prop) {\\n    if (isPosition(prop))\\n        return getLayerWorldPos(t, thisLayer);\\n    return thisLayer.toWorld(prop.valueAtTime(t), t);\\n}\\nfunction isPosition(prop) {\\n    return prop === $bm_transform.position;\\n}\\nfunction isKeyTop(k, axis) {\\n    var prevSpeed = velocityAtTime($bm_sub(k.time, threshold));\\n    var nextSpeed = velocityAtTime($bm_sum(k.time, threshold));\\n    if ($bm_isInstanceOfArray(value)) {\\n        prevSpeed = prevSpeed[axis];\\n        nextSpeed = nextSpeed[axis];\\n    }\\n    if (Math.abs(prevSpeed) < 0.01 || Math.abs(nextSpeed) < 0.01)\\n        return true;\\n    return $bm_mul(prevSpeed, nextSpeed) < 0;\\n}\\nfunction anticipate() {\\n    var anticipation = zeroValue;\\n    if (isAfterLastKey())\\n        return anticipation;\\n    if (numKeys < 2)\\n        return anticipation;\\n    var nextKey = getNextKey(time);\\n    var aKey = nextKey;\\n    if (!isStill(aKey.time - 0.1, 0.1)) {\\n        aKey = getPrevKey(time);\\n        if (!isStill(aKey.time - 0.1, 0.1))\\n            return anticipation;\\n    }\\n    if (aKey.index == numKeys)\\n        return anticipation;\\n    var anticipationMiddle = aKey.time;\\n    var anticipationStart = $bm_sub(anticipationMiddle, anticipationDuration);\\n    var anticipationEnd = key(aKey.index + 1).time;\\n    var startValue = anticipation;\\n    var midValue = $bm_mul($bm_sum($bm_neg(valueAtTime($bm_sum(anticipationMiddle, anticipationDuration))), aKey.value), anticipationQuantity);\\n    var endValue = anticipation;\\n    if (time < anticipationStart) {\\n        return anticipation;\\n    } else if (time < anticipationMiddle) {\\n        if ($bm_isInstanceOfArray(value)) {\\n            for (var i = 0; i < value.length; i++) {\\n                anticipation[i] = bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue[i], midValue[i], [\\n                    slowOut,\\n                    0,\\n                    slowIn,\\n                    1\\n                ]);\\n            }\\n            return anticipation;\\n        } else {\\n            return bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue, midValue, [\\n                slowOut,\\n                0,\\n                slowIn,\\n                1\\n            ]);\\n        }\\n    } else if (time <= anticipationEnd) {\\n        if ($bm_isInstanceOfArray(value)) {\\n            for (var i = 0; i < value.length; i++) {\\n                anticipation[i] = bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue[i], endValue[i], [\\n                    slowOut,\\n                    0,\\n                    slowIn,\\n                    1\\n                ]);\\n            }\\n            return anticipation;\\n        } else {\\n            return bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue, endValue, [\\n                slowOut,\\n                0,\\n                slowIn,\\n                1\\n            ]);\\n        }\\n    } else {\\n        return anticipation;\\n    }\\n}\\nfunction followThroughAtTime(t) {\\n    var fThrough = zeroValue;\\n    if (elasticity == 0)\\n        return fThrough;\\n    var propSpeed;\\n    if (!simulate) {\\n        if (numKeys < 2)\\n            return fThrough;\\n        if (nearestKey(t).index == 1)\\n            return fThrough;\\n        propSpeed = length(velocityAtTime(t));\\n        if (propSpeed >= threshold)\\n            return fThrough;\\n    } else {\\n        propSpeed = getPropWorldSpeed(t, thisProperty);\\n        if (propSpeed >= threshold)\\n            return fThrough;\\n    }\\n    var fThroughStart = 0;\\n    var fThroughTime = 0;\\n    if (simulate) {\\n        var speedI = getPropWorldSpeed(t, thisProperty);\\n        var i = t;\\n        while (speedI < threshold && i > 0) {\\n            i = $bm_sub(i, $bm_div(thisComp.frameDuration, moBlurPrecision));\\n            speedI = getPropWorldSpeed(i, thisProperty);\\n        }\\n        fThroughStart = i;\\n    } else {\\n        var fThroughKey = getPrevKey(t);\\n        fThroughStart = fThroughKey.time;\\n    }\\n    if (fThroughStart == 0)\\n        return fThrough;\\n    fThroughTime = $bm_sub(t, fThroughStart);\\n    if (simulate)\\n        fThrough = $bm_div(getPropWorldVelocity($bm_sub(fThroughStart, thisComp.frameDuration), thisProperty), 2);\\n    else\\n        fThrough = $bm_div(velocityAtTime($bm_sub(fThroughStart, thisComp.frameDuration)), 2);\\n    if (bounce) {\\n        var cycleDamp = Math.exp($bm_mul($bm_mul(fThroughTime, damping), 0.1));\\n        var damp = $bm_div(Math.exp($bm_mul(fThroughTime, damping)), $bm_div(elasticity, 2));\\n        var cycleDuration = $bm_div(1, $bm_mul(elasticity, 2));\\n        cycleDuration = Math.round(timeToFrames(cycleDuration));\\n        cycleDuration = framesToTime(cycleDuration);\\n        var midDuration = $bm_div(cycleDuration, 2);\\n        var maxValue = $bm_mul(fThrough, midDuration);\\n        var cycvarime = fThroughTime;\\n        var numEndCycles = 1;\\n        while (cycvarime > cycleDuration) {\\n            cycvarime = $bm_sub(cycvarime, cycleDuration);\\n            cycleDuration = $bm_div(cycleDuration, cycleDamp);\\n            cycleDuration = Math.round(timeToFrames(cycleDuration));\\n            if (cycleDuration < 2) {\\n                cycleDuration = 2;\\n                numEndCycles++;\\n            }\\n            cycleDuration = framesToTime(cycleDuration);\\n            midDuration = $bm_div(cycleDuration, 2);\\n            maxValue = $bm_div($bm_mul(fThrough, midDuration), damp);\\n            if (numEndCycles > 100 / damping && maxValue < threshold)\\n                return zeroValue;\\n        }\\n        if (cycvarime < midDuration)\\n            fThrough = bezierInterpolation(cycvarime, 0, midDuration, 0, maxValue, [\\n                0,\\n                0.1,\\n                slowIn,\\n                1\\n            ]);\\n        else\\n            fThrough = bezierInterpolation(cycvarime, midDuration, cycleDuration, maxValue, 0, [\\n                $bm_sub(1, slowIn),\\n                0,\\n                1,\\n                0.9\\n            ]);\\n    } else {\\n        var damp = Math.exp($bm_mul(fThroughTime, damping));\\n        var sinus = $bm_mul($bm_mul($bm_mul(elasticity, fThroughTime), 2), Math.PI);\\n        sinus = Math.sin(sinus);\\n        sinus = $bm_mul($bm_div(0.3, elasticity), sinus);\\n        sinus = $bm_div(sinus, damp);\\n        if (Math.abs(sinus) < $bm_div(threshold, 100))\\n            return 0;\\n        fThrough = $bm_mul(fThrough, sinus);\\n        if (threshold > 0) {\\n            fThrough = $bm_mul(fThrough, $bm_sub(1, $bm_div(propSpeed, threshold)));\\n        }\\n    }\\n    if (bounce) {\\n        var prevValue = valueAtTime($bm_sub(fThroughStart, thisComp.frameDuration));\\n        var startValue = valueAtTime(fThroughStart);\\n        if ($bm_isInstanceOfArray(value)) {\\n            for (var i = 0; i < prevValue.length; i++) {\\n                if (prevValue[i] > startValue[i])\\n                    fThrough[i] = Math.abs(fThrough[i]);\\n                if (prevValue[i] < startValue[i])\\n                    fThrough[i] = $bm_neg(Math.abs(fThrough[i]));\\n            }\\n        } else {\\n            if (prevValue > startValue)\\n                fThrough = Math.abs(fThrough);\\n            if (prevValue < startValue)\\n                fThrough = $bm_neg(Math.abs(fThrough));\\n        }\\n    }\\n    if (simulate) {\\n        if (!isThisPosition) {\\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer));\\n            fThrough = $bm_sub(thisLayer.fromWorld(fThrough), thisLayer.anchorPoint);\\n        } else if (thisLayer.hasParent) {\\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer.parent));\\n            fThrough = $bm_sub(thisLayer.parent.fromWorld(fThrough), thisLayer.parent.anchorPoint);\\n        }\\n    }\\n    return fThrough;\\n}\\nfunction followThrough() {\\n    var propSpeed = length(velocity);\\n    if (propSpeed < threshold)\\n        return followThroughAtTime($bm_sub(time, overlapDuration));\\n    var fThrough = zeroValue;\\n    var t = time;\\n    while (t > 0) {\\n        t = $bm_sub(t, thisComp.frameDuration);\\n        if (simulate)\\n            propSpeed = getPropWorldSpeed($bm_sub(t, overlapDuration), thisProperty);\\n        else\\n            propSpeed = length(velocityAtTime(t));\\n        if (propSpeed < threshold) {\\n            fThrough = followThroughAtTime($bm_sub(t, overlapDuration));\\n            break;\\n        }\\n    }\\n    return linear(time, t, $bm_sum(t, $bm_mul(anticipationDuration, 2)), fThrough, zeroValue);\\n}\\nfunction smartSmooth(axis) {\\n    var startKey = nearestKey(time);\\n    var endKey = startKey;\\n    if (time == startKey.time)\\n        return 0;\\n    if (time < startKey.time && startKey.index == 1)\\n        return 0;\\n    if (time > startKey.time && startKey.index == numKeys)\\n        return 0;\\n    if (time < startKey.time)\\n        startKey = key($bm_sub(startKey.index, 1));\\n    if (time > startKey.time)\\n        endKey = key($bm_sum(startKey.index, 1));\\n    var sI = 0.66;\\n    var sO = 0.33;\\n    var sIV = 1;\\n    var sOV = 0;\\n    var sVal = startKey.value;\\n    var eVal = endKey.value;\\n    if ($bm_isInstanceOfArray(value)) {\\n        sVal = sVal[axis];\\n        eVal = eVal[axis];\\n    }\\n    var sTime = startKey.time;\\n    var eTime = endKey.time;\\n    if (isKeyTop(startKey, axis))\\n        sO = slowOut;\\n    else {\\n        var prevKey = key($bm_sub(startKey.index, 1));\\n        var pVal = prevKey.value;\\n        if ($bm_isInstanceOfArray(value))\\n            pVal = pVal[axis];\\n        sOV = $bm_div($bm_sub(sVal, pVal), $bm_sub(eVal, pVal));\\n    }\\n    if (isKeyTop(endKey, axis)) {\\n        sI = slowIn;\\n        if (endKey.index != numKeys) {\\n            var nextKey = key($bm_sum(endKey.index, 1));\\n            var nVal = nextKey.value;\\n            if ($bm_isInstanceOfArray(value))\\n                nVal = nVal[axis];\\n            if (Math.abs(nVal - eVal) < 0.01 && doFollowThrough)\\n                sI = 1;\\n        }\\n    } else {\\n        var nextKey = key($bm_sum(endKey.index, 1));\\n        var nVal = nextKey.value;\\n        if ($bm_isInstanceOfArray(value))\\n            nVal = nVal[axis];\\n        sIV = $bm_div($bm_sub(eVal, sVal), $bm_sub(nVal, sVal));\\n    }\\n    if (endKey.index == numKeys && doFollowThrough) {\\n        sI = 1;\\n    }\\n    var val = value;\\n    if ($bm_isInstanceOfArray(value))\\n        val = val[axis];\\n    return $bm_sub(bezierInterpolation(time, sTime, eTime, sVal, eVal, [\\n        sO,\\n        sOV,\\n        sI,\\n        sIV\\n    ]), val);\\n}\\nfunction overlap() {\\n    var ol = zeroValue;\\n    if (isThisPosition && !hasParent)\\n        return zeroValue;\\n    ol = $bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisProperty), getPropWorldValue(time, thisProperty));\\n    var motionRatio = $bm_div($bm_div(length(zeroValue, ol), thisLayer.width), 2);\\n    if (isThisPosition) {\\n        var originalDistance = length(valueAtTime(0));\\n        motionRatio = $bm_div(length(zeroValue, ol), thisComp.width);\\n    }\\n    ol = $bm_sum(ol, getPropWorldValue(time, thisProperty));\\n    ol = $bm_sum(ol, $bm_mul($bm_mul($bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisLayer.anchorPoint), ol), motionRatio), flexibility));\\n    ol = thisLayer.fromWorld(ol);\\n    if (!isThisPosition)\\n        ol = $bm_sub(ol, value);\\n    else {\\n        ol = linear(flexibility, 0, 100, $bm_div(ol, 2), 0);\\n        var prevParentWorldPos = getLayerWorldPos($bm_sub(time, overlapDuration), parent);\\n        ol = $bm_sum(ol, $bm_mul($bm_mul($bm_mul(thisLayer.fromWorld(prevParentWorldPos), motionRatio), flexibility), 5));\\n    }\\n    return ol;\\n}\\nvar okToGo = false;\\nif (simulate && fx.enabled)\\n    okToGo = true;\\nelse if (numKeys > 1 && fx.enabled)\\n    okToGo = true;\\nif (okToGo) {\\n    var smartSmoothResult = zeroValue;\\n    if (doInterpolation) {\\n        if ($bm_isInstanceOfArray(value)) {\\n            if (value.length == 2)\\n                smartSmoothResult = [\\n                    smartSmooth(0),\\n                    smartSmooth(1)\\n                ];\\n            else if (value.length == 3)\\n                smartSmoothResult = [\\n                    smartSmooth(0),\\n                    smartSmooth(1),\\n                    smartSmooth(2)\\n                ];\\n            else if (value.length == 4)\\n                smartSmoothResult = [\\n                    smartSmooth(0),\\n                    smartSmooth(1),\\n                    smartSmooth(2),\\n                    smartSmooth(3)\\n                ];\\n        } else {\\n            smartSmoothResult = smartSmooth(0);\\n        }\\n    }\\n    if (doAnticipation)\\n        result = $bm_sum(result, anticipate());\\n    result = $bm_sum(result, smartSmoothResult);\\n    if (doFollowThrough)\\n        result = $bm_sum(result, followThrough());\\n    if (doOverlap)\\n        result = $bm_sum(result, overlap());\\n}\\n$bm_rt = result;"},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4,"x":"var $bm_rt;\\nvar fx = effect(\'ŝlosilo pli pura 3\');\\nvar doAnticipation = fx(1).value;\\nvar doInterpolation = fx(2).value;\\nvar doFollowThrough = fx(3).value;\\nvar damping = $bm_div(fx(15).value, 10);\\nvar elasticity = $bm_div(fx(13).value, 10);\\nvar bounce = fx(17).value;\\nvar anticipationDuration = fx(5).value;\\nvar anticipationQuantity = $bm_div(fx(6).value, 100);\\nvar slowIn = $bm_div(fx(9).value, 100);\\nvar slowOut = $bm_div(fx(10).value, 100);\\nvar spatialMode = fx(21).value;\\nvar spatialDoInterpolation = fx(20).value;\\nvar moBlurPrecision = fx(32).value;\\nvar elasticityRandom = fx(14).value;\\nvar dampingRandom = fx(16).value;\\nvar softBody = fx(28).value;\\nvar flexibility = $bm_div(fx(29).value, 100);\\nvar doOverlap = fx(23).value;\\nvar overlapDuration = fx(24).value;\\nvar overlapRandom = fx(25).value;\\nvar threshold = $bm_div($bm_div(1, moBlurPrecision), 1000);\\nvar zeroValue;\\nif ($bm_isInstanceOfArray(value)) {\\n    if (value.length == 2)\\n        zeroValue = [\\n            0,\\n            0\\n        ];\\n    else if (value.length == 3)\\n        zeroValue = [\\n            0,\\n            0,\\n            0\\n        ];\\n    else if (value.length == 4)\\n        zeroValue = [\\n            0,\\n            0,\\n            0,\\n            0\\n        ];\\n} else\\n    zeroValue = 0;\\nvar isThisSpatial = isSpatial(thisProperty);\\nvar isThisPosition = thisProperty === $bm_transform.position;\\nvar simulate = false;\\nif (isThisSpatial) {\\n    doInterpolation = doInterpolation && spatialDoInterpolation;\\n    if (isThisPosition && thisProperty.numKeys > 0) {\\n        doOverlap = false;\\n        simulate = false;\\n    } else {\\n        simulate = spatialMode == 2;\\n        doOverlap = overlapDuration != 0 && doOverlap && simulate;\\n    }\\n} else {\\n    doOverlap = false;\\n}\\nif (!doOverlap) {\\n    overlapDuration = 0;\\n}\\nif (simulate && softBody && isThisSpatial && !isThisPosition && (doFollowThrough || doOverlap)) {\\n    var distanceRatio = $bm_div(length(valueAtTime(0), $bm_transform.anchorPoint), $bm_div(thisLayer.width, 2));\\n    distanceRatio = $bm_div($bm_sum(1, $bm_mul(distanceRatio, flexibility)), 2);\\n    if (doFollowThrough) {\\n        elasticity = $bm_div(elasticity, distanceRatio);\\n        damping = $bm_div(damping, distanceRatio);\\n    }\\n    if (doOverlap) {\\n        overlapDuration = $bm_mul(overlapDuration, distanceRatio);\\n    }\\n}\\nseedRandom(0, true);\\nif (doFollowThrough) {\\n    if (elasticityRandom > 0)\\n        elasticity = addNoise(elasticity, elasticityRandom);\\n    if (dampingRandom > 0)\\n        damping = addNoise(damping, dampingRandom);\\n}\\nif (doOverlap) {\\n    if (doOverlap && overlapRandom > 0)\\n        overlapDuration = addNoise(overlapDuration, overlapRandom);\\n}\\nvar result = value;\\nfunction isSpatial(prop) {\\n    if (!(prop.value instanceof Array))\\n        return false;\\n    if (prop.value.length != 2 && prop.value.length != 3)\\n        return false;\\n    try {\\n        if (typeof prop.speed !== \'undefined\')\\n            return true;\\n    } catch (e) {\\n        return false;\\n    }\\n}\\nfunction addNoise(val, quantity) {\\n    var randomValue = random(0.9, 1.1);\\n    var noiseValue = noise($bm_mul(valueAtTime(0), randomValue));\\n    noiseValue = $bm_mul(noiseValue, $bm_div(quantity, 100));\\n    return $bm_mul(val, $bm_sum(noiseValue, 1));\\n}\\nfunction isAfterLastKey() {\\n    if (numKeys == 0)\\n        return false;\\n    var nKey = nearestKey(time);\\n    return nKey.time <= time && nKey.index == numKeys;\\n}\\nfunction isStill(t, threshold) {\\n    var d = $bm_sub(valueAtTime(t), valueAtTime($bm_sum(t, framesToTime(1))));\\n    if ($bm_isInstanceOfArray(d)) {\\n        for (var i = 0; i < d.length; i++) {\\n            d[i] = Math.abs(d[i]);\\n            if (d[i] >= threshold) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    } else {\\n        d = Math.abs(d);\\n        return d < threshold;\\n    }\\n}\\nfunction bezierInterpolation(t, tMin, tMax, value1, value2, bezierPoints) {\\n    if (arguments.length !== 5 && arguments.length !== 6)\\n        return t;\\n    var a = $bm_sub(value2, value1);\\n    var b = $bm_sub(tMax, tMin);\\n    if (b == 0)\\n        return t;\\n    var c = clamp($bm_div($bm_sub(t, tMin), b), 0, 1);\\n    if (!(bezierPoints instanceof Array) || bezierPoints.length !== 4)\\n        bezierPoints = [\\n            0.33,\\n            0,\\n            0.66,\\n            1\\n        ];\\n    return $bm_sum($bm_mul(a, h(c, bezierPoints)), value1);\\n    function h(f, g) {\\n        var x = $bm_mul(3, g[0]);\\n        var j = $bm_sub($bm_mul(3, $bm_sub(g[2], g[0])), x);\\n        var k = $bm_sub($bm_sub(1, x), j);\\n        var l = $bm_mul(3, g[1]);\\n        var m = $bm_sub($bm_mul(3, $bm_sub(g[3], g[1])), l);\\n        var n = $bm_sub($bm_sub(1, l), m);\\n        var d = f;\\n        for (var i = 0; i < 5; i++) {\\n            var z = $bm_sub($bm_mul(d, $bm_sum(x, $bm_mul(d, $bm_sum(j, $bm_mul(d, k))))), f);\\n            if (Math.abs(z) < 0.001)\\n                break;\\n            d = $bm_sub(d, $bm_div(z, $bm_sum(x, $bm_mul(d, $bm_sum($bm_mul(2, j), $bm_mul($bm_mul(3, k), d))))));\\n        }\\n        return $bm_mul(d, $bm_sum(l, $bm_mul(d, $bm_sum(m, $bm_mul(d, n)))));\\n    }\\n}\\nfunction getPropWorldSpeed(t, prop) {\\n    return length(getPropWorldVelocity(t, prop));\\n}\\nfunction getPrevKey(t) {\\n    if (numKeys == 0)\\n        return null;\\n    var nKey = nearestKey(t);\\n    if (nKey.time <= t)\\n        return nKey;\\n    if (nKey.index > 1)\\n        return key($bm_sub(nKey.index, 1));\\n    return null;\\n}\\nfunction getNextKey(t) {\\n    if (numKeys == 0)\\n        return null;\\n    var nKey = nearestKey(t);\\n    if (nKey.time >= t)\\n        return nKey;\\n    if (nKey.index < numKeys)\\n        return key($bm_sum(nKey.index, 1));\\n    return null;\\n}\\nfunction getPropWorldVelocity(t, prop) {\\n    return $bm_mul($bm_sub(getPropWorldValue($bm_sum(t, 0.005), prop), getPropWorldValue($bm_sub(t, 0.005), prop)), 100);\\n}\\nfunction getLayerWorldPos(t, l) {\\n    return l.toWorld(l.anchorPoint, t);\\n}\\nfunction getPropWorldValue(t, prop) {\\n    if (isPosition(prop))\\n        return getLayerWorldPos(t, thisLayer);\\n    return thisLayer.toWorld(prop.valueAtTime(t), t);\\n}\\nfunction isPosition(prop) {\\n    return prop === $bm_transform.position;\\n}\\nfunction isKeyTop(k, axis) {\\n    var prevSpeed = velocityAtTime($bm_sub(k.time, threshold));\\n    var nextSpeed = velocityAtTime($bm_sum(k.time, threshold));\\n    if ($bm_isInstanceOfArray(value)) {\\n        prevSpeed = prevSpeed[axis];\\n        nextSpeed = nextSpeed[axis];\\n    }\\n    if (Math.abs(prevSpeed) < 0.01 || Math.abs(nextSpeed) < 0.01)\\n        return true;\\n    return $bm_mul(prevSpeed, nextSpeed) < 0;\\n}\\nfunction anticipate() {\\n    var anticipation = zeroValue;\\n    if (isAfterLastKey())\\n        return anticipation;\\n    if (numKeys < 2)\\n        return anticipation;\\n    var nextKey = getNextKey(time);\\n    var aKey = nextKey;\\n    if (!isStill(aKey.time - 0.1, 0.1)) {\\n        aKey = getPrevKey(time);\\n        if (!isStill(aKey.time - 0.1, 0.1))\\n            return anticipation;\\n    }\\n    if (aKey.index == numKeys)\\n        return anticipation;\\n    var anticipationMiddle = aKey.time;\\n    var anticipationStart = $bm_sub(anticipationMiddle, anticipationDuration);\\n    var anticipationEnd = key(aKey.index + 1).time;\\n    var startValue = anticipation;\\n    var midValue = $bm_mul($bm_sum($bm_neg(valueAtTime($bm_sum(anticipationMiddle, anticipationDuration))), aKey.value), anticipationQuantity);\\n    var endValue = anticipation;\\n    if (time < anticipationStart) {\\n        return anticipation;\\n    } else if (time < anticipationMiddle) {\\n        if ($bm_isInstanceOfArray(value)) {\\n            for (var i = 0; i < value.length; i++) {\\n                anticipation[i] = bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue[i], midValue[i], [\\n                    slowOut,\\n                    0,\\n                    slowIn,\\n                    1\\n                ]);\\n            }\\n            return anticipation;\\n        } else {\\n            return bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue, midValue, [\\n                slowOut,\\n                0,\\n                slowIn,\\n                1\\n            ]);\\n        }\\n    } else if (time <= anticipationEnd) {\\n        if ($bm_isInstanceOfArray(value)) {\\n            for (var i = 0; i < value.length; i++) {\\n                anticipation[i] = bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue[i], endValue[i], [\\n                    slowOut,\\n                    0,\\n                    slowIn,\\n                    1\\n                ]);\\n            }\\n            return anticipation;\\n        } else {\\n            return bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue, endValue, [\\n                slowOut,\\n                0,\\n                slowIn,\\n                1\\n            ]);\\n        }\\n    } else {\\n        return anticipation;\\n    }\\n}\\nfunction followThroughAtTime(t) {\\n    var fThrough = zeroValue;\\n    if (elasticity == 0)\\n        return fThrough;\\n    var propSpeed;\\n    if (!simulate) {\\n        if (numKeys < 2)\\n            return fThrough;\\n        if (nearestKey(t).index == 1)\\n            return fThrough;\\n        propSpeed = length(velocityAtTime(t));\\n        if (propSpeed >= threshold)\\n            return fThrough;\\n    } else {\\n        propSpeed = getPropWorldSpeed(t, thisProperty);\\n        if (propSpeed >= threshold)\\n            return fThrough;\\n    }\\n    var fThroughStart = 0;\\n    var fThroughTime = 0;\\n    if (simulate) {\\n        var speedI = getPropWorldSpeed(t, thisProperty);\\n        var i = t;\\n        while (speedI < threshold && i > 0) {\\n            i = $bm_sub(i, $bm_div(thisComp.frameDuration, moBlurPrecision));\\n            speedI = getPropWorldSpeed(i, thisProperty);\\n        }\\n        fThroughStart = i;\\n    } else {\\n        var fThroughKey = getPrevKey(t);\\n        fThroughStart = fThroughKey.time;\\n    }\\n    if (fThroughStart == 0)\\n        return fThrough;\\n    fThroughTime = $bm_sub(t, fThroughStart);\\n    if (simulate)\\n        fThrough = $bm_div(getPropWorldVelocity($bm_sub(fThroughStart, thisComp.frameDuration), thisProperty), 2);\\n    else\\n        fThrough = $bm_div(velocityAtTime($bm_sub(fThroughStart, thisComp.frameDuration)), 2);\\n    if (bounce) {\\n        var cycleDamp = Math.exp($bm_mul($bm_mul(fThroughTime, damping), 0.1));\\n        var damp = $bm_div(Math.exp($bm_mul(fThroughTime, damping)), $bm_div(elasticity, 2));\\n        var cycleDuration = $bm_div(1, $bm_mul(elasticity, 2));\\n        cycleDuration = Math.round(timeToFrames(cycleDuration));\\n        cycleDuration = framesToTime(cycleDuration);\\n        var midDuration = $bm_div(cycleDuration, 2);\\n        var maxValue = $bm_mul(fThrough, midDuration);\\n        var cycvarime = fThroughTime;\\n        var numEndCycles = 1;\\n        while (cycvarime > cycleDuration) {\\n            cycvarime = $bm_sub(cycvarime, cycleDuration);\\n            cycleDuration = $bm_div(cycleDuration, cycleDamp);\\n            cycleDuration = Math.round(timeToFrames(cycleDuration));\\n            if (cycleDuration < 2) {\\n                cycleDuration = 2;\\n                numEndCycles++;\\n            }\\n            cycleDuration = framesToTime(cycleDuration);\\n            midDuration = $bm_div(cycleDuration, 2);\\n            maxValue = $bm_div($bm_mul(fThrough, midDuration), damp);\\n            if (numEndCycles > 100 / damping && maxValue < threshold)\\n                return zeroValue;\\n        }\\n        if (cycvarime < midDuration)\\n            fThrough = bezierInterpolation(cycvarime, 0, midDuration, 0, maxValue, [\\n                0,\\n                0.1,\\n                slowIn,\\n                1\\n            ]);\\n        else\\n            fThrough = bezierInterpolation(cycvarime, midDuration, cycleDuration, maxValue, 0, [\\n                $bm_sub(1, slowIn),\\n                0,\\n                1,\\n                0.9\\n            ]);\\n    } else {\\n        var damp = Math.exp($bm_mul(fThroughTime, damping));\\n        var sinus = $bm_mul($bm_mul($bm_mul(elasticity, fThroughTime), 2), Math.PI);\\n        sinus = Math.sin(sinus);\\n        sinus = $bm_mul($bm_div(0.3, elasticity), sinus);\\n        sinus = $bm_div(sinus, damp);\\n        if (Math.abs(sinus) < $bm_div(threshold, 100))\\n            return 0;\\n        fThrough = $bm_mul(fThrough, sinus);\\n        if (threshold > 0) {\\n            fThrough = $bm_mul(fThrough, $bm_sub(1, $bm_div(propSpeed, threshold)));\\n        }\\n    }\\n    if (bounce) {\\n        var prevValue = valueAtTime($bm_sub(fThroughStart, thisComp.frameDuration));\\n        var startValue = valueAtTime(fThroughStart);\\n        if ($bm_isInstanceOfArray(value)) {\\n            for (var i = 0; i < prevValue.length; i++) {\\n                if (prevValue[i] > startValue[i])\\n                    fThrough[i] = Math.abs(fThrough[i]);\\n                if (prevValue[i] < startValue[i])\\n                    fThrough[i] = $bm_neg(Math.abs(fThrough[i]));\\n            }\\n        } else {\\n            if (prevValue > startValue)\\n                fThrough = Math.abs(fThrough);\\n            if (prevValue < startValue)\\n                fThrough = $bm_neg(Math.abs(fThrough));\\n        }\\n    }\\n    if (simulate) {\\n        if (!isThisPosition) {\\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer));\\n            fThrough = $bm_sub(thisLayer.fromWorld(fThrough), thisLayer.anchorPoint);\\n        } else if (thisLayer.hasParent) {\\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer.parent));\\n            fThrough = $bm_sub(thisLayer.parent.fromWorld(fThrough), thisLayer.parent.anchorPoint);\\n        }\\n    }\\n    return fThrough;\\n}\\nfunction followThrough() {\\n    var propSpeed = length(velocity);\\n    if (propSpeed < threshold)\\n        return followThroughAtTime($bm_sub(time, overlapDuration));\\n    var fThrough = zeroValue;\\n    var t = time;\\n    while (t > 0) {\\n        t = $bm_sub(t, thisComp.frameDuration);\\n        if (simulate)\\n            propSpeed = getPropWorldSpeed($bm_sub(t, overlapDuration), thisProperty);\\n        else\\n            propSpeed = length(velocityAtTime(t));\\n        if (propSpeed < threshold) {\\n            fThrough = followThroughAtTime($bm_sub(t, overlapDuration));\\n            break;\\n        }\\n    }\\n    return linear(time, t, $bm_sum(t, $bm_mul(anticipationDuration, 2)), fThrough, zeroValue);\\n}\\nfunction smartSmooth(axis) {\\n    var startKey = nearestKey(time);\\n    var endKey = startKey;\\n    if (time == startKey.time)\\n        return 0;\\n    if (time < startKey.time && startKey.index == 1)\\n        return 0;\\n    if (time > startKey.time && startKey.index == numKeys)\\n        return 0;\\n    if (time < startKey.time)\\n        startKey = key($bm_sub(startKey.index, 1));\\n    if (time > startKey.time)\\n        endKey = key($bm_sum(startKey.index, 1));\\n    var sI = 0.66;\\n    var sO = 0.33;\\n    var sIV = 1;\\n    var sOV = 0;\\n    var sVal = startKey.value;\\n    var eVal = endKey.value;\\n    if ($bm_isInstanceOfArray(value)) {\\n        sVal = sVal[axis];\\n        eVal = eVal[axis];\\n    }\\n    var sTime = startKey.time;\\n    var eTime = endKey.time;\\n    if (isKeyTop(startKey, axis))\\n        sO = slowOut;\\n    else {\\n        var prevKey = key($bm_sub(startKey.index, 1));\\n        var pVal = prevKey.value;\\n        if ($bm_isInstanceOfArray(value))\\n            pVal = pVal[axis];\\n        sOV = $bm_div($bm_sub(sVal, pVal), $bm_sub(eVal, pVal));\\n    }\\n    if (isKeyTop(endKey, axis)) {\\n        sI = slowIn;\\n        if (endKey.index != numKeys) {\\n            var nextKey = key($bm_sum(endKey.index, 1));\\n            var nVal = nextKey.value;\\n            if ($bm_isInstanceOfArray(value))\\n                nVal = nVal[axis];\\n            if (Math.abs(nVal - eVal) < 0.01 && doFollowThrough)\\n                sI = 1;\\n        }\\n    } else {\\n        var nextKey = key($bm_sum(endKey.index, 1));\\n        var nVal = nextKey.value;\\n        if ($bm_isInstanceOfArray(value))\\n            nVal = nVal[axis];\\n        sIV = $bm_div($bm_sub(eVal, sVal), $bm_sub(nVal, sVal));\\n    }\\n    if (endKey.index == numKeys && doFollowThrough) {\\n        sI = 1;\\n    }\\n    var val = value;\\n    if ($bm_isInstanceOfArray(value))\\n        val = val[axis];\\n    return $bm_sub(bezierInterpolation(time, sTime, eTime, sVal, eVal, [\\n        sO,\\n        sOV,\\n        sI,\\n        sIV\\n    ]), val);\\n}\\nfunction overlap() {\\n    var ol = zeroValue;\\n    if (isThisPosition && !hasParent)\\n        return zeroValue;\\n    ol = $bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisProperty), getPropWorldValue(time, thisProperty));\\n    var motionRatio = $bm_div($bm_div(length(zeroValue, ol), thisLayer.width), 2);\\n    if (isThisPosition) {\\n        var originalDistance = length(valueAtTime(0));\\n        motionRatio = $bm_div(length(zeroValue, ol), thisComp.width);\\n    }\\n    ol = $bm_sum(ol, getPropWorldValue(time, thisProperty));\\n    ol = $bm_sum(ol, $bm_mul($bm_mul($bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisLayer.anchorPoint), ol), motionRatio), flexibility));\\n    ol = thisLayer.fromWorld(ol);\\n    if (!isThisPosition)\\n        ol = $bm_sub(ol, value);\\n    else {\\n        ol = linear(flexibility, 0, 100, $bm_div(ol, 2), 0);\\n        var prevParentWorldPos = getLayerWorldPos($bm_sub(time, overlapDuration), parent);\\n        ol = $bm_sum(ol, $bm_mul($bm_mul($bm_mul(thisLayer.fromWorld(prevParentWorldPos), motionRatio), flexibility), 5));\\n    }\\n    return ol;\\n}\\nvar okToGo = false;\\nif (simulate && fx.enabled)\\n    okToGo = true;\\nelse if (numKeys > 1 && fx.enabled)\\n    okToGo = true;\\nif (okToGo) {\\n    var smartSmoothResult = zeroValue;\\n    if (doInterpolation) {\\n        if ($bm_isInstanceOfArray(value)) {\\n            if (value.length == 2)\\n                smartSmoothResult = [\\n                    smartSmooth(0),\\n                    smartSmooth(1)\\n                ];\\n            else if (value.length == 3)\\n                smartSmoothResult = [\\n                    smartSmooth(0),\\n                    smartSmooth(1),\\n                    smartSmooth(2)\\n                ];\\n            else if (value.length == 4)\\n                smartSmoothResult = [\\n                    smartSmooth(0),\\n                    smartSmooth(1),\\n                    smartSmooth(2),\\n                    smartSmooth(3)\\n                ];\\n        } else {\\n            smartSmoothResult = smartSmooth(0);\\n        }\\n    }\\n    if (doAnticipation)\\n        result = $bm_sum(result, anticipate());\\n    result = $bm_sum(result, smartSmoothResult);\\n    if (doFollowThrough)\\n        result = $bm_sum(result, followThrough());\\n    if (doOverlap)\\n        result = $bm_sum(result, overlap());\\n}\\n$bm_rt = result;"},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":2,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[-2.533,0.735]],"o":[[2.039,-1.674],[0,0]],"v":[[4.869,78.538],[11.822,74.874]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.164705887437,0.192156866193,0.203921571374,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":1.453,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[-2.146,1.063]],"o":[[1.588,-1.792],[0,0]],"v":[[0.4,73.231],[6.071,68.895]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.164705887437,0.192156866193,0.203921571374,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":1.453,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":2,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[9.926,-6.314],[2.324,-1.889],[0.053,-2.994],[-4.749,-1.502],[-8.767,9.734],[1.689,12.991],[5.876,7.836]],"o":[[0.253,11.761],[-2.527,1.607],[-2.324,1.889],[-0.087,4.98],[12.49,3.952],[8.767,-9.734],[-1.689,-12.991],[0,0]],"v":[[31.751,18.254],[12.213,59.145],[4.616,63.925],[0.319,71.49],[9.901,81.583],[45.543,70.963],[56.003,34.335],[45.792,9.417]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.164705887437,0.192156866193,0.203921571374,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":1.453,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 3","np":2,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0.058,-2.983],[-4.746,-1.492],[-8.775,9.744],[1.685,12.998],[0.271,1.298],[0.116,-1.22],[12.901,-8.33],[4.746,-0.232],[2.092,4.262],[-0.581,2.034],[0.058,-0.039]],"o":[[-0.077,4.978],[12.495,3.952],[8.775,-9.724],[-0.174,-1.337],[-0.155,1.22],[-1.434,15.284],[-3.99,2.576],[-4.746,0.232],[-0.891,-1.821],[-0.058,0.039],[-2.325,1.879]],"v":[[0.312,71.484],[9.901,81.577],[45.545,70.962],[56.005,34.33],[55.327,30.378],[54.998,34.059],[30.338,71.078],[17.185,76.114],[5.233,69.935],[4.787,63.794],[4.613,63.93]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.866666674614,0.89411765337,0.933333337307,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 4","np":2,"cix":2,"bm":0,"ix":4,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0.058,-2.983],[-4.746,-1.492],[-8.775,9.744],[1.685,12.998],[0.271,1.298],[7.671,8.93],[0,0],[9.938,-6.315],[2.286,-1.821],[0.058,-0.039]],"o":[[-0.077,4.978],[12.495,3.952],[8.775,-9.724],[-0.174,-1.337],[-2.344,-11.487],[0,0],[0.252,11.758],[-2.46,1.569],[-0.058,0.039],[-2.325,1.879]],"v":[[0.312,71.484],[9.901,81.577],[45.545,70.962],[56.005,34.33],[55.327,30.378],[45.792,9.417],[31.751,18.254],[12.206,59.145],[4.787,63.794],[4.613,63.93]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[1,1,1,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 5","np":2,"cix":2,"bm":0,"ix":5,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[47,11.5],"ix":2},"a":{"a":0,"k":[47,11.5],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":1,"k":[{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":17,"s":[0]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":22,"s":[15]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":27,"s":[0]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":32,"s":[15]},{"t":37,"s":[0]}],"ix":6,"x":"var $bm_rt;\\nvar fx = effect(\'ŝlosilo pli pura 4\');\\nvar doAnticipation = fx(1).value;\\nvar doInterpolation = fx(2).value;\\nvar doFollowThrough = fx(3).value;\\nvar damping = $bm_div(fx(15).value, 10);\\nvar elasticity = $bm_div(fx(13).value, 10);\\nvar bounce = fx(17).value;\\nvar anticipationDuration = fx(5).value;\\nvar anticipationQuantity = $bm_div(fx(6).value, 100);\\nvar slowIn = $bm_div(fx(9).value, 100);\\nvar slowOut = $bm_div(fx(10).value, 100);\\nvar spatialMode = fx(21).value;\\nvar spatialDoInterpolation = fx(20).value;\\nvar moBlurPrecision = fx(32).value;\\nvar elasticityRandom = fx(14).value;\\nvar dampingRandom = fx(16).value;\\nvar softBody = fx(28).value;\\nvar flexibility = $bm_div(fx(29).value, 100);\\nvar doOverlap = fx(23).value;\\nvar overlapDuration = fx(24).value;\\nvar overlapRandom = fx(25).value;\\nvar threshold = $bm_div($bm_div(1, moBlurPrecision), 1000);\\nvar zeroValue;\\nif ($bm_isInstanceOfArray(value)) {\\n    if (value.length == 2)\\n        zeroValue = [\\n            0,\\n            0\\n        ];\\n    else if (value.length == 3)\\n        zeroValue = [\\n            0,\\n            0,\\n            0\\n        ];\\n    else if (value.length == 4)\\n        zeroValue = [\\n            0,\\n            0,\\n            0,\\n            0\\n        ];\\n} else\\n    zeroValue = 0;\\nvar isThisSpatial = isSpatial(thisProperty);\\nvar isThisPosition = thisProperty === $bm_transform.position;\\nvar simulate = false;\\nif (isThisSpatial) {\\n    doInterpolation = doInterpolation && spatialDoInterpolation;\\n    if (isThisPosition && thisProperty.numKeys > 0) {\\n        doOverlap = false;\\n        simulate = false;\\n    } else {\\n        simulate = spatialMode == 2;\\n        doOverlap = overlapDuration != 0 && doOverlap && simulate;\\n    }\\n} else {\\n    doOverlap = false;\\n}\\nif (!doOverlap) {\\n    overlapDuration = 0;\\n}\\nif (simulate && softBody && isThisSpatial && !isThisPosition && (doFollowThrough || doOverlap)) {\\n    var distanceRatio = $bm_div(length(valueAtTime(0), $bm_transform.anchorPoint), $bm_div(thisLayer.width, 2));\\n    distanceRatio = $bm_div($bm_sum(1, $bm_mul(distanceRatio, flexibility)), 2);\\n    if (doFollowThrough) {\\n        elasticity = $bm_div(elasticity, distanceRatio);\\n        damping = $bm_div(damping, distanceRatio);\\n    }\\n    if (doOverlap) {\\n        overlapDuration = $bm_mul(overlapDuration, distanceRatio);\\n    }\\n}\\nseedRandom(0, true);\\nif (doFollowThrough) {\\n    if (elasticityRandom > 0)\\n        elasticity = addNoise(elasticity, elasticityRandom);\\n    if (dampingRandom > 0)\\n        damping = addNoise(damping, dampingRandom);\\n}\\nif (doOverlap) {\\n    if (doOverlap && overlapRandom > 0)\\n        overlapDuration = addNoise(overlapDuration, overlapRandom);\\n}\\nvar result = value;\\nfunction isSpatial(prop) {\\n    if (!(prop.value instanceof Array))\\n        return false;\\n    if (prop.value.length != 2 && prop.value.length != 3)\\n        return false;\\n    try {\\n        if (typeof prop.speed !== \'undefined\')\\n            return true;\\n    } catch (e) {\\n        return false;\\n    }\\n}\\nfunction addNoise(val, quantity) {\\n    var randomValue = random(0.9, 1.1);\\n    var noiseValue = noise($bm_mul(valueAtTime(0), randomValue));\\n    noiseValue = $bm_mul(noiseValue, $bm_div(quantity, 100));\\n    return $bm_mul(val, $bm_sum(noiseValue, 1));\\n}\\nfunction isAfterLastKey() {\\n    if (numKeys == 0)\\n        return false;\\n    var nKey = nearestKey(time);\\n    return nKey.time <= time && nKey.index == numKeys;\\n}\\nfunction isStill(t, threshold) {\\n    var d = $bm_sub(valueAtTime(t), valueAtTime($bm_sum(t, framesToTime(1))));\\n    if ($bm_isInstanceOfArray(d)) {\\n        for (var i = 0; i < d.length; i++) {\\n            d[i] = Math.abs(d[i]);\\n            if (d[i] >= threshold) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    } else {\\n        d = Math.abs(d);\\n        return d < threshold;\\n    }\\n}\\nfunction bezierInterpolation(t, tMin, tMax, value1, value2, bezierPoints) {\\n    if (arguments.length !== 5 && arguments.length !== 6)\\n        return t;\\n    var a = $bm_sub(value2, value1);\\n    var b = $bm_sub(tMax, tMin);\\n    if (b == 0)\\n        return t;\\n    var c = clamp($bm_div($bm_sub(t, tMin), b), 0, 1);\\n    if (!(bezierPoints instanceof Array) || bezierPoints.length !== 4)\\n        bezierPoints = [\\n            0.33,\\n            0,\\n            0.66,\\n            1\\n        ];\\n    return $bm_sum($bm_mul(a, h(c, bezierPoints)), value1);\\n    function h(f, g) {\\n        var x = $bm_mul(3, g[0]);\\n        var j = $bm_sub($bm_mul(3, $bm_sub(g[2], g[0])), x);\\n        var k = $bm_sub($bm_sub(1, x), j);\\n        var l = $bm_mul(3, g[1]);\\n        var m = $bm_sub($bm_mul(3, $bm_sub(g[3], g[1])), l);\\n        var n = $bm_sub($bm_sub(1, l), m);\\n        var d = f;\\n        for (var i = 0; i < 5; i++) {\\n            var z = $bm_sub($bm_mul(d, $bm_sum(x, $bm_mul(d, $bm_sum(j, $bm_mul(d, k))))), f);\\n            if (Math.abs(z) < 0.001)\\n                break;\\n            d = $bm_sub(d, $bm_div(z, $bm_sum(x, $bm_mul(d, $bm_sum($bm_mul(2, j), $bm_mul($bm_mul(3, k), d))))));\\n        }\\n        return $bm_mul(d, $bm_sum(l, $bm_mul(d, $bm_sum(m, $bm_mul(d, n)))));\\n    }\\n}\\nfunction getPropWorldSpeed(t, prop) {\\n    return length(getPropWorldVelocity(t, prop));\\n}\\nfunction getPrevKey(t) {\\n    if (numKeys == 0)\\n        return null;\\n    var nKey = nearestKey(t);\\n    if (nKey.time <= t)\\n        return nKey;\\n    if (nKey.index > 1)\\n        return key($bm_sub(nKey.index, 1));\\n    return null;\\n}\\nfunction getNextKey(t) {\\n    if (numKeys == 0)\\n        return null;\\n    var nKey = nearestKey(t);\\n    if (nKey.time >= t)\\n        return nKey;\\n    if (nKey.index < numKeys)\\n        return key($bm_sum(nKey.index, 1));\\n    return null;\\n}\\nfunction getPropWorldVelocity(t, prop) {\\n    return $bm_mul($bm_sub(getPropWorldValue($bm_sum(t, 0.005), prop), getPropWorldValue($bm_sub(t, 0.005), prop)), 100);\\n}\\nfunction getLayerWorldPos(t, l) {\\n    return l.toWorld(l.anchorPoint, t);\\n}\\nfunction getPropWorldValue(t, prop) {\\n    if (isPosition(prop))\\n        return getLayerWorldPos(t, thisLayer);\\n    return thisLayer.toWorld(prop.valueAtTime(t), t);\\n}\\nfunction isPosition(prop) {\\n    return prop === $bm_transform.position;\\n}\\nfunction isKeyTop(k, axis) {\\n    var prevSpeed = velocityAtTime($bm_sub(k.time, threshold));\\n    var nextSpeed = velocityAtTime($bm_sum(k.time, threshold));\\n    if ($bm_isInstanceOfArray(value)) {\\n        prevSpeed = prevSpeed[axis];\\n        nextSpeed = nextSpeed[axis];\\n    }\\n    if (Math.abs(prevSpeed) < 0.01 || Math.abs(nextSpeed) < 0.01)\\n        return true;\\n    return $bm_mul(prevSpeed, nextSpeed) < 0;\\n}\\nfunction anticipate() {\\n    var anticipation = zeroValue;\\n    if (isAfterLastKey())\\n        return anticipation;\\n    if (numKeys < 2)\\n        return anticipation;\\n    var nextKey = getNextKey(time);\\n    var aKey = nextKey;\\n    if (!isStill(aKey.time - 0.1, 0.1)) {\\n        aKey = getPrevKey(time);\\n        if (!isStill(aKey.time - 0.1, 0.1))\\n            return anticipation;\\n    }\\n    if (aKey.index == numKeys)\\n        return anticipation;\\n    var anticipationMiddle = aKey.time;\\n    var anticipationStart = $bm_sub(anticipationMiddle, anticipationDuration);\\n    var anticipationEnd = key(aKey.index + 1).time;\\n    var startValue = anticipation;\\n    var midValue = $bm_mul($bm_sum($bm_neg(valueAtTime($bm_sum(anticipationMiddle, anticipationDuration))), aKey.value), anticipationQuantity);\\n    var endValue = anticipation;\\n    if (time < anticipationStart) {\\n        return anticipation;\\n    } else if (time < anticipationMiddle) {\\n        if ($bm_isInstanceOfArray(value)) {\\n            for (var i = 0; i < value.length; i++) {\\n                anticipation[i] = bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue[i], midValue[i], [\\n                    slowOut,\\n                    0,\\n                    slowIn,\\n                    1\\n                ]);\\n            }\\n            return anticipation;\\n        } else {\\n            return bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue, midValue, [\\n                slowOut,\\n                0,\\n                slowIn,\\n                1\\n            ]);\\n        }\\n    } else if (time <= anticipationEnd) {\\n        if ($bm_isInstanceOfArray(value)) {\\n            for (var i = 0; i < value.length; i++) {\\n                anticipation[i] = bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue[i], endValue[i], [\\n                    slowOut,\\n                    0,\\n                    slowIn,\\n                    1\\n                ]);\\n            }\\n            return anticipation;\\n        } else {\\n            return bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue, endValue, [\\n                slowOut,\\n                0,\\n                slowIn,\\n                1\\n            ]);\\n        }\\n    } else {\\n        return anticipation;\\n    }\\n}\\nfunction followThroughAtTime(t) {\\n    var fThrough = zeroValue;\\n    if (elasticity == 0)\\n        return fThrough;\\n    var propSpeed;\\n    if (!simulate) {\\n        if (numKeys < 2)\\n            return fThrough;\\n        if (nearestKey(t).index == 1)\\n            return fThrough;\\n        propSpeed = length(velocityAtTime(t));\\n        if (propSpeed >= threshold)\\n            return fThrough;\\n    } else {\\n        propSpeed = getPropWorldSpeed(t, thisProperty);\\n        if (propSpeed >= threshold)\\n            return fThrough;\\n    }\\n    var fThroughStart = 0;\\n    var fThroughTime = 0;\\n    if (simulate) {\\n        var speedI = getPropWorldSpeed(t, thisProperty);\\n        var i = t;\\n        while (speedI < threshold && i > 0) {\\n            i = $bm_sub(i, $bm_div(thisComp.frameDuration, moBlurPrecision));\\n            speedI = getPropWorldSpeed(i, thisProperty);\\n        }\\n        fThroughStart = i;\\n    } else {\\n        var fThroughKey = getPrevKey(t);\\n        fThroughStart = fThroughKey.time;\\n    }\\n    if (fThroughStart == 0)\\n        return fThrough;\\n    fThroughTime = $bm_sub(t, fThroughStart);\\n    if (simulate)\\n        fThrough = $bm_div(getPropWorldVelocity($bm_sub(fThroughStart, thisComp.frameDuration), thisProperty), 2);\\n    else\\n        fThrough = $bm_div(velocityAtTime($bm_sub(fThroughStart, thisComp.frameDuration)), 2);\\n    if (bounce) {\\n        var cycleDamp = Math.exp($bm_mul($bm_mul(fThroughTime, damping), 0.1));\\n        var damp = $bm_div(Math.exp($bm_mul(fThroughTime, damping)), $bm_div(elasticity, 2));\\n        var cycleDuration = $bm_div(1, $bm_mul(elasticity, 2));\\n        cycleDuration = Math.round(timeToFrames(cycleDuration));\\n        cycleDuration = framesToTime(cycleDuration);\\n        var midDuration = $bm_div(cycleDuration, 2);\\n        var maxValue = $bm_mul(fThrough, midDuration);\\n        var cycvarime = fThroughTime;\\n        var numEndCycles = 1;\\n        while (cycvarime > cycleDuration) {\\n            cycvarime = $bm_sub(cycvarime, cycleDuration);\\n            cycleDuration = $bm_div(cycleDuration, cycleDamp);\\n            cycleDuration = Math.round(timeToFrames(cycleDuration));\\n            if (cycleDuration < 2) {\\n                cycleDuration = 2;\\n                numEndCycles++;\\n            }\\n            cycleDuration = framesToTime(cycleDuration);\\n            midDuration = $bm_div(cycleDuration, 2);\\n            maxValue = $bm_div($bm_mul(fThrough, midDuration), damp);\\n            if (numEndCycles > 100 / damping && maxValue < threshold)\\n                return zeroValue;\\n        }\\n        if (cycvarime < midDuration)\\n            fThrough = bezierInterpolation(cycvarime, 0, midDuration, 0, maxValue, [\\n                0,\\n                0.1,\\n                slowIn,\\n                1\\n            ]);\\n        else\\n            fThrough = bezierInterpolation(cycvarime, midDuration, cycleDuration, maxValue, 0, [\\n                $bm_sub(1, slowIn),\\n                0,\\n                1,\\n                0.9\\n            ]);\\n    } else {\\n        var damp = Math.exp($bm_mul(fThroughTime, damping));\\n        var sinus = $bm_mul($bm_mul($bm_mul(elasticity, fThroughTime), 2), Math.PI);\\n        sinus = Math.sin(sinus);\\n        sinus = $bm_mul($bm_div(0.3, elasticity), sinus);\\n        sinus = $bm_div(sinus, damp);\\n        if (Math.abs(sinus) < $bm_div(threshold, 100))\\n            return 0;\\n        fThrough = $bm_mul(fThrough, sinus);\\n        if (threshold > 0) {\\n            fThrough = $bm_mul(fThrough, $bm_sub(1, $bm_div(propSpeed, threshold)));\\n        }\\n    }\\n    if (bounce) {\\n        var prevValue = valueAtTime($bm_sub(fThroughStart, thisComp.frameDuration));\\n        var startValue = valueAtTime(fThroughStart);\\n        if ($bm_isInstanceOfArray(value)) {\\n            for (var i = 0; i < prevValue.length; i++) {\\n                if (prevValue[i] > startValue[i])\\n                    fThrough[i] = Math.abs(fThrough[i]);\\n                if (prevValue[i] < startValue[i])\\n                    fThrough[i] = $bm_neg(Math.abs(fThrough[i]));\\n            }\\n        } else {\\n            if (prevValue > startValue)\\n                fThrough = Math.abs(fThrough);\\n            if (prevValue < startValue)\\n                fThrough = $bm_neg(Math.abs(fThrough));\\n        }\\n    }\\n    if (simulate) {\\n        if (!isThisPosition) {\\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer));\\n            fThrough = $bm_sub(thisLayer.fromWorld(fThrough), thisLayer.anchorPoint);\\n        } else if (thisLayer.hasParent) {\\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer.parent));\\n            fThrough = $bm_sub(thisLayer.parent.fromWorld(fThrough), thisLayer.parent.anchorPoint);\\n        }\\n    }\\n    return fThrough;\\n}\\nfunction followThrough() {\\n    var propSpeed = length(velocity);\\n    if (propSpeed < threshold)\\n        return followThroughAtTime($bm_sub(time, overlapDuration));\\n    var fThrough = zeroValue;\\n    var t = time;\\n    while (t > 0) {\\n        t = $bm_sub(t, thisComp.frameDuration);\\n        if (simulate)\\n            propSpeed = getPropWorldSpeed($bm_sub(t, overlapDuration), thisProperty);\\n        else\\n            propSpeed = length(velocityAtTime(t));\\n        if (propSpeed < threshold) {\\n            fThrough = followThroughAtTime($bm_sub(t, overlapDuration));\\n            break;\\n        }\\n    }\\n    return linear(time, t, $bm_sum(t, $bm_mul(anticipationDuration, 2)), fThrough, zeroValue);\\n}\\nfunction smartSmooth(axis) {\\n    var startKey = nearestKey(time);\\n    var endKey = startKey;\\n    if (time == startKey.time)\\n        return 0;\\n    if (time < startKey.time && startKey.index == 1)\\n        return 0;\\n    if (time > startKey.time && startKey.index == numKeys)\\n        return 0;\\n    if (time < startKey.time)\\n        startKey = key($bm_sub(startKey.index, 1));\\n    if (time > startKey.time)\\n        endKey = key($bm_sum(startKey.index, 1));\\n    var sI = 0.66;\\n    var sO = 0.33;\\n    var sIV = 1;\\n    var sOV = 0;\\n    var sVal = startKey.value;\\n    var eVal = endKey.value;\\n    if ($bm_isInstanceOfArray(value)) {\\n        sVal = sVal[axis];\\n        eVal = eVal[axis];\\n    }\\n    var sTime = startKey.time;\\n    var eTime = endKey.time;\\n    if (isKeyTop(startKey, axis))\\n        sO = slowOut;\\n    else {\\n        var prevKey = key($bm_sub(startKey.index, 1));\\n        var pVal = prevKey.value;\\n        if ($bm_isInstanceOfArray(value))\\n            pVal = pVal[axis];\\n        sOV = $bm_div($bm_sub(sVal, pVal), $bm_sub(eVal, pVal));\\n    }\\n    if (isKeyTop(endKey, axis)) {\\n        sI = slowIn;\\n        if (endKey.index != numKeys) {\\n            var nextKey = key($bm_sum(endKey.index, 1));\\n            var nVal = nextKey.value;\\n            if ($bm_isInstanceOfArray(value))\\n                nVal = nVal[axis];\\n            if (Math.abs(nVal - eVal) < 0.01 && doFollowThrough)\\n                sI = 1;\\n        }\\n    } else {\\n        var nextKey = key($bm_sum(endKey.index, 1));\\n        var nVal = nextKey.value;\\n        if ($bm_isInstanceOfArray(value))\\n            nVal = nVal[axis];\\n        sIV = $bm_div($bm_sub(eVal, sVal), $bm_sub(nVal, sVal));\\n    }\\n    if (endKey.index == numKeys && doFollowThrough) {\\n        sI = 1;\\n    }\\n    var val = value;\\n    if ($bm_isInstanceOfArray(value))\\n        val = val[axis];\\n    return $bm_sub(bezierInterpolation(time, sTime, eTime, sVal, eVal, [\\n        sO,\\n        sOV,\\n        sI,\\n        sIV\\n    ]), val);\\n}\\nfunction overlap() {\\n    var ol = zeroValue;\\n    if (isThisPosition && !hasParent)\\n        return zeroValue;\\n    ol = $bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisProperty), getPropWorldValue(time, thisProperty));\\n    var motionRatio = $bm_div($bm_div(length(zeroValue, ol), thisLayer.width), 2);\\n    if (isThisPosition) {\\n        var originalDistance = length(valueAtTime(0));\\n        motionRatio = $bm_div(length(zeroValue, ol), thisComp.width);\\n    }\\n    ol = $bm_sum(ol, getPropWorldValue(time, thisProperty));\\n    ol = $bm_sum(ol, $bm_mul($bm_mul($bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisLayer.anchorPoint), ol), motionRatio), flexibility));\\n    ol = thisLayer.fromWorld(ol);\\n    if (!isThisPosition)\\n        ol = $bm_sub(ol, value);\\n    else {\\n        ol = linear(flexibility, 0, 100, $bm_div(ol, 2), 0);\\n        var prevParentWorldPos = getLayerWorldPos($bm_sub(time, overlapDuration), parent);\\n        ol = $bm_sum(ol, $bm_mul($bm_mul($bm_mul(thisLayer.fromWorld(prevParentWorldPos), motionRatio), flexibility), 5));\\n    }\\n    return ol;\\n}\\nvar okToGo = false;\\nif (simulate && fx.enabled)\\n    okToGo = true;\\nelse if (numKeys > 1 && fx.enabled)\\n    okToGo = true;\\nif (okToGo) {\\n    var smartSmoothResult = zeroValue;\\n    if (doInterpolation) {\\n        if ($bm_isInstanceOfArray(value)) {\\n            if (value.length == 2)\\n                smartSmoothResult = [\\n                    smartSmooth(0),\\n                    smartSmooth(1)\\n                ];\\n            else if (value.length == 3)\\n                smartSmoothResult = [\\n                    smartSmooth(0),\\n                    smartSmooth(1),\\n                    smartSmooth(2)\\n                ];\\n            else if (value.length == 4)\\n                smartSmoothResult = [\\n                    smartSmooth(0),\\n                    smartSmooth(1),\\n                    smartSmooth(2),\\n                    smartSmooth(3)\\n                ];\\n        } else {\\n            smartSmoothResult = smartSmooth(0);\\n        }\\n    }\\n    if (doAnticipation)\\n        result = $bm_sum(result, anticipate());\\n    result = $bm_sum(result, smartSmoothResult);\\n    if (doFollowThrough)\\n        result = $bm_sum(result, followThrough());\\n    if (doOverlap)\\n        result = $bm_sum(result, overlap());\\n}\\n$bm_rt = result;"},"o":{"a":0,"k":100,"ix":7,"x":"var $bm_rt;\\nvar fx = effect(\'ŝlosilo pli pura 2\');\\nvar doAnticipation = fx(1).value;\\nvar doInterpolation = fx(2).value;\\nvar doFollowThrough = fx(3).value;\\nvar damping = $bm_div(fx(15).value, 10);\\nvar elasticity = $bm_div(fx(13).value, 10);\\nvar bounce = fx(17).value;\\nvar anticipationDuration = fx(5).value;\\nvar anticipationQuantity = $bm_div(fx(6).value, 100);\\nvar slowIn = $bm_div(fx(9).value, 100);\\nvar slowOut = $bm_div(fx(10).value, 100);\\nvar spatialMode = fx(21).value;\\nvar spatialDoInterpolation = fx(20).value;\\nvar moBlurPrecision = fx(32).value;\\nvar elasticityRandom = fx(14).value;\\nvar dampingRandom = fx(16).value;\\nvar softBody = fx(28).value;\\nvar flexibility = $bm_div(fx(29).value, 100);\\nvar doOverlap = fx(23).value;\\nvar overlapDuration = fx(24).value;\\nvar overlapRandom = fx(25).value;\\nvar threshold = $bm_div($bm_div(1, moBlurPrecision), 1000);\\nvar zeroValue;\\nif ($bm_isInstanceOfArray(value)) {\\n    if (value.length == 2)\\n        zeroValue = [\\n            0,\\n            0\\n        ];\\n    else if (value.length == 3)\\n        zeroValue = [\\n            0,\\n            0,\\n            0\\n        ];\\n    else if (value.length == 4)\\n        zeroValue = [\\n            0,\\n            0,\\n            0,\\n            0\\n        ];\\n} else\\n    zeroValue = 0;\\nvar isThisSpatial = isSpatial(thisProperty);\\nvar isThisPosition = thisProperty === $bm_transform.position;\\nvar simulate = false;\\nif (isThisSpatial) {\\n    doInterpolation = doInterpolation && spatialDoInterpolation;\\n    if (isThisPosition && thisProperty.numKeys > 0) {\\n        doOverlap = false;\\n        simulate = false;\\n    } else {\\n        simulate = spatialMode == 2;\\n        doOverlap = overlapDuration != 0 && doOverlap && simulate;\\n    }\\n} else {\\n    doOverlap = false;\\n}\\nif (!doOverlap) {\\n    overlapDuration = 0;\\n}\\nif (simulate && softBody && isThisSpatial && !isThisPosition && (doFollowThrough || doOverlap)) {\\n    var distanceRatio = $bm_div(length(valueAtTime(0), $bm_transform.anchorPoint), $bm_div(thisLayer.width, 2));\\n    distanceRatio = $bm_div($bm_sum(1, $bm_mul(distanceRatio, flexibility)), 2);\\n    if (doFollowThrough) {\\n        elasticity = $bm_div(elasticity, distanceRatio);\\n        damping = $bm_div(damping, distanceRatio);\\n    }\\n    if (doOverlap) {\\n        overlapDuration = $bm_mul(overlapDuration, distanceRatio);\\n    }\\n}\\nseedRandom(0, true);\\nif (doFollowThrough) {\\n    if (elasticityRandom > 0)\\n        elasticity = addNoise(elasticity, elasticityRandom);\\n    if (dampingRandom > 0)\\n        damping = addNoise(damping, dampingRandom);\\n}\\nif (doOverlap) {\\n    if (doOverlap && overlapRandom > 0)\\n        overlapDuration = addNoise(overlapDuration, overlapRandom);\\n}\\nvar result = value;\\nfunction isSpatial(prop) {\\n    if (!(prop.value instanceof Array))\\n        return false;\\n    if (prop.value.length != 2 && prop.value.length != 3)\\n        return false;\\n    try {\\n        if (typeof prop.speed !== \'undefined\')\\n            return true;\\n    } catch (e) {\\n        return false;\\n    }\\n}\\nfunction addNoise(val, quantity) {\\n    var randomValue = random(0.9, 1.1);\\n    var noiseValue = noise($bm_mul(valueAtTime(0), randomValue));\\n    noiseValue = $bm_mul(noiseValue, $bm_div(quantity, 100));\\n    return $bm_mul(val, $bm_sum(noiseValue, 1));\\n}\\nfunction isAfterLastKey() {\\n    if (numKeys == 0)\\n        return false;\\n    var nKey = nearestKey(time);\\n    return nKey.time <= time && nKey.index == numKeys;\\n}\\nfunction isStill(t, threshold) {\\n    var d = $bm_sub(valueAtTime(t), valueAtTime($bm_sum(t, framesToTime(1))));\\n    if ($bm_isInstanceOfArray(d)) {\\n        for (var i = 0; i < d.length; i++) {\\n            d[i] = Math.abs(d[i]);\\n            if (d[i] >= threshold) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    } else {\\n        d = Math.abs(d);\\n        return d < threshold;\\n    }\\n}\\nfunction bezierInterpolation(t, tMin, tMax, value1, value2, bezierPoints) {\\n    if (arguments.length !== 5 && arguments.length !== 6)\\n        return t;\\n    var a = $bm_sub(value2, value1);\\n    var b = $bm_sub(tMax, tMin);\\n    if (b == 0)\\n        return t;\\n    var c = clamp($bm_div($bm_sub(t, tMin), b), 0, 1);\\n    if (!(bezierPoints instanceof Array) || bezierPoints.length !== 4)\\n        bezierPoints = [\\n            0.33,\\n            0,\\n            0.66,\\n            1\\n        ];\\n    return $bm_sum($bm_mul(a, h(c, bezierPoints)), value1);\\n    function h(f, g) {\\n        var x = $bm_mul(3, g[0]);\\n        var j = $bm_sub($bm_mul(3, $bm_sub(g[2], g[0])), x);\\n        var k = $bm_sub($bm_sub(1, x), j);\\n        var l = $bm_mul(3, g[1]);\\n        var m = $bm_sub($bm_mul(3, $bm_sub(g[3], g[1])), l);\\n        var n = $bm_sub($bm_sub(1, l), m);\\n        var d = f;\\n        for (var i = 0; i < 5; i++) {\\n            var z = $bm_sub($bm_mul(d, $bm_sum(x, $bm_mul(d, $bm_sum(j, $bm_mul(d, k))))), f);\\n            if (Math.abs(z) < 0.001)\\n                break;\\n            d = $bm_sub(d, $bm_div(z, $bm_sum(x, $bm_mul(d, $bm_sum($bm_mul(2, j), $bm_mul($bm_mul(3, k), d))))));\\n        }\\n        return $bm_mul(d, $bm_sum(l, $bm_mul(d, $bm_sum(m, $bm_mul(d, n)))));\\n    }\\n}\\nfunction getPropWorldSpeed(t, prop) {\\n    return length(getPropWorldVelocity(t, prop));\\n}\\nfunction getPrevKey(t) {\\n    if (numKeys == 0)\\n        return null;\\n    var nKey = nearestKey(t);\\n    if (nKey.time <= t)\\n        return nKey;\\n    if (nKey.index > 1)\\n        return key($bm_sub(nKey.index, 1));\\n    return null;\\n}\\nfunction getNextKey(t) {\\n    if (numKeys == 0)\\n        return null;\\n    var nKey = nearestKey(t);\\n    if (nKey.time >= t)\\n        return nKey;\\n    if (nKey.index < numKeys)\\n        return key($bm_sum(nKey.index, 1));\\n    return null;\\n}\\nfunction getPropWorldVelocity(t, prop) {\\n    return $bm_mul($bm_sub(getPropWorldValue($bm_sum(t, 0.005), prop), getPropWorldValue($bm_sub(t, 0.005), prop)), 100);\\n}\\nfunction getLayerWorldPos(t, l) {\\n    return l.toWorld(l.anchorPoint, t);\\n}\\nfunction getPropWorldValue(t, prop) {\\n    if (isPosition(prop))\\n        return getLayerWorldPos(t, thisLayer);\\n    return thisLayer.toWorld(prop.valueAtTime(t), t);\\n}\\nfunction isPosition(prop) {\\n    return prop === $bm_transform.position;\\n}\\nfunction isKeyTop(k, axis) {\\n    var prevSpeed = velocityAtTime($bm_sub(k.time, threshold));\\n    var nextSpeed = velocityAtTime($bm_sum(k.time, threshold));\\n    if ($bm_isInstanceOfArray(value)) {\\n        prevSpeed = prevSpeed[axis];\\n        nextSpeed = nextSpeed[axis];\\n    }\\n    if (Math.abs(prevSpeed) < 0.01 || Math.abs(nextSpeed) < 0.01)\\n        return true;\\n    return $bm_mul(prevSpeed, nextSpeed) < 0;\\n}\\nfunction anticipate() {\\n    var anticipation = zeroValue;\\n    if (isAfterLastKey())\\n        return anticipation;\\n    if (numKeys < 2)\\n        return anticipation;\\n    var nextKey = getNextKey(time);\\n    var aKey = nextKey;\\n    if (!isStill(aKey.time - 0.1, 0.1)) {\\n        aKey = getPrevKey(time);\\n        if (!isStill(aKey.time - 0.1, 0.1))\\n            return anticipation;\\n    }\\n    if (aKey.index == numKeys)\\n        return anticipation;\\n    var anticipationMiddle = aKey.time;\\n    var anticipationStart = $bm_sub(anticipationMiddle, anticipationDuration);\\n    var anticipationEnd = key(aKey.index + 1).time;\\n    var startValue = anticipation;\\n    var midValue = $bm_mul($bm_sum($bm_neg(valueAtTime($bm_sum(anticipationMiddle, anticipationDuration))), aKey.value), anticipationQuantity);\\n    var endValue = anticipation;\\n    if (time < anticipationStart) {\\n        return anticipation;\\n    } else if (time < anticipationMiddle) {\\n        if ($bm_isInstanceOfArray(value)) {\\n            for (var i = 0; i < value.length; i++) {\\n                anticipation[i] = bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue[i], midValue[i], [\\n                    slowOut,\\n                    0,\\n                    slowIn,\\n                    1\\n                ]);\\n            }\\n            return anticipation;\\n        } else {\\n            return bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue, midValue, [\\n                slowOut,\\n                0,\\n                slowIn,\\n                1\\n            ]);\\n        }\\n    } else if (time <= anticipationEnd) {\\n        if ($bm_isInstanceOfArray(value)) {\\n            for (var i = 0; i < value.length; i++) {\\n                anticipation[i] = bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue[i], endValue[i], [\\n                    slowOut,\\n                    0,\\n                    slowIn,\\n                    1\\n                ]);\\n            }\\n            return anticipation;\\n        } else {\\n            return bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue, endValue, [\\n                slowOut,\\n                0,\\n                slowIn,\\n                1\\n            ]);\\n        }\\n    } else {\\n        return anticipation;\\n    }\\n}\\nfunction followThroughAtTime(t) {\\n    var fThrough = zeroValue;\\n    if (elasticity == 0)\\n        return fThrough;\\n    var propSpeed;\\n    if (!simulate) {\\n        if (numKeys < 2)\\n            return fThrough;\\n        if (nearestKey(t).index == 1)\\n            return fThrough;\\n        propSpeed = length(velocityAtTime(t));\\n        if (propSpeed >= threshold)\\n            return fThrough;\\n    } else {\\n        propSpeed = getPropWorldSpeed(t, thisProperty);\\n        if (propSpeed >= threshold)\\n            return fThrough;\\n    }\\n    var fThroughStart = 0;\\n    var fThroughTime = 0;\\n    if (simulate) {\\n        var speedI = getPropWorldSpeed(t, thisProperty);\\n        var i = t;\\n        while (speedI < threshold && i > 0) {\\n            i = $bm_sub(i, $bm_div(thisComp.frameDuration, moBlurPrecision));\\n            speedI = getPropWorldSpeed(i, thisProperty);\\n        }\\n        fThroughStart = i;\\n    } else {\\n        var fThroughKey = getPrevKey(t);\\n        fThroughStart = fThroughKey.time;\\n    }\\n    if (fThroughStart == 0)\\n        return fThrough;\\n    fThroughTime = $bm_sub(t, fThroughStart);\\n    if (simulate)\\n        fThrough = $bm_div(getPropWorldVelocity($bm_sub(fThroughStart, thisComp.frameDuration), thisProperty), 2);\\n    else\\n        fThrough = $bm_div(velocityAtTime($bm_sub(fThroughStart, thisComp.frameDuration)), 2);\\n    if (bounce) {\\n        var cycleDamp = Math.exp($bm_mul($bm_mul(fThroughTime, damping), 0.1));\\n        var damp = $bm_div(Math.exp($bm_mul(fThroughTime, damping)), $bm_div(elasticity, 2));\\n        var cycleDuration = $bm_div(1, $bm_mul(elasticity, 2));\\n        cycleDuration = Math.round(timeToFrames(cycleDuration));\\n        cycleDuration = framesToTime(cycleDuration);\\n        var midDuration = $bm_div(cycleDuration, 2);\\n        var maxValue = $bm_mul(fThrough, midDuration);\\n        var cycvarime = fThroughTime;\\n        var numEndCycles = 1;\\n        while (cycvarime > cycleDuration) {\\n            cycvarime = $bm_sub(cycvarime, cycleDuration);\\n            cycleDuration = $bm_div(cycleDuration, cycleDamp);\\n            cycleDuration = Math.round(timeToFrames(cycleDuration));\\n            if (cycleDuration < 2) {\\n                cycleDuration = 2;\\n                numEndCycles++;\\n            }\\n            cycleDuration = framesToTime(cycleDuration);\\n            midDuration = $bm_div(cycleDuration, 2);\\n            maxValue = $bm_div($bm_mul(fThrough, midDuration), damp);\\n            if (numEndCycles > 100 / damping && maxValue < threshold)\\n                return zeroValue;\\n        }\\n        if (cycvarime < midDuration)\\n            fThrough = bezierInterpolation(cycvarime, 0, midDuration, 0, maxValue, [\\n                0,\\n                0.1,\\n                slowIn,\\n                1\\n            ]);\\n        else\\n            fThrough = bezierInterpolation(cycvarime, midDuration, cycleDuration, maxValue, 0, [\\n                $bm_sub(1, slowIn),\\n                0,\\n                1,\\n                0.9\\n            ]);\\n    } else {\\n        var damp = Math.exp($bm_mul(fThroughTime, damping));\\n        var sinus = $bm_mul($bm_mul($bm_mul(elasticity, fThroughTime), 2), Math.PI);\\n        sinus = Math.sin(sinus);\\n        sinus = $bm_mul($bm_div(0.3, elasticity), sinus);\\n        sinus = $bm_div(sinus, damp);\\n        if (Math.abs(sinus) < $bm_div(threshold, 100))\\n            return 0;\\n        fThrough = $bm_mul(fThrough, sinus);\\n        if (threshold > 0) {\\n            fThrough = $bm_mul(fThrough, $bm_sub(1, $bm_div(propSpeed, threshold)));\\n        }\\n    }\\n    if (bounce) {\\n        var prevValue = valueAtTime($bm_sub(fThroughStart, thisComp.frameDuration));\\n        var startValue = valueAtTime(fThroughStart);\\n        if ($bm_isInstanceOfArray(value)) {\\n            for (var i = 0; i < prevValue.length; i++) {\\n                if (prevValue[i] > startValue[i])\\n                    fThrough[i] = Math.abs(fThrough[i]);\\n                if (prevValue[i] < startValue[i])\\n                    fThrough[i] = $bm_neg(Math.abs(fThrough[i]));\\n            }\\n        } else {\\n            if (prevValue > startValue)\\n                fThrough = Math.abs(fThrough);\\n            if (prevValue < startValue)\\n                fThrough = $bm_neg(Math.abs(fThrough));\\n        }\\n    }\\n    if (simulate) {\\n        if (!isThisPosition) {\\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer));\\n            fThrough = $bm_sub(thisLayer.fromWorld(fThrough), thisLayer.anchorPoint);\\n        } else if (thisLayer.hasParent) {\\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer.parent));\\n            fThrough = $bm_sub(thisLayer.parent.fromWorld(fThrough), thisLayer.parent.anchorPoint);\\n        }\\n    }\\n    return fThrough;\\n}\\nfunction followThrough() {\\n    var propSpeed = length(velocity);\\n    if (propSpeed < threshold)\\n        return followThroughAtTime($bm_sub(time, overlapDuration));\\n    var fThrough = zeroValue;\\n    var t = time;\\n    while (t > 0) {\\n        t = $bm_sub(t, thisComp.frameDuration);\\n        if (simulate)\\n            propSpeed = getPropWorldSpeed($bm_sub(t, overlapDuration), thisProperty);\\n        else\\n            propSpeed = length(velocityAtTime(t));\\n        if (propSpeed < threshold) {\\n            fThrough = followThroughAtTime($bm_sub(t, overlapDuration));\\n            break;\\n        }\\n    }\\n    return linear(time, t, $bm_sum(t, $bm_mul(anticipationDuration, 2)), fThrough, zeroValue);\\n}\\nfunction smartSmooth(axis) {\\n    var startKey = nearestKey(time);\\n    var endKey = startKey;\\n    if (time == startKey.time)\\n        return 0;\\n    if (time < startKey.time && startKey.index == 1)\\n        return 0;\\n    if (time > startKey.time && startKey.index == numKeys)\\n        return 0;\\n    if (time < startKey.time)\\n        startKey = key($bm_sub(startKey.index, 1));\\n    if (time > startKey.time)\\n        endKey = key($bm_sum(startKey.index, 1));\\n    var sI = 0.66;\\n    var sO = 0.33;\\n    var sIV = 1;\\n    var sOV = 0;\\n    var sVal = startKey.value;\\n    var eVal = endKey.value;\\n    if ($bm_isInstanceOfArray(value)) {\\n        sVal = sVal[axis];\\n        eVal = eVal[axis];\\n    }\\n    var sTime = startKey.time;\\n    var eTime = endKey.time;\\n    if (isKeyTop(startKey, axis))\\n        sO = slowOut;\\n    else {\\n        var prevKey = key($bm_sub(startKey.index, 1));\\n        var pVal = prevKey.value;\\n        if ($bm_isInstanceOfArray(value))\\n            pVal = pVal[axis];\\n        sOV = $bm_div($bm_sub(sVal, pVal), $bm_sub(eVal, pVal));\\n    }\\n    if (isKeyTop(endKey, axis)) {\\n        sI = slowIn;\\n        if (endKey.index != numKeys) {\\n            var nextKey = key($bm_sum(endKey.index, 1));\\n            var nVal = nextKey.value;\\n            if ($bm_isInstanceOfArray(value))\\n                nVal = nVal[axis];\\n            if (Math.abs(nVal - eVal) < 0.01 && doFollowThrough)\\n                sI = 1;\\n        }\\n    } else {\\n        var nextKey = key($bm_sum(endKey.index, 1));\\n        var nVal = nextKey.value;\\n        if ($bm_isInstanceOfArray(value))\\n            nVal = nVal[axis];\\n        sIV = $bm_div($bm_sub(eVal, sVal), $bm_sub(nVal, sVal));\\n    }\\n    if (endKey.index == numKeys && doFollowThrough) {\\n        sI = 1;\\n    }\\n    var val = value;\\n    if ($bm_isInstanceOfArray(value))\\n        val = val[axis];\\n    return $bm_sub(bezierInterpolation(time, sTime, eTime, sVal, eVal, [\\n        sO,\\n        sOV,\\n        sI,\\n        sIV\\n    ]), val);\\n}\\nfunction overlap() {\\n    var ol = zeroValue;\\n    if (isThisPosition && !hasParent)\\n        return zeroValue;\\n    ol = $bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisProperty), getPropWorldValue(time, thisProperty));\\n    var motionRatio = $bm_div($bm_div(length(zeroValue, ol), thisLayer.width), 2);\\n    if (isThisPosition) {\\n        var originalDistance = length(valueAtTime(0));\\n        motionRatio = $bm_div(length(zeroValue, ol), thisComp.width);\\n    }\\n    ol = $bm_sum(ol, getPropWorldValue(time, thisProperty));\\n    ol = $bm_sum(ol, $bm_mul($bm_mul($bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisLayer.anchorPoint), ol), motionRatio), flexibility));\\n    ol = thisLayer.fromWorld(ol);\\n    if (!isThisPosition)\\n        ol = $bm_sub(ol, value);\\n    else {\\n        ol = linear(flexibility, 0, 100, $bm_div(ol, 2), 0);\\n        var prevParentWorldPos = getLayerWorldPos($bm_sub(time, overlapDuration), parent);\\n        ol = $bm_sum(ol, $bm_mul($bm_mul($bm_mul(thisLayer.fromWorld(prevParentWorldPos), motionRatio), flexibility), 5));\\n    }\\n    return ol;\\n}\\nvar okToGo = false;\\nif (simulate && fx.enabled)\\n    okToGo = true;\\nelse if (numKeys > 1 && fx.enabled)\\n    okToGo = true;\\nif (okToGo) {\\n    var smartSmoothResult = zeroValue;\\n    if (doInterpolation) {\\n        if ($bm_isInstanceOfArray(value)) {\\n            if (value.length == 2)\\n                smartSmoothResult = [\\n                    smartSmooth(0),\\n                    smartSmooth(1)\\n                ];\\n            else if (value.length == 3)\\n                smartSmoothResult = [\\n                    smartSmooth(0),\\n                    smartSmooth(1),\\n                    smartSmooth(2)\\n                ];\\n            else if (value.length == 4)\\n                smartSmoothResult = [\\n                    smartSmooth(0),\\n                    smartSmooth(1),\\n                    smartSmooth(2),\\n                    smartSmooth(3)\\n                ];\\n        } else {\\n            smartSmoothResult = smartSmooth(0);\\n        }\\n    }\\n    if (doAnticipation)\\n        result = $bm_sum(result, anticipate());\\n    result = $bm_sum(result, smartSmoothResult);\\n    if (doFollowThrough)\\n        result = $bm_sum(result, followThrough());\\n    if (doOverlap)\\n        result = $bm_sum(result, overlap());\\n}\\n$bm_rt = result;"},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5,"x":"var $bm_rt;\\nvar fx = effect(\'ŝlosilo pli pura 2\');\\nvar doAnticipation = fx(1).value;\\nvar doInterpolation = fx(2).value;\\nvar doFollowThrough = fx(3).value;\\nvar damping = $bm_div(fx(15).value, 10);\\nvar elasticity = $bm_div(fx(13).value, 10);\\nvar bounce = fx(17).value;\\nvar anticipationDuration = fx(5).value;\\nvar anticipationQuantity = $bm_div(fx(6).value, 100);\\nvar slowIn = $bm_div(fx(9).value, 100);\\nvar slowOut = $bm_div(fx(10).value, 100);\\nvar spatialMode = fx(21).value;\\nvar spatialDoInterpolation = fx(20).value;\\nvar moBlurPrecision = fx(32).value;\\nvar elasticityRandom = fx(14).value;\\nvar dampingRandom = fx(16).value;\\nvar softBody = fx(28).value;\\nvar flexibility = $bm_div(fx(29).value, 100);\\nvar doOverlap = fx(23).value;\\nvar overlapDuration = fx(24).value;\\nvar overlapRandom = fx(25).value;\\nvar threshold = $bm_div($bm_div(1, moBlurPrecision), 1000);\\nvar zeroValue;\\nif ($bm_isInstanceOfArray(value)) {\\n    if (value.length == 2)\\n        zeroValue = [\\n            0,\\n            0\\n        ];\\n    else if (value.length == 3)\\n        zeroValue = [\\n            0,\\n            0,\\n            0\\n        ];\\n    else if (value.length == 4)\\n        zeroValue = [\\n            0,\\n            0,\\n            0,\\n            0\\n        ];\\n} else\\n    zeroValue = 0;\\nvar isThisSpatial = isSpatial(thisProperty);\\nvar isThisPosition = thisProperty === $bm_transform.position;\\nvar simulate = false;\\nif (isThisSpatial) {\\n    doInterpolation = doInterpolation && spatialDoInterpolation;\\n    if (isThisPosition && thisProperty.numKeys > 0) {\\n        doOverlap = false;\\n        simulate = false;\\n    } else {\\n        simulate = spatialMode == 2;\\n        doOverlap = overlapDuration != 0 && doOverlap && simulate;\\n    }\\n} else {\\n    doOverlap = false;\\n}\\nif (!doOverlap) {\\n    overlapDuration = 0;\\n}\\nif (simulate && softBody && isThisSpatial && !isThisPosition && (doFollowThrough || doOverlap)) {\\n    var distanceRatio = $bm_div(length(valueAtTime(0), $bm_transform.anchorPoint), $bm_div(thisLayer.width, 2));\\n    distanceRatio = $bm_div($bm_sum(1, $bm_mul(distanceRatio, flexibility)), 2);\\n    if (doFollowThrough) {\\n        elasticity = $bm_div(elasticity, distanceRatio);\\n        damping = $bm_div(damping, distanceRatio);\\n    }\\n    if (doOverlap) {\\n        overlapDuration = $bm_mul(overlapDuration, distanceRatio);\\n    }\\n}\\nseedRandom(0, true);\\nif (doFollowThrough) {\\n    if (elasticityRandom > 0)\\n        elasticity = addNoise(elasticity, elasticityRandom);\\n    if (dampingRandom > 0)\\n        damping = addNoise(damping, dampingRandom);\\n}\\nif (doOverlap) {\\n    if (doOverlap && overlapRandom > 0)\\n        overlapDuration = addNoise(overlapDuration, overlapRandom);\\n}\\nvar result = value;\\nfunction isSpatial(prop) {\\n    if (!(prop.value instanceof Array))\\n        return false;\\n    if (prop.value.length != 2 && prop.value.length != 3)\\n        return false;\\n    try {\\n        if (typeof prop.speed !== \'undefined\')\\n            return true;\\n    } catch (e) {\\n        return false;\\n    }\\n}\\nfunction addNoise(val, quantity) {\\n    var randomValue = random(0.9, 1.1);\\n    var noiseValue = noise($bm_mul(valueAtTime(0), randomValue));\\n    noiseValue = $bm_mul(noiseValue, $bm_div(quantity, 100));\\n    return $bm_mul(val, $bm_sum(noiseValue, 1));\\n}\\nfunction isAfterLastKey() {\\n    if (numKeys == 0)\\n        return false;\\n    var nKey = nearestKey(time);\\n    return nKey.time <= time && nKey.index == numKeys;\\n}\\nfunction isStill(t, threshold) {\\n    var d = $bm_sub(valueAtTime(t), valueAtTime($bm_sum(t, framesToTime(1))));\\n    if ($bm_isInstanceOfArray(d)) {\\n        for (var i = 0; i < d.length; i++) {\\n            d[i] = Math.abs(d[i]);\\n            if (d[i] >= threshold) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    } else {\\n        d = Math.abs(d);\\n        return d < threshold;\\n    }\\n}\\nfunction bezierInterpolation(t, tMin, tMax, value1, value2, bezierPoints) {\\n    if (arguments.length !== 5 && arguments.length !== 6)\\n        return t;\\n    var a = $bm_sub(value2, value1);\\n    var b = $bm_sub(tMax, tMin);\\n    if (b == 0)\\n        return t;\\n    var c = clamp($bm_div($bm_sub(t, tMin), b), 0, 1);\\n    if (!(bezierPoints instanceof Array) || bezierPoints.length !== 4)\\n        bezierPoints = [\\n            0.33,\\n            0,\\n            0.66,\\n            1\\n        ];\\n    return $bm_sum($bm_mul(a, h(c, bezierPoints)), value1);\\n    function h(f, g) {\\n        var x = $bm_mul(3, g[0]);\\n        var j = $bm_sub($bm_mul(3, $bm_sub(g[2], g[0])), x);\\n        var k = $bm_sub($bm_sub(1, x), j);\\n        var l = $bm_mul(3, g[1]);\\n        var m = $bm_sub($bm_mul(3, $bm_sub(g[3], g[1])), l);\\n        var n = $bm_sub($bm_sub(1, l), m);\\n        var d = f;\\n        for (var i = 0; i < 5; i++) {\\n            var z = $bm_sub($bm_mul(d, $bm_sum(x, $bm_mul(d, $bm_sum(j, $bm_mul(d, k))))), f);\\n            if (Math.abs(z) < 0.001)\\n                break;\\n            d = $bm_sub(d, $bm_div(z, $bm_sum(x, $bm_mul(d, $bm_sum($bm_mul(2, j), $bm_mul($bm_mul(3, k), d))))));\\n        }\\n        return $bm_mul(d, $bm_sum(l, $bm_mul(d, $bm_sum(m, $bm_mul(d, n)))));\\n    }\\n}\\nfunction getPropWorldSpeed(t, prop) {\\n    return length(getPropWorldVelocity(t, prop));\\n}\\nfunction getPrevKey(t) {\\n    if (numKeys == 0)\\n        return null;\\n    var nKey = nearestKey(t);\\n    if (nKey.time <= t)\\n        return nKey;\\n    if (nKey.index > 1)\\n        return key($bm_sub(nKey.index, 1));\\n    return null;\\n}\\nfunction getNextKey(t) {\\n    if (numKeys == 0)\\n        return null;\\n    var nKey = nearestKey(t);\\n    if (nKey.time >= t)\\n        return nKey;\\n    if (nKey.index < numKeys)\\n        return key($bm_sum(nKey.index, 1));\\n    return null;\\n}\\nfunction getPropWorldVelocity(t, prop) {\\n    return $bm_mul($bm_sub(getPropWorldValue($bm_sum(t, 0.005), prop), getPropWorldValue($bm_sub(t, 0.005), prop)), 100);\\n}\\nfunction getLayerWorldPos(t, l) {\\n    return l.toWorld(l.anchorPoint, t);\\n}\\nfunction getPropWorldValue(t, prop) {\\n    if (isPosition(prop))\\n        return getLayerWorldPos(t, thisLayer);\\n    return thisLayer.toWorld(prop.valueAtTime(t), t);\\n}\\nfunction isPosition(prop) {\\n    return prop === $bm_transform.position;\\n}\\nfunction isKeyTop(k, axis) {\\n    var prevSpeed = velocityAtTime($bm_sub(k.time, threshold));\\n    var nextSpeed = velocityAtTime($bm_sum(k.time, threshold));\\n    if ($bm_isInstanceOfArray(value)) {\\n        prevSpeed = prevSpeed[axis];\\n        nextSpeed = nextSpeed[axis];\\n    }\\n    if (Math.abs(prevSpeed) < 0.01 || Math.abs(nextSpeed) < 0.01)\\n        return true;\\n    return $bm_mul(prevSpeed, nextSpeed) < 0;\\n}\\nfunction anticipate() {\\n    var anticipation = zeroValue;\\n    if (isAfterLastKey())\\n        return anticipation;\\n    if (numKeys < 2)\\n        return anticipation;\\n    var nextKey = getNextKey(time);\\n    var aKey = nextKey;\\n    if (!isStill(aKey.time - 0.1, 0.1)) {\\n        aKey = getPrevKey(time);\\n        if (!isStill(aKey.time - 0.1, 0.1))\\n            return anticipation;\\n    }\\n    if (aKey.index == numKeys)\\n        return anticipation;\\n    var anticipationMiddle = aKey.time;\\n    var anticipationStart = $bm_sub(anticipationMiddle, anticipationDuration);\\n    var anticipationEnd = key(aKey.index + 1).time;\\n    var startValue = anticipation;\\n    var midValue = $bm_mul($bm_sum($bm_neg(valueAtTime($bm_sum(anticipationMiddle, anticipationDuration))), aKey.value), anticipationQuantity);\\n    var endValue = anticipation;\\n    if (time < anticipationStart) {\\n        return anticipation;\\n    } else if (time < anticipationMiddle) {\\n        if ($bm_isInstanceOfArray(value)) {\\n            for (var i = 0; i < value.length; i++) {\\n                anticipation[i] = bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue[i], midValue[i], [\\n                    slowOut,\\n                    0,\\n                    slowIn,\\n                    1\\n                ]);\\n            }\\n            return anticipation;\\n        } else {\\n            return bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue, midValue, [\\n                slowOut,\\n                0,\\n                slowIn,\\n                1\\n            ]);\\n        }\\n    } else if (time <= anticipationEnd) {\\n        if ($bm_isInstanceOfArray(value)) {\\n            for (var i = 0; i < value.length; i++) {\\n                anticipation[i] = bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue[i], endValue[i], [\\n                    slowOut,\\n                    0,\\n                    slowIn,\\n                    1\\n                ]);\\n            }\\n            return anticipation;\\n        } else {\\n            return bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue, endValue, [\\n                slowOut,\\n                0,\\n                slowIn,\\n                1\\n            ]);\\n        }\\n    } else {\\n        return anticipation;\\n    }\\n}\\nfunction followThroughAtTime(t) {\\n    var fThrough = zeroValue;\\n    if (elasticity == 0)\\n        return fThrough;\\n    var propSpeed;\\n    if (!simulate) {\\n        if (numKeys < 2)\\n            return fThrough;\\n        if (nearestKey(t).index == 1)\\n            return fThrough;\\n        propSpeed = length(velocityAtTime(t));\\n        if (propSpeed >= threshold)\\n            return fThrough;\\n    } else {\\n        propSpeed = getPropWorldSpeed(t, thisProperty);\\n        if (propSpeed >= threshold)\\n            return fThrough;\\n    }\\n    var fThroughStart = 0;\\n    var fThroughTime = 0;\\n    if (simulate) {\\n        var speedI = getPropWorldSpeed(t, thisProperty);\\n        var i = t;\\n        while (speedI < threshold && i > 0) {\\n            i = $bm_sub(i, $bm_div(thisComp.frameDuration, moBlurPrecision));\\n            speedI = getPropWorldSpeed(i, thisProperty);\\n        }\\n        fThroughStart = i;\\n    } else {\\n        var fThroughKey = getPrevKey(t);\\n        fThroughStart = fThroughKey.time;\\n    }\\n    if (fThroughStart == 0)\\n        return fThrough;\\n    fThroughTime = $bm_sub(t, fThroughStart);\\n    if (simulate)\\n        fThrough = $bm_div(getPropWorldVelocity($bm_sub(fThroughStart, thisComp.frameDuration), thisProperty), 2);\\n    else\\n        fThrough = $bm_div(velocityAtTime($bm_sub(fThroughStart, thisComp.frameDuration)), 2);\\n    if (bounce) {\\n        var cycleDamp = Math.exp($bm_mul($bm_mul(fThroughTime, damping), 0.1));\\n        var damp = $bm_div(Math.exp($bm_mul(fThroughTime, damping)), $bm_div(elasticity, 2));\\n        var cycleDuration = $bm_div(1, $bm_mul(elasticity, 2));\\n        cycleDuration = Math.round(timeToFrames(cycleDuration));\\n        cycleDuration = framesToTime(cycleDuration);\\n        var midDuration = $bm_div(cycleDuration, 2);\\n        var maxValue = $bm_mul(fThrough, midDuration);\\n        var cycvarime = fThroughTime;\\n        var numEndCycles = 1;\\n        while (cycvarime > cycleDuration) {\\n            cycvarime = $bm_sub(cycvarime, cycleDuration);\\n            cycleDuration = $bm_div(cycleDuration, cycleDamp);\\n            cycleDuration = Math.round(timeToFrames(cycleDuration));\\n            if (cycleDuration < 2) {\\n                cycleDuration = 2;\\n                numEndCycles++;\\n            }\\n            cycleDuration = framesToTime(cycleDuration);\\n            midDuration = $bm_div(cycleDuration, 2);\\n            maxValue = $bm_div($bm_mul(fThrough, midDuration), damp);\\n            if (numEndCycles > 100 / damping && maxValue < threshold)\\n                return zeroValue;\\n        }\\n        if (cycvarime < midDuration)\\n            fThrough = bezierInterpolation(cycvarime, 0, midDuration, 0, maxValue, [\\n                0,\\n                0.1,\\n                slowIn,\\n                1\\n            ]);\\n        else\\n            fThrough = bezierInterpolation(cycvarime, midDuration, cycleDuration, maxValue, 0, [\\n                $bm_sub(1, slowIn),\\n                0,\\n                1,\\n                0.9\\n            ]);\\n    } else {\\n        var damp = Math.exp($bm_mul(fThroughTime, damping));\\n        var sinus = $bm_mul($bm_mul($bm_mul(elasticity, fThroughTime), 2), Math.PI);\\n        sinus = Math.sin(sinus);\\n        sinus = $bm_mul($bm_div(0.3, elasticity), sinus);\\n        sinus = $bm_div(sinus, damp);\\n        if (Math.abs(sinus) < $bm_div(threshold, 100))\\n            return 0;\\n        fThrough = $bm_mul(fThrough, sinus);\\n        if (threshold > 0) {\\n            fThrough = $bm_mul(fThrough, $bm_sub(1, $bm_div(propSpeed, threshold)));\\n        }\\n    }\\n    if (bounce) {\\n        var prevValue = valueAtTime($bm_sub(fThroughStart, thisComp.frameDuration));\\n        var startValue = valueAtTime(fThroughStart);\\n        if ($bm_isInstanceOfArray(value)) {\\n            for (var i = 0; i < prevValue.length; i++) {\\n                if (prevValue[i] > startValue[i])\\n                    fThrough[i] = Math.abs(fThrough[i]);\\n                if (prevValue[i] < startValue[i])\\n                    fThrough[i] = $bm_neg(Math.abs(fThrough[i]));\\n            }\\n        } else {\\n            if (prevValue > startValue)\\n                fThrough = Math.abs(fThrough);\\n            if (prevValue < startValue)\\n                fThrough = $bm_neg(Math.abs(fThrough));\\n        }\\n    }\\n    if (simulate) {\\n        if (!isThisPosition) {\\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer));\\n            fThrough = $bm_sub(thisLayer.fromWorld(fThrough), thisLayer.anchorPoint);\\n        } else if (thisLayer.hasParent) {\\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer.parent));\\n            fThrough = $bm_sub(thisLayer.parent.fromWorld(fThrough), thisLayer.parent.anchorPoint);\\n        }\\n    }\\n    return fThrough;\\n}\\nfunction followThrough() {\\n    var propSpeed = length(velocity);\\n    if (propSpeed < threshold)\\n        return followThroughAtTime($bm_sub(time, overlapDuration));\\n    var fThrough = zeroValue;\\n    var t = time;\\n    while (t > 0) {\\n        t = $bm_sub(t, thisComp.frameDuration);\\n        if (simulate)\\n            propSpeed = getPropWorldSpeed($bm_sub(t, overlapDuration), thisProperty);\\n        else\\n            propSpeed = length(velocityAtTime(t));\\n        if (propSpeed < threshold) {\\n            fThrough = followThroughAtTime($bm_sub(t, overlapDuration));\\n            break;\\n        }\\n    }\\n    return linear(time, t, $bm_sum(t, $bm_mul(anticipationDuration, 2)), fThrough, zeroValue);\\n}\\nfunction smartSmooth(axis) {\\n    var startKey = nearestKey(time);\\n    var endKey = startKey;\\n    if (time == startKey.time)\\n        return 0;\\n    if (time < startKey.time && startKey.index == 1)\\n        return 0;\\n    if (time > startKey.time && startKey.index == numKeys)\\n        return 0;\\n    if (time < startKey.time)\\n        startKey = key($bm_sub(startKey.index, 1));\\n    if (time > startKey.time)\\n        endKey = key($bm_sum(startKey.index, 1));\\n    var sI = 0.66;\\n    var sO = 0.33;\\n    var sIV = 1;\\n    var sOV = 0;\\n    var sVal = startKey.value;\\n    var eVal = endKey.value;\\n    if ($bm_isInstanceOfArray(value)) {\\n        sVal = sVal[axis];\\n        eVal = eVal[axis];\\n    }\\n    var sTime = startKey.time;\\n    var eTime = endKey.time;\\n    if (isKeyTop(startKey, axis))\\n        sO = slowOut;\\n    else {\\n        var prevKey = key($bm_sub(startKey.index, 1));\\n        var pVal = prevKey.value;\\n        if ($bm_isInstanceOfArray(value))\\n            pVal = pVal[axis];\\n        sOV = $bm_div($bm_sub(sVal, pVal), $bm_sub(eVal, pVal));\\n    }\\n    if (isKeyTop(endKey, axis)) {\\n        sI = slowIn;\\n        if (endKey.index != numKeys) {\\n            var nextKey = key($bm_sum(endKey.index, 1));\\n            var nVal = nextKey.value;\\n            if ($bm_isInstanceOfArray(value))\\n                nVal = nVal[axis];\\n            if (Math.abs(nVal - eVal) < 0.01 && doFollowThrough)\\n                sI = 1;\\n        }\\n    } else {\\n        var nextKey = key($bm_sum(endKey.index, 1));\\n        var nVal = nextKey.value;\\n        if ($bm_isInstanceOfArray(value))\\n            nVal = nVal[axis];\\n        sIV = $bm_div($bm_sub(eVal, sVal), $bm_sub(nVal, sVal));\\n    }\\n    if (endKey.index == numKeys && doFollowThrough) {\\n        sI = 1;\\n    }\\n    var val = value;\\n    if ($bm_isInstanceOfArray(value))\\n        val = val[axis];\\n    return $bm_sub(bezierInterpolation(time, sTime, eTime, sVal, eVal, [\\n        sO,\\n        sOV,\\n        sI,\\n        sIV\\n    ]), val);\\n}\\nfunction overlap() {\\n    var ol = zeroValue;\\n    if (isThisPosition && !hasParent)\\n        return zeroValue;\\n    ol = $bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisProperty), getPropWorldValue(time, thisProperty));\\n    var motionRatio = $bm_div($bm_div(length(zeroValue, ol), thisLayer.width), 2);\\n    if (isThisPosition) {\\n        var originalDistance = length(valueAtTime(0));\\n        motionRatio = $bm_div(length(zeroValue, ol), thisComp.width);\\n    }\\n    ol = $bm_sum(ol, getPropWorldValue(time, thisProperty));\\n    ol = $bm_sum(ol, $bm_mul($bm_mul($bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisLayer.anchorPoint), ol), motionRatio), flexibility));\\n    ol = thisLayer.fromWorld(ol);\\n    if (!isThisPosition)\\n        ol = $bm_sub(ol, value);\\n    else {\\n        ol = linear(flexibility, 0, 100, $bm_div(ol, 2), 0);\\n        var prevParentWorldPos = getLayerWorldPos($bm_sub(time, overlapDuration), parent);\\n        ol = $bm_sum(ol, $bm_mul($bm_mul($bm_mul(thisLayer.fromWorld(prevParentWorldPos), motionRatio), flexibility), 5));\\n    }\\n    return ol;\\n}\\nvar okToGo = false;\\nif (simulate && fx.enabled)\\n    okToGo = true;\\nelse if (numKeys > 1 && fx.enabled)\\n    okToGo = true;\\nif (okToGo) {\\n    var smartSmoothResult = zeroValue;\\n    if (doInterpolation) {\\n        if ($bm_isInstanceOfArray(value)) {\\n            if (value.length == 2)\\n                smartSmoothResult = [\\n                    smartSmooth(0),\\n                    smartSmooth(1)\\n                ];\\n            else if (value.length == 3)\\n                smartSmoothResult = [\\n                    smartSmooth(0),\\n                    smartSmooth(1),\\n                    smartSmooth(2)\\n                ];\\n            else if (value.length == 4)\\n                smartSmoothResult = [\\n                    smartSmooth(0),\\n                    smartSmooth(1),\\n                    smartSmooth(2),\\n                    smartSmooth(3)\\n                ];\\n        } else {\\n            smartSmoothResult = smartSmooth(0);\\n        }\\n    }\\n    if (doAnticipation)\\n        result = $bm_sum(result, anticipate());\\n    result = $bm_sum(result, smartSmoothResult);\\n    if (doFollowThrough)\\n        result = $bm_sum(result, followThrough());\\n    if (doOverlap)\\n        result = $bm_sum(result, overlap());\\n}\\n$bm_rt = result;"},"nm":"Transform"}],"nm":"Group 3","np":5,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[-1.609,-2.914]],"o":[[3.044,1.348],[0,0]],"v":[[-72.966,-63.407],[-65.729,-56.78]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.164705887437,0.192156866193,0.203921571374,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":1.453,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[-1.595,-3.497]],"o":[[3.793,0.619],[0,0]],"v":[[-79.664,-57.571],[-70.864,-50.849]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.164705887437,0.192156866193,0.203921571374,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":1.453,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":2,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[8.476,10.699],[6.21,1.954],[1.904,-6.226],[-0.533,-2.601],[-6.58,-8.938],[-6.675,-8.867]],"o":[[-5.132,-12.648],[-4.043,-5.103],[-6.21,-1.954],[-0.777,2.539],[2.229,10.873],[6.58,8.938],[0,0]],"v":[[-26.897,-15.116],[-49.7,-51.084],[-64.59,-63.253],[-80.765,-56.432],[-80.683,-48.553],[-66.206,-18.86],[-43.79,16.125]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.164705887437,0.192156866193,0.203921571374,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":1.453,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"fl","c":{"a":0,"k":[1,1,1,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 3","np":3,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[-43.5,16.5],"ix":2},"a":{"a":0,"k":[-43.5,16.5],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":1,"k":[{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":10,"s":[0]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":15.75,"s":[14]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":21.5,"s":[0]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":27.25,"s":[14]},{"t":33,"s":[0]}],"ix":6,"x":"var $bm_rt;\\nvar fx = effect(\'ŝlosilo pli pura 4\');\\nvar doAnticipation = fx(1).value;\\nvar doInterpolation = fx(2).value;\\nvar doFollowThrough = fx(3).value;\\nvar damping = $bm_div(fx(15).value, 10);\\nvar elasticity = $bm_div(fx(13).value, 10);\\nvar bounce = fx(17).value;\\nvar anticipationDuration = fx(5).value;\\nvar anticipationQuantity = $bm_div(fx(6).value, 100);\\nvar slowIn = $bm_div(fx(9).value, 100);\\nvar slowOut = $bm_div(fx(10).value, 100);\\nvar spatialMode = fx(21).value;\\nvar spatialDoInterpolation = fx(20).value;\\nvar moBlurPrecision = fx(32).value;\\nvar elasticityRandom = fx(14).value;\\nvar dampingRandom = fx(16).value;\\nvar softBody = fx(28).value;\\nvar flexibility = $bm_div(fx(29).value, 100);\\nvar doOverlap = fx(23).value;\\nvar overlapDuration = fx(24).value;\\nvar overlapRandom = fx(25).value;\\nvar threshold = $bm_div($bm_div(1, moBlurPrecision), 1000);\\nvar zeroValue;\\nif ($bm_isInstanceOfArray(value)) {\\n    if (value.length == 2)\\n        zeroValue = [\\n            0,\\n            0\\n        ];\\n    else if (value.length == 3)\\n        zeroValue = [\\n            0,\\n            0,\\n            0\\n        ];\\n    else if (value.length == 4)\\n        zeroValue = [\\n            0,\\n            0,\\n            0,\\n            0\\n        ];\\n} else\\n    zeroValue = 0;\\nvar isThisSpatial = isSpatial(thisProperty);\\nvar isThisPosition = thisProperty === $bm_transform.position;\\nvar simulate = false;\\nif (isThisSpatial) {\\n    doInterpolation = doInterpolation && spatialDoInterpolation;\\n    if (isThisPosition && thisProperty.numKeys > 0) {\\n        doOverlap = false;\\n        simulate = false;\\n    } else {\\n        simulate = spatialMode == 2;\\n        doOverlap = overlapDuration != 0 && doOverlap && simulate;\\n    }\\n} else {\\n    doOverlap = false;\\n}\\nif (!doOverlap) {\\n    overlapDuration = 0;\\n}\\nif (simulate && softBody && isThisSpatial && !isThisPosition && (doFollowThrough || doOverlap)) {\\n    var distanceRatio = $bm_div(length(valueAtTime(0), $bm_transform.anchorPoint), $bm_div(thisLayer.width, 2));\\n    distanceRatio = $bm_div($bm_sum(1, $bm_mul(distanceRatio, flexibility)), 2);\\n    if (doFollowThrough) {\\n        elasticity = $bm_div(elasticity, distanceRatio);\\n        damping = $bm_div(damping, distanceRatio);\\n    }\\n    if (doOverlap) {\\n        overlapDuration = $bm_mul(overlapDuration, distanceRatio);\\n    }\\n}\\nseedRandom(0, true);\\nif (doFollowThrough) {\\n    if (elasticityRandom > 0)\\n        elasticity = addNoise(elasticity, elasticityRandom);\\n    if (dampingRandom > 0)\\n        damping = addNoise(damping, dampingRandom);\\n}\\nif (doOverlap) {\\n    if (doOverlap && overlapRandom > 0)\\n        overlapDuration = addNoise(overlapDuration, overlapRandom);\\n}\\nvar result = value;\\nfunction isSpatial(prop) {\\n    if (!(prop.value instanceof Array))\\n        return false;\\n    if (prop.value.length != 2 && prop.value.length != 3)\\n        return false;\\n    try {\\n        if (typeof prop.speed !== \'undefined\')\\n            return true;\\n    } catch (e) {\\n        return false;\\n    }\\n}\\nfunction addNoise(val, quantity) {\\n    var randomValue = random(0.9, 1.1);\\n    var noiseValue = noise($bm_mul(valueAtTime(0), randomValue));\\n    noiseValue = $bm_mul(noiseValue, $bm_div(quantity, 100));\\n    return $bm_mul(val, $bm_sum(noiseValue, 1));\\n}\\nfunction isAfterLastKey() {\\n    if (numKeys == 0)\\n        return false;\\n    var nKey = nearestKey(time);\\n    return nKey.time <= time && nKey.index == numKeys;\\n}\\nfunction isStill(t, threshold) {\\n    var d = $bm_sub(valueAtTime(t), valueAtTime($bm_sum(t, framesToTime(1))));\\n    if ($bm_isInstanceOfArray(d)) {\\n        for (var i = 0; i < d.length; i++) {\\n            d[i] = Math.abs(d[i]);\\n            if (d[i] >= threshold) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    } else {\\n        d = Math.abs(d);\\n        return d < threshold;\\n    }\\n}\\nfunction bezierInterpolation(t, tMin, tMax, value1, value2, bezierPoints) {\\n    if (arguments.length !== 5 && arguments.length !== 6)\\n        return t;\\n    var a = $bm_sub(value2, value1);\\n    var b = $bm_sub(tMax, tMin);\\n    if (b == 0)\\n        return t;\\n    var c = clamp($bm_div($bm_sub(t, tMin), b), 0, 1);\\n    if (!(bezierPoints instanceof Array) || bezierPoints.length !== 4)\\n        bezierPoints = [\\n            0.33,\\n            0,\\n            0.66,\\n            1\\n        ];\\n    return $bm_sum($bm_mul(a, h(c, bezierPoints)), value1);\\n    function h(f, g) {\\n        var x = $bm_mul(3, g[0]);\\n        var j = $bm_sub($bm_mul(3, $bm_sub(g[2], g[0])), x);\\n        var k = $bm_sub($bm_sub(1, x), j);\\n        var l = $bm_mul(3, g[1]);\\n        var m = $bm_sub($bm_mul(3, $bm_sub(g[3], g[1])), l);\\n        var n = $bm_sub($bm_sub(1, l), m);\\n        var d = f;\\n        for (var i = 0; i < 5; i++) {\\n            var z = $bm_sub($bm_mul(d, $bm_sum(x, $bm_mul(d, $bm_sum(j, $bm_mul(d, k))))), f);\\n            if (Math.abs(z) < 0.001)\\n                break;\\n            d = $bm_sub(d, $bm_div(z, $bm_sum(x, $bm_mul(d, $bm_sum($bm_mul(2, j), $bm_mul($bm_mul(3, k), d))))));\\n        }\\n        return $bm_mul(d, $bm_sum(l, $bm_mul(d, $bm_sum(m, $bm_mul(d, n)))));\\n    }\\n}\\nfunction getPropWorldSpeed(t, prop) {\\n    return length(getPropWorldVelocity(t, prop));\\n}\\nfunction getPrevKey(t) {\\n    if (numKeys == 0)\\n        return null;\\n    var nKey = nearestKey(t);\\n    if (nKey.time <= t)\\n        return nKey;\\n    if (nKey.index > 1)\\n        return key($bm_sub(nKey.index, 1));\\n    return null;\\n}\\nfunction getNextKey(t) {\\n    if (numKeys == 0)\\n        return null;\\n    var nKey = nearestKey(t);\\n    if (nKey.time >= t)\\n        return nKey;\\n    if (nKey.index < numKeys)\\n        return key($bm_sum(nKey.index, 1));\\n    return null;\\n}\\nfunction getPropWorldVelocity(t, prop) {\\n    return $bm_mul($bm_sub(getPropWorldValue($bm_sum(t, 0.005), prop), getPropWorldValue($bm_sub(t, 0.005), prop)), 100);\\n}\\nfunction getLayerWorldPos(t, l) {\\n    return l.toWorld(l.anchorPoint, t);\\n}\\nfunction getPropWorldValue(t, prop) {\\n    if (isPosition(prop))\\n        return getLayerWorldPos(t, thisLayer);\\n    return thisLayer.toWorld(prop.valueAtTime(t), t);\\n}\\nfunction isPosition(prop) {\\n    return prop === $bm_transform.position;\\n}\\nfunction isKeyTop(k, axis) {\\n    var prevSpeed = velocityAtTime($bm_sub(k.time, threshold));\\n    var nextSpeed = velocityAtTime($bm_sum(k.time, threshold));\\n    if ($bm_isInstanceOfArray(value)) {\\n        prevSpeed = prevSpeed[axis];\\n        nextSpeed = nextSpeed[axis];\\n    }\\n    if (Math.abs(prevSpeed) < 0.01 || Math.abs(nextSpeed) < 0.01)\\n        return true;\\n    return $bm_mul(prevSpeed, nextSpeed) < 0;\\n}\\nfunction anticipate() {\\n    var anticipation = zeroValue;\\n    if (isAfterLastKey())\\n        return anticipation;\\n    if (numKeys < 2)\\n        return anticipation;\\n    var nextKey = getNextKey(time);\\n    var aKey = nextKey;\\n    if (!isStill(aKey.time - 0.1, 0.1)) {\\n        aKey = getPrevKey(time);\\n        if (!isStill(aKey.time - 0.1, 0.1))\\n            return anticipation;\\n    }\\n    if (aKey.index == numKeys)\\n        return anticipation;\\n    var anticipationMiddle = aKey.time;\\n    var anticipationStart = $bm_sub(anticipationMiddle, anticipationDuration);\\n    var anticipationEnd = key(aKey.index + 1).time;\\n    var startValue = anticipation;\\n    var midValue = $bm_mul($bm_sum($bm_neg(valueAtTime($bm_sum(anticipationMiddle, anticipationDuration))), aKey.value), anticipationQuantity);\\n    var endValue = anticipation;\\n    if (time < anticipationStart) {\\n        return anticipation;\\n    } else if (time < anticipationMiddle) {\\n        if ($bm_isInstanceOfArray(value)) {\\n            for (var i = 0; i < value.length; i++) {\\n                anticipation[i] = bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue[i], midValue[i], [\\n                    slowOut,\\n                    0,\\n                    slowIn,\\n                    1\\n                ]);\\n            }\\n            return anticipation;\\n        } else {\\n            return bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue, midValue, [\\n                slowOut,\\n                0,\\n                slowIn,\\n                1\\n            ]);\\n        }\\n    } else if (time <= anticipationEnd) {\\n        if ($bm_isInstanceOfArray(value)) {\\n            for (var i = 0; i < value.length; i++) {\\n                anticipation[i] = bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue[i], endValue[i], [\\n                    slowOut,\\n                    0,\\n                    slowIn,\\n                    1\\n                ]);\\n            }\\n            return anticipation;\\n        } else {\\n            return bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue, endValue, [\\n                slowOut,\\n                0,\\n                slowIn,\\n                1\\n            ]);\\n        }\\n    } else {\\n        return anticipation;\\n    }\\n}\\nfunction followThroughAtTime(t) {\\n    var fThrough = zeroValue;\\n    if (elasticity == 0)\\n        return fThrough;\\n    var propSpeed;\\n    if (!simulate) {\\n        if (numKeys < 2)\\n            return fThrough;\\n        if (nearestKey(t).index == 1)\\n            return fThrough;\\n        propSpeed = length(velocityAtTime(t));\\n        if (propSpeed >= threshold)\\n            return fThrough;\\n    } else {\\n        propSpeed = getPropWorldSpeed(t, thisProperty);\\n        if (propSpeed >= threshold)\\n            return fThrough;\\n    }\\n    var fThroughStart = 0;\\n    var fThroughTime = 0;\\n    if (simulate) {\\n        var speedI = getPropWorldSpeed(t, thisProperty);\\n        var i = t;\\n        while (speedI < threshold && i > 0) {\\n            i = $bm_sub(i, $bm_div(thisComp.frameDuration, moBlurPrecision));\\n            speedI = getPropWorldSpeed(i, thisProperty);\\n        }\\n        fThroughStart = i;\\n    } else {\\n        var fThroughKey = getPrevKey(t);\\n        fThroughStart = fThroughKey.time;\\n    }\\n    if (fThroughStart == 0)\\n        return fThrough;\\n    fThroughTime = $bm_sub(t, fThroughStart);\\n    if (simulate)\\n        fThrough = $bm_div(getPropWorldVelocity($bm_sub(fThroughStart, thisComp.frameDuration), thisProperty), 2);\\n    else\\n        fThrough = $bm_div(velocityAtTime($bm_sub(fThroughStart, thisComp.frameDuration)), 2);\\n    if (bounce) {\\n        var cycleDamp = Math.exp($bm_mul($bm_mul(fThroughTime, damping), 0.1));\\n        var damp = $bm_div(Math.exp($bm_mul(fThroughTime, damping)), $bm_div(elasticity, 2));\\n        var cycleDuration = $bm_div(1, $bm_mul(elasticity, 2));\\n        cycleDuration = Math.round(timeToFrames(cycleDuration));\\n        cycleDuration = framesToTime(cycleDuration);\\n        var midDuration = $bm_div(cycleDuration, 2);\\n        var maxValue = $bm_mul(fThrough, midDuration);\\n        var cycvarime = fThroughTime;\\n        var numEndCycles = 1;\\n        while (cycvarime > cycleDuration) {\\n            cycvarime = $bm_sub(cycvarime, cycleDuration);\\n            cycleDuration = $bm_div(cycleDuration, cycleDamp);\\n            cycleDuration = Math.round(timeToFrames(cycleDuration));\\n            if (cycleDuration < 2) {\\n                cycleDuration = 2;\\n                numEndCycles++;\\n            }\\n            cycleDuration = framesToTime(cycleDuration);\\n            midDuration = $bm_div(cycleDuration, 2);\\n            maxValue = $bm_div($bm_mul(fThrough, midDuration), damp);\\n            if (numEndCycles > 100 / damping && maxValue < threshold)\\n                return zeroValue;\\n        }\\n        if (cycvarime < midDuration)\\n            fThrough = bezierInterpolation(cycvarime, 0, midDuration, 0, maxValue, [\\n                0,\\n                0.1,\\n                slowIn,\\n                1\\n            ]);\\n        else\\n            fThrough = bezierInterpolation(cycvarime, midDuration, cycleDuration, maxValue, 0, [\\n                $bm_sub(1, slowIn),\\n                0,\\n                1,\\n                0.9\\n            ]);\\n    } else {\\n        var damp = Math.exp($bm_mul(fThroughTime, damping));\\n        var sinus = $bm_mul($bm_mul($bm_mul(elasticity, fThroughTime), 2), Math.PI);\\n        sinus = Math.sin(sinus);\\n        sinus = $bm_mul($bm_div(0.3, elasticity), sinus);\\n        sinus = $bm_div(sinus, damp);\\n        if (Math.abs(sinus) < $bm_div(threshold, 100))\\n            return 0;\\n        fThrough = $bm_mul(fThrough, sinus);\\n        if (threshold > 0) {\\n            fThrough = $bm_mul(fThrough, $bm_sub(1, $bm_div(propSpeed, threshold)));\\n        }\\n    }\\n    if (bounce) {\\n        var prevValue = valueAtTime($bm_sub(fThroughStart, thisComp.frameDuration));\\n        var startValue = valueAtTime(fThroughStart);\\n        if ($bm_isInstanceOfArray(value)) {\\n            for (var i = 0; i < prevValue.length; i++) {\\n                if (prevValue[i] > startValue[i])\\n                    fThrough[i] = Math.abs(fThrough[i]);\\n                if (prevValue[i] < startValue[i])\\n                    fThrough[i] = $bm_neg(Math.abs(fThrough[i]));\\n            }\\n        } else {\\n            if (prevValue > startValue)\\n                fThrough = Math.abs(fThrough);\\n            if (prevValue < startValue)\\n                fThrough = $bm_neg(Math.abs(fThrough));\\n        }\\n    }\\n    if (simulate) {\\n        if (!isThisPosition) {\\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer));\\n            fThrough = $bm_sub(thisLayer.fromWorld(fThrough), thisLayer.anchorPoint);\\n        } else if (thisLayer.hasParent) {\\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer.parent));\\n            fThrough = $bm_sub(thisLayer.parent.fromWorld(fThrough), thisLayer.parent.anchorPoint);\\n        }\\n    }\\n    return fThrough;\\n}\\nfunction followThrough() {\\n    var propSpeed = length(velocity);\\n    if (propSpeed < threshold)\\n        return followThroughAtTime($bm_sub(time, overlapDuration));\\n    var fThrough = zeroValue;\\n    var t = time;\\n    while (t > 0) {\\n        t = $bm_sub(t, thisComp.frameDuration);\\n        if (simulate)\\n            propSpeed = getPropWorldSpeed($bm_sub(t, overlapDuration), thisProperty);\\n        else\\n            propSpeed = length(velocityAtTime(t));\\n        if (propSpeed < threshold) {\\n            fThrough = followThroughAtTime($bm_sub(t, overlapDuration));\\n            break;\\n        }\\n    }\\n    return linear(time, t, $bm_sum(t, $bm_mul(anticipationDuration, 2)), fThrough, zeroValue);\\n}\\nfunction smartSmooth(axis) {\\n    var startKey = nearestKey(time);\\n    var endKey = startKey;\\n    if (time == startKey.time)\\n        return 0;\\n    if (time < startKey.time && startKey.index == 1)\\n        return 0;\\n    if (time > startKey.time && startKey.index == numKeys)\\n        return 0;\\n    if (time < startKey.time)\\n        startKey = key($bm_sub(startKey.index, 1));\\n    if (time > startKey.time)\\n        endKey = key($bm_sum(startKey.index, 1));\\n    var sI = 0.66;\\n    var sO = 0.33;\\n    var sIV = 1;\\n    var sOV = 0;\\n    var sVal = startKey.value;\\n    var eVal = endKey.value;\\n    if ($bm_isInstanceOfArray(value)) {\\n        sVal = sVal[axis];\\n        eVal = eVal[axis];\\n    }\\n    var sTime = startKey.time;\\n    var eTime = endKey.time;\\n    if (isKeyTop(startKey, axis))\\n        sO = slowOut;\\n    else {\\n        var prevKey = key($bm_sub(startKey.index, 1));\\n        var pVal = prevKey.value;\\n        if ($bm_isInstanceOfArray(value))\\n            pVal = pVal[axis];\\n        sOV = $bm_div($bm_sub(sVal, pVal), $bm_sub(eVal, pVal));\\n    }\\n    if (isKeyTop(endKey, axis)) {\\n        sI = slowIn;\\n        if (endKey.index != numKeys) {\\n            var nextKey = key($bm_sum(endKey.index, 1));\\n            var nVal = nextKey.value;\\n            if ($bm_isInstanceOfArray(value))\\n                nVal = nVal[axis];\\n            if (Math.abs(nVal - eVal) < 0.01 && doFollowThrough)\\n                sI = 1;\\n        }\\n    } else {\\n        var nextKey = key($bm_sum(endKey.index, 1));\\n        var nVal = nextKey.value;\\n        if ($bm_isInstanceOfArray(value))\\n            nVal = nVal[axis];\\n        sIV = $bm_div($bm_sub(eVal, sVal), $bm_sub(nVal, sVal));\\n    }\\n    if (endKey.index == numKeys && doFollowThrough) {\\n        sI = 1;\\n    }\\n    var val = value;\\n    if ($bm_isInstanceOfArray(value))\\n        val = val[axis];\\n    return $bm_sub(bezierInterpolation(time, sTime, eTime, sVal, eVal, [\\n        sO,\\n        sOV,\\n        sI,\\n        sIV\\n    ]), val);\\n}\\nfunction overlap() {\\n    var ol = zeroValue;\\n    if (isThisPosition && !hasParent)\\n        return zeroValue;\\n    ol = $bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisProperty), getPropWorldValue(time, thisProperty));\\n    var motionRatio = $bm_div($bm_div(length(zeroValue, ol), thisLayer.width), 2);\\n    if (isThisPosition) {\\n        var originalDistance = length(valueAtTime(0));\\n        motionRatio = $bm_div(length(zeroValue, ol), thisComp.width);\\n    }\\n    ol = $bm_sum(ol, getPropWorldValue(time, thisProperty));\\n    ol = $bm_sum(ol, $bm_mul($bm_mul($bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisLayer.anchorPoint), ol), motionRatio), flexibility));\\n    ol = thisLayer.fromWorld(ol);\\n    if (!isThisPosition)\\n        ol = $bm_sub(ol, value);\\n    else {\\n        ol = linear(flexibility, 0, 100, $bm_div(ol, 2), 0);\\n        var prevParentWorldPos = getLayerWorldPos($bm_sub(time, overlapDuration), parent);\\n        ol = $bm_sum(ol, $bm_mul($bm_mul($bm_mul(thisLayer.fromWorld(prevParentWorldPos), motionRatio), flexibility), 5));\\n    }\\n    return ol;\\n}\\nvar okToGo = false;\\nif (simulate && fx.enabled)\\n    okToGo = true;\\nelse if (numKeys > 1 && fx.enabled)\\n    okToGo = true;\\nif (okToGo) {\\n    var smartSmoothResult = zeroValue;\\n    if (doInterpolation) {\\n        if ($bm_isInstanceOfArray(value)) {\\n            if (value.length == 2)\\n                smartSmoothResult = [\\n                    smartSmooth(0),\\n                    smartSmooth(1)\\n                ];\\n            else if (value.length == 3)\\n                smartSmoothResult = [\\n                    smartSmooth(0),\\n                    smartSmooth(1),\\n                    smartSmooth(2)\\n                ];\\n            else if (value.length == 4)\\n                smartSmoothResult = [\\n                    smartSmooth(0),\\n                    smartSmooth(1),\\n                    smartSmooth(2),\\n                    smartSmooth(3)\\n                ];\\n        } else {\\n            smartSmoothResult = smartSmooth(0);\\n        }\\n    }\\n    if (doAnticipation)\\n        result = $bm_sum(result, anticipate());\\n    result = $bm_sum(result, smartSmoothResult);\\n    if (doFollowThrough)\\n        result = $bm_sum(result, followThrough());\\n    if (doOverlap)\\n        result = $bm_sum(result, overlap());\\n}\\n$bm_rt = result;"},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 4","np":3,"cix":2,"bm":0,"ix":4,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0]],"o":[[0,0]],"v":[[-71.541,42.351]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.164705887437,0.192156866193,0.203921571374,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":1.453,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[1.929,0.831],[0.507,0.225]],"o":[[0,0],[0,0],[0,0],[0,0],[-1.941,-0.586],[-0.507,-0.225],[0,0]],"v":[[-4.059,10.903],[-2.232,18.464],[5.31,22.302],[10.153,18.337],[9.002,9.445],[3.188,7.323],[1.666,6.649]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.164705887437,0.192156866193,0.203921571374,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":1.453,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0,0],[-0.248,2.983],[-0.359,0.354],[-0.831,-0.221],[-1.851,0.355],[0,0],[1.934,0.828],[0.496,0.23]],"o":[[0,0],[0,0],[-1.565,-2.564],[0.051,-0.533],[0.599,-0.613],[1.839,0.466],[0,0],[-1.941,-0.585],[-0.496,-0.23],[0,0]],"v":[[-4.06,10.891],[-2.226,18.468],[2.943,21.099],[0.684,12.478],[1.19,10.991],[3.586,10.846],[9.202,11.02],[8.997,9.439],[3.181,7.329],[1.669,6.649]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.117647059262,0.737254917622,0.40000000596,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":1,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[1.934,0.828],[0.496,0.23]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[-1.941,-0.585],[-0.496,-0.23],[0,0]],"v":[[-4.06,10.891],[-2.226,18.468],[5.317,22.308],[10.16,18.33],[9.202,11.02],[8.997,9.439],[3.181,7.329],[1.669,6.649]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.227450981736,0.800000011921,0.505882382393,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 3","np":2,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0.348,0.11],[0,0],[0,0],[0,0],[0.439,-0.011],[0.031,-0.001],[0.585,0.013],[0.246,0.008],[0.878,0.062],[2.406,0.504],[0,0],[1.432,0.411],[0.078,0.04]],"o":[[0,0],[0,0],[0,0],[-0.449,0.039],[-0.05,0.008],[-0.59,0.001],[-0.251,0.006],[-0.875,-0.027],[-2.4,-0.184],[0,0],[-1.429,-0.292],[-0.089,-0.012],[-0.353,-0.095]],"v":[[9.002,9.445],[10.153,18.337],[11.272,27.062],[28.368,11.985],[27.029,12.04],[26.916,12.05],[25.164,12.045],[24.423,12.036],[21.801,11.907],[14.583,10.896],[14.57,10.89],[10.288,9.832],[10.037,9.754]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.164705887437,0.192156866193,0.203921571374,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":1.453,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 4","np":2,"cix":2,"bm":0,"ix":4,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-0.302,-0.758],[0.396,-0.514],[2.252,-0.711],[0.953,0.172],[0.206,0.06],[0,0],[0,0],[0.443,-0.021],[0.024,-0.01],[0.597,0.013],[0.244,0.013],[0.886,0.071],[2.404,0.508],[0.778,0.195],[0,0],[-2.132,-0.235]],"o":[[0.26,0.647],[-1.538,1.924],[-0.91,0.275],[-0.195,-0.032],[0,0],[0,0],[-0.45,0.039],[-0.042,0.001],[-0.597,-0.013],[-0.251,0.006],[-0.865,-0.015],[-2.397,-0.191],[-0.785,-0.176],[0,0],[1.851,1.278],[0.719,0.075]],"v":[[20.187,14.128],[19.65,15.98],[13.806,20.029],[10.985,20.316],[10.395,20.172],[11.279,27.064],[28.376,11.988],[27.029,12.041],[26.921,12.053],[25.16,12.051],[24.42,12.033],[21.793,11.904],[14.578,10.893],[12.211,10.337],[12.185,10.86],[18.301,13.168]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.866666674614,0.89411765337,0.933333337307,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 5","np":2,"cix":2,"bm":0,"ix":5,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0.352,0.112],[0,0],[0,0],[0,0],[0,0],[0.443,-0.021],[0.024,-0.01],[0.597,0.013],[0.244,0.013],[0.886,0.071],[2.404,0.508],[0.778,0.195],[0.635,0.189],[0.07,0.036]],"o":[[0,0],[0,0],[0,0],[0,0],[-0.45,0.039],[-0.042,0.001],[-0.597,-0.013],[-0.251,0.006],[-0.865,-0.015],[-2.397,-0.191],[-0.785,-0.176],[-0.649,-0.152],[-0.084,0.002],[-0.359,-0.093]],"v":[[8.997,9.439],[10.16,18.33],[10.395,20.172],[11.279,27.064],[28.376,11.988],[27.029,12.041],[26.921,12.053],[25.16,12.051],[24.42,12.033],[21.793,11.904],[14.578,10.893],[12.211,10.337],[10.285,9.826],[10.044,9.748]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[1,1,1,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 6","np":2,"cix":2,"bm":0,"ix":6,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[3.173,2.644],[0,0],[0,0],[0,0],[0,0],[0,0],[0.751,0.382],[0.604,0.33]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[-0.747,-0.336],[-0.611,-0.311],[-3.635,-2.007]],"v":[[-12.642,-2.403],[-9.611,15.045],[-6.661,12.833],[-4.06,10.891],[-0.379,8.156],[1.669,6.649],[-0.58,5.549],[-2.407,4.597]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.164705887437,0.192156866193,0.203921571374,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":1.453,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 7","np":2,"cix":2,"bm":0,"ix":7,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[3.173,2.644],[0,0],[0,0],[-0.281,2.34],[-0.582,0.062],[-0.238,-0.143],[-1.566,-1.378],[0,0],[0.751,0.382],[0.604,0.33]],"o":[[0,0],[0,0],[-0.483,-2.349],[0.079,-0.608],[0.233,-0.015],[1.764,1.01],[0,0],[-0.747,-0.336],[-0.611,-0.311],[-3.635,-2.007]],"v":[[-12.642,-2.403],[-9.611,15.045],[-6.661,12.833],[-6.984,5.712],[-6.111,4.299],[-5.378,4.56],[-0.379,8.156],[1.669,6.649],[-0.58,5.549],[-2.407,4.597]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.866666674614,0.89411765337,0.933333337307,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 8","np":2,"cix":2,"bm":0,"ix":8,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[3.173,2.644],[0,0],[0,0],[0,0],[0,0],[0,0],[0.751,0.382],[0.604,0.33]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[-0.747,-0.336],[-0.611,-0.311],[-3.635,-2.007]],"v":[[-12.642,-2.403],[-9.611,15.045],[-6.661,12.833],[-4.06,10.891],[-0.379,8.156],[1.669,6.649],[-0.58,5.549],[-2.407,4.597]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[1,1,1,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 9","np":2,"cix":2,"bm":0,"ix":9,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":9,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[-14.667,16.524],[-4.911,-0.399],[-1.902,-1.564],[-11.454,-2.739],[-6.903,-0.858],[-1.899,-2.808],[-0.064,-3.296],[11.419,-17.899]],"o":[[2.314,-21.975],[2.841,-3.222],[2.455,0.199],[9.096,7.481],[6.765,1.618],[3.364,0.418],[1.891,2.796],[0.61,21.225],[0,0]],"v":[[-73.676,77.159],[-35.26,-9.751],[-23.764,-18.523],[-17.396,-15.024],[13.969,0.574],[34.58,3.753],[43.612,7.676],[45.486,18.954],[16.119,109.941]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.164705887437,0.192156866193,0.203921571374,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":1.453,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 3","np":2,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-0.54,1.335],[-7.34,6.016],[-0.026,0.248],[0.132,0.186],[1.633,2.298],[0.419,-0.945],[2.071,-9.158]],"o":[[3.739,-8.723],[0.193,-0.158],[0.024,-0.227],[-1.633,-2.298],[0.349,0.491],[-3.809,8.596],[0.734,-1.255]],"v":[[-59.238,41.308],[-44.163,17.496],[-43.733,16.909],[-43.98,16.286],[-48.879,9.393],[-53.059,17.989],[-73.306,75.61]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.866666674614,0.89411765337,0.933333337307,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 4","np":2,"cix":2,"bm":0,"ix":4,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[-14.667,16.524],[-4.911,-0.399],[-1.902,-1.564],[-11.454,-2.739],[-6.903,-0.858],[-1.899,-2.808],[-0.064,-3.296],[11.419,-17.899]],"o":[[2.314,-21.975],[2.841,-3.222],[2.455,0.199],[9.096,7.481],[6.765,1.618],[3.364,0.418],[1.891,2.796],[0.61,21.225],[0,0]],"v":[[-73.676,77.159],[-35.26,-9.751],[-23.764,-18.523],[-17.396,-15.024],[13.969,0.574],[34.58,3.753],[43.612,7.676],[45.486,18.954],[14.246,113.467]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[1,1,1,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 5","np":2,"cix":2,"bm":0,"ix":5,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0]],"o":[[0,0]],"v":[[116.487,41.556]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.164705887437,0.192156866193,0.203921571374,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":1.453,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0]],"o":[[0,0],[0,0]],"v":[[116.464,41.552],[116.482,41.559]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.866666674614,0.89411765337,0.933333337307,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":2,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0]],"o":[[0,0],[0,0]],"v":[[116.464,41.552],[116.482,41.559]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[1,1,1,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 3","np":2,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 6","np":3,"cix":2,"bm":0,"ix":6,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 5","np":6,"cix":2,"bm":0,"ix":5,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":120,"st":0,"bm":0},{"ddd":0,"ind":4,"ty":4,"nm":"Layer 5","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":1,"k":[{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":0,"s":[246.6,309.232,0],"to":[0.833,-6.667,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":2,"s":[251.6,269.232,0],"to":[0,0,0],"ti":[0.833,-6.667,0]},{"t":9,"s":[246.6,309.232,0]}],"ix":2,"l":2,"x":"var $bm_rt;\\nvar fx = effect(\'ŝlosilo pli pura 3\');\\nvar doAnticipation = fx(1).value;\\nvar doInterpolation = fx(2).value;\\nvar doFollowThrough = fx(3).value;\\nvar damping = $bm_div(fx(15).value, 10);\\nvar elasticity = $bm_div(fx(13).value, 10);\\nvar bounce = fx(17).value;\\nvar anticipationDuration = fx(5).value;\\nvar anticipationQuantity = $bm_div(fx(6).value, 100);\\nvar slowIn = $bm_div(fx(9).value, 100);\\nvar slowOut = $bm_div(fx(10).value, 100);\\nvar spatialMode = fx(21).value;\\nvar spatialDoInterpolation = fx(20).value;\\nvar moBlurPrecision = fx(32).value;\\nvar elasticityRandom = fx(14).value;\\nvar dampingRandom = fx(16).value;\\nvar softBody = fx(28).value;\\nvar flexibility = $bm_div(fx(29).value, 100);\\nvar doOverlap = fx(23).value;\\nvar overlapDuration = fx(24).value;\\nvar overlapRandom = fx(25).value;\\nvar threshold = $bm_div($bm_div(1, moBlurPrecision), 1000);\\nvar zeroValue;\\nif ($bm_isInstanceOfArray(value)) {\\n    if (value.length == 2)\\n        zeroValue = [\\n            0,\\n            0\\n        ];\\n    else if (value.length == 3)\\n        zeroValue = [\\n            0,\\n            0,\\n            0\\n        ];\\n    else if (value.length == 4)\\n        zeroValue = [\\n            0,\\n            0,\\n            0,\\n            0\\n        ];\\n} else\\n    zeroValue = 0;\\nvar isThisSpatial = isSpatial(thisProperty);\\nvar isThisPosition = thisProperty === $bm_transform.position;\\nvar simulate = false;\\nif (isThisSpatial) {\\n    doInterpolation = doInterpolation && spatialDoInterpolation;\\n    if (isThisPosition && thisProperty.numKeys > 0) {\\n        doOverlap = false;\\n        simulate = false;\\n    } else {\\n        simulate = spatialMode == 2;\\n        doOverlap = overlapDuration != 0 && doOverlap && simulate;\\n    }\\n} else {\\n    doOverlap = false;\\n}\\nif (!doOverlap) {\\n    overlapDuration = 0;\\n}\\nif (simulate && softBody && isThisSpatial && !isThisPosition && (doFollowThrough || doOverlap)) {\\n    var distanceRatio = $bm_div(length(valueAtTime(0), $bm_transform.anchorPoint), $bm_div(thisLayer.width, 2));\\n    distanceRatio = $bm_div($bm_sum(1, $bm_mul(distanceRatio, flexibility)), 2);\\n    if (doFollowThrough) {\\n        elasticity = $bm_div(elasticity, distanceRatio);\\n        damping = $bm_div(damping, distanceRatio);\\n    }\\n    if (doOverlap) {\\n        overlapDuration = $bm_mul(overlapDuration, distanceRatio);\\n    }\\n}\\nseedRandom(0, true);\\nif (doFollowThrough) {\\n    if (elasticityRandom > 0)\\n        elasticity = addNoise(elasticity, elasticityRandom);\\n    if (dampingRandom > 0)\\n        damping = addNoise(damping, dampingRandom);\\n}\\nif (doOverlap) {\\n    if (doOverlap && overlapRandom > 0)\\n        overlapDuration = addNoise(overlapDuration, overlapRandom);\\n}\\nvar result = value;\\nfunction isSpatial(prop) {\\n    if (!(prop.value instanceof Array))\\n        return false;\\n    if (prop.value.length != 2 && prop.value.length != 3)\\n        return false;\\n    try {\\n        if (typeof prop.speed !== \'undefined\')\\n            return true;\\n    } catch (e) {\\n        return false;\\n    }\\n}\\nfunction addNoise(val, quantity) {\\n    var randomValue = random(0.9, 1.1);\\n    var noiseValue = noise($bm_mul(valueAtTime(0), randomValue));\\n    noiseValue = $bm_mul(noiseValue, $bm_div(quantity, 100));\\n    return $bm_mul(val, $bm_sum(noiseValue, 1));\\n}\\nfunction isAfterLastKey() {\\n    if (numKeys == 0)\\n        return false;\\n    var nKey = nearestKey(time);\\n    return nKey.time <= time && nKey.index == numKeys;\\n}\\nfunction isStill(t, threshold) {\\n    var d = $bm_sub(valueAtTime(t), valueAtTime($bm_sum(t, framesToTime(1))));\\n    if ($bm_isInstanceOfArray(d)) {\\n        for (var i = 0; i < d.length; i++) {\\n            d[i] = Math.abs(d[i]);\\n            if (d[i] >= threshold) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    } else {\\n        d = Math.abs(d);\\n        return d < threshold;\\n    }\\n}\\nfunction bezierInterpolation(t, tMin, tMax, value1, value2, bezierPoints) {\\n    if (arguments.length !== 5 && arguments.length !== 6)\\n        return t;\\n    var a = $bm_sub(value2, value1);\\n    var b = $bm_sub(tMax, tMin);\\n    if (b == 0)\\n        return t;\\n    var c = clamp($bm_div($bm_sub(t, tMin), b), 0, 1);\\n    if (!(bezierPoints instanceof Array) || bezierPoints.length !== 4)\\n        bezierPoints = [\\n            0.33,\\n            0,\\n            0.66,\\n            1\\n        ];\\n    return $bm_sum($bm_mul(a, h(c, bezierPoints)), value1);\\n    function h(f, g) {\\n        var x = $bm_mul(3, g[0]);\\n        var j = $bm_sub($bm_mul(3, $bm_sub(g[2], g[0])), x);\\n        var k = $bm_sub($bm_sub(1, x), j);\\n        var l = $bm_mul(3, g[1]);\\n        var m = $bm_sub($bm_mul(3, $bm_sub(g[3], g[1])), l);\\n        var n = $bm_sub($bm_sub(1, l), m);\\n        var d = f;\\n        for (var i = 0; i < 5; i++) {\\n            var z = $bm_sub($bm_mul(d, $bm_sum(x, $bm_mul(d, $bm_sum(j, $bm_mul(d, k))))), f);\\n            if (Math.abs(z) < 0.001)\\n                break;\\n            d = $bm_sub(d, $bm_div(z, $bm_sum(x, $bm_mul(d, $bm_sum($bm_mul(2, j), $bm_mul($bm_mul(3, k), d))))));\\n        }\\n        return $bm_mul(d, $bm_sum(l, $bm_mul(d, $bm_sum(m, $bm_mul(d, n)))));\\n    }\\n}\\nfunction getPropWorldSpeed(t, prop) {\\n    return length(getPropWorldVelocity(t, prop));\\n}\\nfunction getPrevKey(t) {\\n    if (numKeys == 0)\\n        return null;\\n    var nKey = nearestKey(t);\\n    if (nKey.time <= t)\\n        return nKey;\\n    if (nKey.index > 1)\\n        return key($bm_sub(nKey.index, 1));\\n    return null;\\n}\\nfunction getNextKey(t) {\\n    if (numKeys == 0)\\n        return null;\\n    var nKey = nearestKey(t);\\n    if (nKey.time >= t)\\n        return nKey;\\n    if (nKey.index < numKeys)\\n        return key($bm_sum(nKey.index, 1));\\n    return null;\\n}\\nfunction getPropWorldVelocity(t, prop) {\\n    return $bm_mul($bm_sub(getPropWorldValue($bm_sum(t, 0.005), prop), getPropWorldValue($bm_sub(t, 0.005), prop)), 100);\\n}\\nfunction getLayerWorldPos(t, l) {\\n    return l.toWorld(l.anchorPoint, t);\\n}\\nfunction getPropWorldValue(t, prop) {\\n    if (isPosition(prop))\\n        return getLayerWorldPos(t, thisLayer);\\n    return thisLayer.toWorld(prop.valueAtTime(t), t);\\n}\\nfunction isPosition(prop) {\\n    return prop === $bm_transform.position;\\n}\\nfunction isKeyTop(k, axis) {\\n    var prevSpeed = velocityAtTime($bm_sub(k.time, threshold));\\n    var nextSpeed = velocityAtTime($bm_sum(k.time, threshold));\\n    if ($bm_isInstanceOfArray(value)) {\\n        prevSpeed = prevSpeed[axis];\\n        nextSpeed = nextSpeed[axis];\\n    }\\n    if (Math.abs(prevSpeed) < 0.01 || Math.abs(nextSpeed) < 0.01)\\n        return true;\\n    return $bm_mul(prevSpeed, nextSpeed) < 0;\\n}\\nfunction anticipate() {\\n    var anticipation = zeroValue;\\n    if (isAfterLastKey())\\n        return anticipation;\\n    if (numKeys < 2)\\n        return anticipation;\\n    var nextKey = getNextKey(time);\\n    var aKey = nextKey;\\n    if (!isStill(aKey.time - 0.1, 0.1)) {\\n        aKey = getPrevKey(time);\\n        if (!isStill(aKey.time - 0.1, 0.1))\\n            return anticipation;\\n    }\\n    if (aKey.index == numKeys)\\n        return anticipation;\\n    var anticipationMiddle = aKey.time;\\n    var anticipationStart = $bm_sub(anticipationMiddle, anticipationDuration);\\n    var anticipationEnd = key(aKey.index + 1).time;\\n    var startValue = anticipation;\\n    var midValue = $bm_mul($bm_sum($bm_neg(valueAtTime($bm_sum(anticipationMiddle, anticipationDuration))), aKey.value), anticipationQuantity);\\n    var endValue = anticipation;\\n    if (time < anticipationStart) {\\n        return anticipation;\\n    } else if (time < anticipationMiddle) {\\n        if ($bm_isInstanceOfArray(value)) {\\n            for (var i = 0; i < value.length; i++) {\\n                anticipation[i] = bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue[i], midValue[i], [\\n                    slowOut,\\n                    0,\\n                    slowIn,\\n                    1\\n                ]);\\n            }\\n            return anticipation;\\n        } else {\\n            return bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue, midValue, [\\n                slowOut,\\n                0,\\n                slowIn,\\n                1\\n            ]);\\n        }\\n    } else if (time <= anticipationEnd) {\\n        if ($bm_isInstanceOfArray(value)) {\\n            for (var i = 0; i < value.length; i++) {\\n                anticipation[i] = bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue[i], endValue[i], [\\n                    slowOut,\\n                    0,\\n                    slowIn,\\n                    1\\n                ]);\\n            }\\n            return anticipation;\\n        } else {\\n            return bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue, endValue, [\\n                slowOut,\\n                0,\\n                slowIn,\\n                1\\n            ]);\\n        }\\n    } else {\\n        return anticipation;\\n    }\\n}\\nfunction followThroughAtTime(t) {\\n    var fThrough = zeroValue;\\n    if (elasticity == 0)\\n        return fThrough;\\n    var propSpeed;\\n    if (!simulate) {\\n        if (numKeys < 2)\\n            return fThrough;\\n        if (nearestKey(t).index == 1)\\n            return fThrough;\\n        propSpeed = length(velocityAtTime(t));\\n        if (propSpeed >= threshold)\\n            return fThrough;\\n    } else {\\n        propSpeed = getPropWorldSpeed(t, thisProperty);\\n        if (propSpeed >= threshold)\\n            return fThrough;\\n    }\\n    var fThroughStart = 0;\\n    var fThroughTime = 0;\\n    if (simulate) {\\n        var speedI = getPropWorldSpeed(t, thisProperty);\\n        var i = t;\\n        while (speedI < threshold && i > 0) {\\n            i = $bm_sub(i, $bm_div(thisComp.frameDuration, moBlurPrecision));\\n            speedI = getPropWorldSpeed(i, thisProperty);\\n        }\\n        fThroughStart = i;\\n    } else {\\n        var fThroughKey = getPrevKey(t);\\n        fThroughStart = fThroughKey.time;\\n    }\\n    if (fThroughStart == 0)\\n        return fThrough;\\n    fThroughTime = $bm_sub(t, fThroughStart);\\n    if (simulate)\\n        fThrough = $bm_div(getPropWorldVelocity($bm_sub(fThroughStart, thisComp.frameDuration), thisProperty), 2);\\n    else\\n        fThrough = $bm_div(velocityAtTime($bm_sub(fThroughStart, thisComp.frameDuration)), 2);\\n    if (bounce) {\\n        var cycleDamp = Math.exp($bm_mul($bm_mul(fThroughTime, damping), 0.1));\\n        var damp = $bm_div(Math.exp($bm_mul(fThroughTime, damping)), $bm_div(elasticity, 2));\\n        var cycleDuration = $bm_div(1, $bm_mul(elasticity, 2));\\n        cycleDuration = Math.round(timeToFrames(cycleDuration));\\n        cycleDuration = framesToTime(cycleDuration);\\n        var midDuration = $bm_div(cycleDuration, 2);\\n        var maxValue = $bm_mul(fThrough, midDuration);\\n        var cycvarime = fThroughTime;\\n        var numEndCycles = 1;\\n        while (cycvarime > cycleDuration) {\\n            cycvarime = $bm_sub(cycvarime, cycleDuration);\\n            cycleDuration = $bm_div(cycleDuration, cycleDamp);\\n            cycleDuration = Math.round(timeToFrames(cycleDuration));\\n            if (cycleDuration < 2) {\\n                cycleDuration = 2;\\n                numEndCycles++;\\n            }\\n            cycleDuration = framesToTime(cycleDuration);\\n            midDuration = $bm_div(cycleDuration, 2);\\n            maxValue = $bm_div($bm_mul(fThrough, midDuration), damp);\\n            if (numEndCycles > 100 / damping && maxValue < threshold)\\n                return zeroValue;\\n        }\\n        if (cycvarime < midDuration)\\n            fThrough = bezierInterpolation(cycvarime, 0, midDuration, 0, maxValue, [\\n                0,\\n                0.1,\\n                slowIn,\\n                1\\n            ]);\\n        else\\n            fThrough = bezierInterpolation(cycvarime, midDuration, cycleDuration, maxValue, 0, [\\n                $bm_sub(1, slowIn),\\n                0,\\n                1,\\n                0.9\\n            ]);\\n    } else {\\n        var damp = Math.exp($bm_mul(fThroughTime, damping));\\n        var sinus = $bm_mul($bm_mul($bm_mul(elasticity, fThroughTime), 2), Math.PI);\\n        sinus = Math.sin(sinus);\\n        sinus = $bm_mul($bm_div(0.3, elasticity), sinus);\\n        sinus = $bm_div(sinus, damp);\\n        if (Math.abs(sinus) < $bm_div(threshold, 100))\\n            return 0;\\n        fThrough = $bm_mul(fThrough, sinus);\\n        if (threshold > 0) {\\n            fThrough = $bm_mul(fThrough, $bm_sub(1, $bm_div(propSpeed, threshold)));\\n        }\\n    }\\n    if (bounce) {\\n        var prevValue = valueAtTime($bm_sub(fThroughStart, thisComp.frameDuration));\\n        var startValue = valueAtTime(fThroughStart);\\n        if ($bm_isInstanceOfArray(value)) {\\n            for (var i = 0; i < prevValue.length; i++) {\\n                if (prevValue[i] > startValue[i])\\n                    fThrough[i] = Math.abs(fThrough[i]);\\n                if (prevValue[i] < startValue[i])\\n                    fThrough[i] = $bm_neg(Math.abs(fThrough[i]));\\n            }\\n        } else {\\n            if (prevValue > startValue)\\n                fThrough = Math.abs(fThrough);\\n            if (prevValue < startValue)\\n                fThrough = $bm_neg(Math.abs(fThrough));\\n        }\\n    }\\n    if (simulate) {\\n        if (!isThisPosition) {\\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer));\\n            fThrough = $bm_sub(thisLayer.fromWorld(fThrough), thisLayer.anchorPoint);\\n        } else if (thisLayer.hasParent) {\\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer.parent));\\n            fThrough = $bm_sub(thisLayer.parent.fromWorld(fThrough), thisLayer.parent.anchorPoint);\\n        }\\n    }\\n    return fThrough;\\n}\\nfunction followThrough() {\\n    var propSpeed = length(velocity);\\n    if (propSpeed < threshold)\\n        return followThroughAtTime($bm_sub(time, overlapDuration));\\n    var fThrough = zeroValue;\\n    var t = time;\\n    while (t > 0) {\\n        t = $bm_sub(t, thisComp.frameDuration);\\n        if (simulate)\\n            propSpeed = getPropWorldSpeed($bm_sub(t, overlapDuration), thisProperty);\\n        else\\n            propSpeed = length(velocityAtTime(t));\\n        if (propSpeed < threshold) {\\n            fThrough = followThroughAtTime($bm_sub(t, overlapDuration));\\n            break;\\n        }\\n    }\\n    return linear(time, t, $bm_sum(t, $bm_mul(anticipationDuration, 2)), fThrough, zeroValue);\\n}\\nfunction smartSmooth(axis) {\\n    var startKey = nearestKey(time);\\n    var endKey = startKey;\\n    if (time == startKey.time)\\n        return 0;\\n    if (time < startKey.time && startKey.index == 1)\\n        return 0;\\n    if (time > startKey.time && startKey.index == numKeys)\\n        return 0;\\n    if (time < startKey.time)\\n        startKey = key($bm_sub(startKey.index, 1));\\n    if (time > startKey.time)\\n        endKey = key($bm_sum(startKey.index, 1));\\n    var sI = 0.66;\\n    var sO = 0.33;\\n    var sIV = 1;\\n    var sOV = 0;\\n    var sVal = startKey.value;\\n    var eVal = endKey.value;\\n    if ($bm_isInstanceOfArray(value)) {\\n        sVal = sVal[axis];\\n        eVal = eVal[axis];\\n    }\\n    var sTime = startKey.time;\\n    var eTime = endKey.time;\\n    if (isKeyTop(startKey, axis))\\n        sO = slowOut;\\n    else {\\n        var prevKey = key($bm_sub(startKey.index, 1));\\n        var pVal = prevKey.value;\\n        if ($bm_isInstanceOfArray(value))\\n            pVal = pVal[axis];\\n        sOV = $bm_div($bm_sub(sVal, pVal), $bm_sub(eVal, pVal));\\n    }\\n    if (isKeyTop(endKey, axis)) {\\n        sI = slowIn;\\n        if (endKey.index != numKeys) {\\n            var nextKey = key($bm_sum(endKey.index, 1));\\n            var nVal = nextKey.value;\\n            if ($bm_isInstanceOfArray(value))\\n                nVal = nVal[axis];\\n            if (Math.abs(nVal - eVal) < 0.01 && doFollowThrough)\\n                sI = 1;\\n        }\\n    } else {\\n        var nextKey = key($bm_sum(endKey.index, 1));\\n        var nVal = nextKey.value;\\n        if ($bm_isInstanceOfArray(value))\\n            nVal = nVal[axis];\\n        sIV = $bm_div($bm_sub(eVal, sVal), $bm_sub(nVal, sVal));\\n    }\\n    if (endKey.index == numKeys && doFollowThrough) {\\n        sI = 1;\\n    }\\n    var val = value;\\n    if ($bm_isInstanceOfArray(value))\\n        val = val[axis];\\n    return $bm_sub(bezierInterpolation(time, sTime, eTime, sVal, eVal, [\\n        sO,\\n        sOV,\\n        sI,\\n        sIV\\n    ]), val);\\n}\\nfunction overlap() {\\n    var ol = zeroValue;\\n    if (isThisPosition && !hasParent)\\n        return zeroValue;\\n    ol = $bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisProperty), getPropWorldValue(time, thisProperty));\\n    var motionRatio = $bm_div($bm_div(length(zeroValue, ol), thisLayer.width), 2);\\n    if (isThisPosition) {\\n        var originalDistance = length(valueAtTime(0));\\n        motionRatio = $bm_div(length(zeroValue, ol), thisComp.width);\\n    }\\n    ol = $bm_sum(ol, getPropWorldValue(time, thisProperty));\\n    ol = $bm_sum(ol, $bm_mul($bm_mul($bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisLayer.anchorPoint), ol), motionRatio), flexibility));\\n    ol = thisLayer.fromWorld(ol);\\n    if (!isThisPosition)\\n        ol = $bm_sub(ol, value);\\n    else {\\n        ol = linear(flexibility, 0, 100, $bm_div(ol, 2), 0);\\n        var prevParentWorldPos = getLayerWorldPos($bm_sub(time, overlapDuration), parent);\\n        ol = $bm_sum(ol, $bm_mul($bm_mul($bm_mul(thisLayer.fromWorld(prevParentWorldPos), motionRatio), flexibility), 5));\\n    }\\n    return ol;\\n}\\nvar okToGo = false;\\nif (simulate && fx.enabled)\\n    okToGo = true;\\nelse if (numKeys > 1 && fx.enabled)\\n    okToGo = true;\\nif (okToGo) {\\n    var smartSmoothResult = zeroValue;\\n    if (doInterpolation) {\\n        if ($bm_isInstanceOfArray(value)) {\\n            if (value.length == 2)\\n                smartSmoothResult = [\\n                    smartSmooth(0),\\n                    smartSmooth(1)\\n                ];\\n            else if (value.length == 3)\\n                smartSmoothResult = [\\n                    smartSmooth(0),\\n                    smartSmooth(1),\\n                    smartSmooth(2)\\n                ];\\n            else if (value.length == 4)\\n                smartSmoothResult = [\\n                    smartSmooth(0),\\n                    smartSmooth(1),\\n                    smartSmooth(2),\\n                    smartSmooth(3)\\n                ];\\n        } else {\\n            smartSmoothResult = smartSmooth(0);\\n        }\\n    }\\n    if (doAnticipation)\\n        result = $bm_sum(result, anticipate());\\n    result = $bm_sum(result, smartSmoothResult);\\n    if (doFollowThrough)\\n        result = $bm_sum(result, followThrough());\\n    if (doOverlap)\\n        result = $bm_sum(result, overlap());\\n}\\n$bm_rt = result;"},"a":{"a":0,"k":[-9.15,51.982,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"ef":[{"ty":5,"nm":"ŝlosilo pli pura","np":34,"mn":"Pseudo/Duik Kleaner v3.2","ix":1,"en":1,"ef":[{"ty":7,"nm":"Anticipation","mn":"Pseudo/Duik Kleaner v3.2-0001","ix":1,"v":{"a":0,"k":0,"ix":1}},{"ty":7,"nm":"Smart Interpolation","mn":"Pseudo/Duik Kleaner v3.2-0002","ix":2,"v":{"a":0,"k":0,"ix":2}},{"ty":7,"nm":"Follow Through","mn":"Pseudo/Duik Kleaner v3.2-0003","ix":3,"v":{"a":0,"k":1,"ix":3}},{"ty":6,"nm":"Anticipation","mn":"Pseudo/Duik Kleaner v3.2-0004","ix":4,"v":0},{"ty":0,"nm":"Duration (s)","mn":"Pseudo/Duik Kleaner v3.2-0005","ix":5,"v":{"a":0,"k":0.3,"ix":5}},{"ty":0,"nm":"Amplitude","mn":"Pseudo/Duik Kleaner v3.2-0006","ix":6,"v":{"a":0,"k":50,"ix":6}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0007","ix":7,"v":0},{"ty":6,"nm":"Interpolation","mn":"Pseudo/Duik Kleaner v3.2-0008","ix":8,"v":0},{"ty":0,"nm":"Slow In","mn":"Pseudo/Duik Kleaner v3.2-0009","ix":9,"v":{"a":0,"k":60,"ix":9}},{"ty":0,"nm":"Slow Out","mn":"Pseudo/Duik Kleaner v3.2-0010","ix":10,"v":{"a":0,"k":25,"ix":10}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0011","ix":11,"v":0},{"ty":6,"nm":"Follow Through","mn":"Pseudo/Duik Kleaner v3.2-0012","ix":12,"v":0},{"ty":0,"nm":"Elasticity","mn":"Pseudo/Duik Kleaner v3.2-0013","ix":13,"v":{"a":0,"k":10,"ix":13}},{"ty":0,"nm":"Elasticity random","mn":"Pseudo/Duik Kleaner v3.2-0014","ix":14,"v":{"a":0,"k":0,"ix":14}},{"ty":0,"nm":"Damping","mn":"Pseudo/Duik Kleaner v3.2-0015","ix":15,"v":{"a":0,"k":50,"ix":15}},{"ty":0,"nm":"Damping random","mn":"Pseudo/Duik Kleaner v3.2-0016","ix":16,"v":{"a":0,"k":0,"ix":16}},{"ty":7,"nm":"Bounce","mn":"Pseudo/Duik Kleaner v3.2-0017","ix":17,"v":{"a":0,"k":0,"ix":17}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0018","ix":18,"v":0},{"ty":6,"nm":"Spatial Options","mn":"Pseudo/Duik Kleaner v3.2-0019","ix":19,"v":0},{"ty":7,"nm":"Smart Interpolation","mn":"Pseudo/Duik Kleaner v3.2-0020","ix":20,"v":{"a":0,"k":0,"ix":20}},{"ty":7,"nm":"Mode","mn":"Pseudo/Duik Kleaner v3.2-0021","ix":21,"v":{"a":0,"k":1,"ix":21}},{"ty":6,"nm":"Overlap (simulation)","mn":"Pseudo/Duik Kleaner v3.2-0022","ix":22,"v":0},{"ty":7,"nm":"Overlap","mn":"Pseudo/Duik Kleaner v3.2-0023","ix":23,"v":{"a":0,"k":1,"ix":23}},{"ty":0,"nm":"Delay (s)","mn":"Pseudo/Duik Kleaner v3.2-0024","ix":24,"v":{"a":0,"k":0.05,"ix":24}},{"ty":0,"nm":"Overlap random","mn":"Pseudo/Duik Kleaner v3.2-0025","ix":25,"v":{"a":0,"k":0,"ix":25}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0026","ix":26,"v":0},{"ty":6,"nm":"Soft Body (simulation)","mn":"Pseudo/Duik Kleaner v3.2-0027","ix":27,"v":0},{"ty":7,"nm":"Soft Body","mn":"Pseudo/Duik Kleaner v3.2-0028","ix":28,"v":{"a":0,"k":1,"ix":28}},{"ty":0,"nm":"Soft-Body Flexibility","mn":"Pseudo/Duik Kleaner v3.2-0029","ix":29,"v":{"a":0,"k":100,"ix":29}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0030","ix":30,"v":0},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0031","ix":31,"v":0},{"ty":0,"nm":"Precision","mn":"Pseudo/Duik Kleaner v3.2-0032","ix":32,"v":{"a":0,"k":1,"ix":32}}]},{"ty":5,"nm":"ŝlosilo pli pura 2","np":34,"mn":"Pseudo/Duik Kleaner v3.2","ix":2,"en":1,"ef":[{"ty":7,"nm":"Anticipation","mn":"Pseudo/Duik Kleaner v3.2-0001","ix":1,"v":{"a":0,"k":0,"ix":1}},{"ty":7,"nm":"Smart Interpolation","mn":"Pseudo/Duik Kleaner v3.2-0002","ix":2,"v":{"a":0,"k":0,"ix":2}},{"ty":7,"nm":"Follow Through","mn":"Pseudo/Duik Kleaner v3.2-0003","ix":3,"v":{"a":0,"k":1,"ix":3}},{"ty":6,"nm":"Anticipation","mn":"Pseudo/Duik Kleaner v3.2-0004","ix":4,"v":0},{"ty":0,"nm":"Duration (s)","mn":"Pseudo/Duik Kleaner v3.2-0005","ix":5,"v":{"a":0,"k":0.3,"ix":5}},{"ty":0,"nm":"Amplitude","mn":"Pseudo/Duik Kleaner v3.2-0006","ix":6,"v":{"a":0,"k":50,"ix":6}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0007","ix":7,"v":0},{"ty":6,"nm":"Interpolation","mn":"Pseudo/Duik Kleaner v3.2-0008","ix":8,"v":0},{"ty":0,"nm":"Slow In","mn":"Pseudo/Duik Kleaner v3.2-0009","ix":9,"v":{"a":0,"k":60,"ix":9}},{"ty":0,"nm":"Slow Out","mn":"Pseudo/Duik Kleaner v3.2-0010","ix":10,"v":{"a":0,"k":25,"ix":10}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0011","ix":11,"v":0},{"ty":6,"nm":"Follow Through","mn":"Pseudo/Duik Kleaner v3.2-0012","ix":12,"v":0},{"ty":0,"nm":"Elasticity","mn":"Pseudo/Duik Kleaner v3.2-0013","ix":13,"v":{"a":0,"k":10,"ix":13}},{"ty":0,"nm":"Elasticity random","mn":"Pseudo/Duik Kleaner v3.2-0014","ix":14,"v":{"a":0,"k":0,"ix":14}},{"ty":0,"nm":"Damping","mn":"Pseudo/Duik Kleaner v3.2-0015","ix":15,"v":{"a":0,"k":50,"ix":15}},{"ty":0,"nm":"Damping random","mn":"Pseudo/Duik Kleaner v3.2-0016","ix":16,"v":{"a":0,"k":0,"ix":16}},{"ty":7,"nm":"Bounce","mn":"Pseudo/Duik Kleaner v3.2-0017","ix":17,"v":{"a":0,"k":0,"ix":17}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0018","ix":18,"v":0},{"ty":6,"nm":"Spatial Options","mn":"Pseudo/Duik Kleaner v3.2-0019","ix":19,"v":0},{"ty":7,"nm":"Smart Interpolation","mn":"Pseudo/Duik Kleaner v3.2-0020","ix":20,"v":{"a":0,"k":0,"ix":20}},{"ty":7,"nm":"Mode","mn":"Pseudo/Duik Kleaner v3.2-0021","ix":21,"v":{"a":0,"k":1,"ix":21}},{"ty":6,"nm":"Overlap (simulation)","mn":"Pseudo/Duik Kleaner v3.2-0022","ix":22,"v":0},{"ty":7,"nm":"Overlap","mn":"Pseudo/Duik Kleaner v3.2-0023","ix":23,"v":{"a":0,"k":1,"ix":23}},{"ty":0,"nm":"Delay (s)","mn":"Pseudo/Duik Kleaner v3.2-0024","ix":24,"v":{"a":0,"k":0.05,"ix":24}},{"ty":0,"nm":"Overlap random","mn":"Pseudo/Duik Kleaner v3.2-0025","ix":25,"v":{"a":0,"k":0,"ix":25}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0026","ix":26,"v":0},{"ty":6,"nm":"Soft Body (simulation)","mn":"Pseudo/Duik Kleaner v3.2-0027","ix":27,"v":0},{"ty":7,"nm":"Soft Body","mn":"Pseudo/Duik Kleaner v3.2-0028","ix":28,"v":{"a":0,"k":1,"ix":28}},{"ty":0,"nm":"Soft-Body Flexibility","mn":"Pseudo/Duik Kleaner v3.2-0029","ix":29,"v":{"a":0,"k":100,"ix":29}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0030","ix":30,"v":0},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0031","ix":31,"v":0},{"ty":0,"nm":"Precision","mn":"Pseudo/Duik Kleaner v3.2-0032","ix":32,"v":{"a":0,"k":1,"ix":32}}]},{"ty":5,"nm":"ŝlosilo pli pura 3","np":34,"mn":"Pseudo/Duik Kleaner v3.2","ix":3,"en":1,"ef":[{"ty":7,"nm":"Anticipation","mn":"Pseudo/Duik Kleaner v3.2-0001","ix":1,"v":{"a":0,"k":0,"ix":1}},{"ty":7,"nm":"Smart Interpolation","mn":"Pseudo/Duik Kleaner v3.2-0002","ix":2,"v":{"a":0,"k":0,"ix":2}},{"ty":7,"nm":"Follow Through","mn":"Pseudo/Duik Kleaner v3.2-0003","ix":3,"v":{"a":0,"k":1,"ix":3}},{"ty":6,"nm":"Anticipation","mn":"Pseudo/Duik Kleaner v3.2-0004","ix":4,"v":0},{"ty":0,"nm":"Duration (s)","mn":"Pseudo/Duik Kleaner v3.2-0005","ix":5,"v":{"a":0,"k":0.3,"ix":5}},{"ty":0,"nm":"Amplitude","mn":"Pseudo/Duik Kleaner v3.2-0006","ix":6,"v":{"a":0,"k":50,"ix":6}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0007","ix":7,"v":0},{"ty":6,"nm":"Interpolation","mn":"Pseudo/Duik Kleaner v3.2-0008","ix":8,"v":0},{"ty":0,"nm":"Slow In","mn":"Pseudo/Duik Kleaner v3.2-0009","ix":9,"v":{"a":0,"k":60,"ix":9}},{"ty":0,"nm":"Slow Out","mn":"Pseudo/Duik Kleaner v3.2-0010","ix":10,"v":{"a":0,"k":25,"ix":10}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0011","ix":11,"v":0},{"ty":6,"nm":"Follow Through","mn":"Pseudo/Duik Kleaner v3.2-0012","ix":12,"v":0},{"ty":0,"nm":"Elasticity","mn":"Pseudo/Duik Kleaner v3.2-0013","ix":13,"v":{"a":0,"k":10,"ix":13}},{"ty":0,"nm":"Elasticity random","mn":"Pseudo/Duik Kleaner v3.2-0014","ix":14,"v":{"a":0,"k":0,"ix":14}},{"ty":0,"nm":"Damping","mn":"Pseudo/Duik Kleaner v3.2-0015","ix":15,"v":{"a":0,"k":50,"ix":15}},{"ty":0,"nm":"Damping random","mn":"Pseudo/Duik Kleaner v3.2-0016","ix":16,"v":{"a":0,"k":0,"ix":16}},{"ty":7,"nm":"Bounce","mn":"Pseudo/Duik Kleaner v3.2-0017","ix":17,"v":{"a":0,"k":0,"ix":17}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0018","ix":18,"v":0},{"ty":6,"nm":"Spatial Options","mn":"Pseudo/Duik Kleaner v3.2-0019","ix":19,"v":0},{"ty":7,"nm":"Smart Interpolation","mn":"Pseudo/Duik Kleaner v3.2-0020","ix":20,"v":{"a":0,"k":0,"ix":20}},{"ty":7,"nm":"Mode","mn":"Pseudo/Duik Kleaner v3.2-0021","ix":21,"v":{"a":0,"k":1,"ix":21}},{"ty":6,"nm":"Overlap (simulation)","mn":"Pseudo/Duik Kleaner v3.2-0022","ix":22,"v":0},{"ty":7,"nm":"Overlap","mn":"Pseudo/Duik Kleaner v3.2-0023","ix":23,"v":{"a":0,"k":1,"ix":23}},{"ty":0,"nm":"Delay (s)","mn":"Pseudo/Duik Kleaner v3.2-0024","ix":24,"v":{"a":0,"k":0.05,"ix":24}},{"ty":0,"nm":"Overlap random","mn":"Pseudo/Duik Kleaner v3.2-0025","ix":25,"v":{"a":0,"k":0,"ix":25}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0026","ix":26,"v":0},{"ty":6,"nm":"Soft Body (simulation)","mn":"Pseudo/Duik Kleaner v3.2-0027","ix":27,"v":0},{"ty":7,"nm":"Soft Body","mn":"Pseudo/Duik Kleaner v3.2-0028","ix":28,"v":{"a":0,"k":1,"ix":28}},{"ty":0,"nm":"Soft-Body Flexibility","mn":"Pseudo/Duik Kleaner v3.2-0029","ix":29,"v":{"a":0,"k":100,"ix":29}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0030","ix":30,"v":0},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0031","ix":31,"v":0},{"ty":0,"nm":"Precision","mn":"Pseudo/Duik Kleaner v3.2-0032","ix":32,"v":{"a":0,"k":1,"ix":32}}]}],"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0]],"o":[[0,0],[0,0]],"v":[[-71.541,42.351],[40.671,88.691]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.164705887437,0.192156866193,0.203921571374,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":1.453,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-6.032,-2.393],[0,0],[0.604,0.364],[0.669,1.456],[-1.689,1.74],[0,0],[0.232,0.674],[0.716,2.098],[-1.888,1.328],[-0.071,0],[-2.923,0.447],[-3.19,0.549],[-0.908,0.318],[0,0]],"o":[[0,0],[-0.726,-0.288],[-1.927,-1.097],[-0.853,-1.931],[0,0],[0.063,-0.681],[-0.627,-2.091],[-0.661,-1.883],[0,0],[1.034,-1.681],[3.24,-0.501],[1.047,-0.166],[0,0],[3.388,-3.489]],"v":[[-58.474,4.918],[-97.028,44.62],[-99.045,43.639],[-102.957,39.705],[-101.814,33.968],[-98.066,30.109],[-98.324,28.082],[-101.219,21.892],[-99.825,16.587],[-99.777,16.537],[-92.938,13.364],[-82.994,12.295],[-80.037,11.543],[-75.532,6.904]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.164705887437,0.192156866193,0.203921571374,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":1.453,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":2,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-6.032,-2.393],[0,0],[0.604,0.364],[-1.39,1.678],[-5.864,7.05],[1.147,1.383],[1.259,0.527],[0,0]],"o":[[0,0],[-0.726,-0.288],[0.548,-2.414],[5.864,-7.05],[1.056,-1.285],[-0.683,-0.825],[0,0],[3.388,-3.489]],"v":[[-58.474,4.918],[-97.028,44.62],[-99.045,43.639],[-93.364,36.655],[-75.771,15.506],[-74.777,11.303],[-77.979,9.423],[-75.532,6.904]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.949019610882,0.678431391716,0,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 3","np":2,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-1.637,-0.649],[0.919,-0.947],[1.637,0.649],[-0.919,0.947]],"o":[[1.637,0.649],[-0.919,0.947],[-1.637,-0.649],[0.919,-0.947]],"v":[[-89.932,17.562],[-88.634,20.452],[-93.262,20.99],[-94.561,18.1]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[1,1,1,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 4","np":2,"cix":2,"bm":0,"ix":4,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-6.032,-2.393],[0,0],[0.604,0.364],[0.669,1.456],[-1.689,1.74],[0,0],[0.232,0.674],[0.716,2.098],[-1.888,1.328],[-0.071,0],[-2.923,0.447],[-3.19,0.549],[-0.908,0.318],[0,0]],"o":[[0,0],[-0.726,-0.288],[-1.927,-1.097],[-0.853,-1.931],[0,0],[0.063,-0.681],[-0.627,-2.091],[-0.661,-1.883],[0,0],[1.034,-1.681],[3.24,-0.501],[1.047,-0.166],[0,0],[3.388,-3.489]],"v":[[-58.474,4.918],[-97.028,44.62],[-99.045,43.639],[-102.957,39.705],[-101.814,33.968],[-98.066,30.109],[-98.324,28.082],[-101.219,21.892],[-99.825,16.587],[-99.777,16.537],[-92.938,13.364],[-82.994,12.295],[-80.037,11.543],[-75.532,6.904]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.992156863213,0.772549033165,0.156862750649,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 5","np":2,"cix":2,"bm":0,"ix":5,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-4.027,-1.597],[0,0],[2.262,-2.33],[0,0],[4.027,1.597],[0,0],[-2.262,2.33],[0,0]],"o":[[0,0],[4.027,1.597],[0,0],[-2.262,2.33],[0,0],[-4.027,-1.597],[0,0],[2.262,-2.33]],"v":[[-38.898,-7.55],[87.519,42.598],[90.715,49.71],[31.987,110.187],[20.597,111.513],[-105.82,61.365],[-109.016,54.253],[-50.288,-6.224]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.764705896378,0.803921580315,0.850980401039,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 6","np":2,"cix":2,"bm":0,"ix":6,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":120,"st":0,"bm":0}],"markers":[]}');var h=i(99650),f=i(44862),v=i(49594);i(69333);let x=n=>{let{items:e}=n;return(0,a.jsx)("div",{className:"px-4 pb-4 md:px-8 xl:px-16 h-full flex-grow",children:(0,a.jsx)(v.A,{breakpointCols:{default:5,1700:4,1400:3,1e3:2,760:1},className:"my-masonry-grid",columnClassName:"my-masonry-grid_column",children:e.map((n,e)=>(0,a.jsx)("div",{children:n},n.key))})})};var b=i(2543),c=i.n(b);let y=JSON.parse('{"v":"5.5.7","meta":{"g":"LottieFiles AE 0.1.21","a":"","k":"","d":"","tc":""},"fr":30,"ip":0,"op":40,"w":480,"h":480,"nm":"Fade circles_03","ddd":0,"assets":[],"layers":[{"ddd":0,"ind":1,"ty":4,"nm":"circle 2","td":1,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[238.667,239.332,0],"ix":2},"a":{"a":0,"k":[300.5,300.5,0],"ix":1},"s":{"a":1,"k":[{"i":{"x":[0.328,0.328,0.667],"y":[1,1,1]},"o":{"x":[0.333,0.333,0.333],"y":[0,0,0]},"t":10,"s":[0,0,100]},{"t":35,"s":[67,67,100]}],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,-165.686],[165.685,0],[0,165.686],[-165.686,0]],"o":[[0,165.686],[-165.686,0],[0,-165.686],[165.685,0]],"v":[[300.001,0],[0.001,300],[-299.999,0],[0.001,-300]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0,0,0,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[300.631,300.15],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 3","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":10,"op":40,"st":5,"bm":0},{"ddd":0,"ind":2,"ty":4,"nm":"circle 1","tt":2,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[238.667,239.332,0],"ix":2},"a":{"a":0,"k":[300.5,300.5,0],"ix":1},"s":{"a":1,"k":[{"i":{"x":[0.328,0.328,0.667],"y":[1,1,1]},"o":{"x":[0.333,0.333,0.333],"y":[0,0,0]},"t":0,"s":[0,0,100]},{"t":35,"s":[66.5,66.5,100]}],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,-165.686],[165.685,0],[0,165.686],[-165.686,0]],"o":[[0,165.686],[-165.686,0],[0,-165.686],[165.685,0]],"v":[[300.001,0],[0.001,300],[-299.999,0],[0.001,-300]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0,0,0,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[300.631,300.15],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 3","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":40,"st":0,"bm":0}],"markers":[]}');var k=i(86715),_=i(50434),$=i(16703),g=i(74530),T=i(7387),V=i(86540);let D=JSON.parse('{"v":"5.7.4","fr":30,"ip":0,"op":90,"w":500,"h":500,"nm":"1111","ddd":0,"assets":[],"layers":[{"ddd":0,"ind":1,"ty":4,"nm":"particle","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[250,250,0],"ix":2,"l":2},"a":{"a":0,"k":[0,0,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[41,-13],[-25,10],[53,1],[0,0]],"o":[[0,0],[-41,13],[25,-10],[-40.005,-0.755],[0,0]],"v":[[-24,10],[-89,-33],[-81,4],[-104,-65],[-156,-20]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.9815,0.2785,0.2785,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":7,"ix":5},"lc":1,"lj":1,"ml":4,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Shape 4","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"v":[[-67,91],[-91,88.5],[-91,105.5],[-110.5,105.5],[-110.5,122.5],[-140,122.5]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.9202,0.3198,0.3198,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":7,"ix":5},"lc":1,"lj":1,"ml":4,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Shape 3","np":3,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[-31.813,-12.236],[15.5,3.25],[-43,3.5]],"o":[[0,0],[19.5,7.5],[-15.5,-3.25],[43,-3.5]],"v":[[107,45],[146.5,28.75],[138.5,49.75],[168.25,4]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[1,0.12,0.12,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":7,"ix":5},"lc":1,"lj":1,"ml":4,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Shape 2","np":3,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[-82.089,1.173],[53,6],[-127,53]],"o":[[0,0],[70,-1],[-46.575,-5.273],[127,-53]],"v":[[0,20],[71,-110],[64,-45],[128,-205]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.9202,0.3198,0.3198,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":7,"ix":5},"lc":1,"lj":1,"ml":4,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Shape 1","np":3,"cix":2,"bm":0,"ix":4,"mn":"ADBE Vector Group","hd":false},{"ty":"tm","s":{"a":1,"k":[{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":28,"s":[0]},{"t":48,"s":[100]}],"ix":1},"e":{"a":1,"k":[{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":26,"s":[0]},{"t":46,"s":[100]}],"ix":2},"o":{"a":0,"k":0,"ix":3},"m":1,"ix":5,"nm":"Trim Paths 1","mn":"ADBE Vector Filter - Trim","hd":false}],"ip":0,"op":90,"st":0,"bm":0},{"ddd":0,"ind":2,"ty":4,"nm":"tcik","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[250,258.5,0],"ix":2,"l":2},"a":{"a":0,"k":[0,0,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0]],"v":[[-38.25,13.75],[-15.5,36.5],[38.5,-17.5]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":18,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Shape 1","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tm","s":{"a":0,"k":0,"ix":1},"e":{"a":1,"k":[{"i":{"x":[0.52],"y":[1]},"o":{"x":[0.096],"y":[0]},"t":26,"s":[0]},{"t":36,"s":[100]}],"ix":2},"o":{"a":0,"k":0,"ix":3},"m":1,"ix":2,"nm":"Trim Paths 1","mn":"ADBE Vector Filter - Trim","hd":false}],"ip":0,"op":90,"st":0,"bm":0},{"ddd":0,"ind":3,"ty":4,"nm":"Circle 2","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[250.081,270.081,0],"ix":2,"l":2},"a":{"a":0,"k":[3.081,20.081,0],"ix":1,"l":2},"s":{"a":1,"k":[{"i":{"x":[0.408,0.408,0.667],"y":[1,1,1]},"o":{"x":[0.128,0.128,0.333],"y":[0,0,0]},"t":22,"s":[0,0,100]},{"t":42,"s":[175,175,100]}],"ix":6,"l":2}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-38.152,0],[0,-38.152],[38.152,0],[0,38.152]],"o":[[38.152,0],[0,38.152],[-38.152,0],[0,-38.152]],"v":[[0,-69.081],[69.081,0],[0,69.081],[-69.081,0]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.9202,0.3198,0.3198,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":1,"k":[{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"t":22,"s":[18]},{"t":42,"s":[0]}],"ix":5},"lc":1,"lj":1,"ml":4,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[3.081,20.081],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Ellipse 1","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":90,"st":0,"bm":0},{"ddd":0,"ind":4,"ty":4,"nm":"Circle","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[250.081,270.081,0],"ix":2,"l":2},"a":{"a":0,"k":[3.081,20.081,0],"ix":1,"l":2},"s":{"a":1,"k":[{"i":{"x":[0.408,0.408,0.667],"y":[1,1,1]},"o":{"x":[0.128,0.128,0.333],"y":[0,0,0]},"t":22,"s":[0,0,100]},{"t":32,"s":[100,100,100]}],"ix":6,"l":2}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-38.152,0],[0,-38.152],[38.152,0],[0,38.152]],"o":[[38.152,0],[0,38.152],[-38.152,0],[0,-38.152]],"v":[[0,-69.081],[69.081,0],[0,69.081],[-69.081,0]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.3882,0.3843,0.3843,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[3.081,20.081],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Ellipse 1","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":90,"st":0,"bm":0},{"ddd":0,"ind":5,"ty":4,"nm":"Fold","parent":6,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[95.189,94.328,0],"ix":2,"l":2},"a":{"a":0,"k":[95.189,94.328,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.344,"y":1},"o":{"x":0.144,"y":0},"t":10,"s":[{"i":[[0,0],[0,0],[-27.639,26.559],[0,0]],"o":[[0,0],[15.118,-16.199],[0,0],[0,0]],"v":[[-52.689,51.828],[-51.568,51.328],[53.189,-51.93],[52.689,-51.828]],"c":true}]},{"t":20,"s":[{"i":[[0,0],[0,0],[0,15.331],[0,0]],"o":[[0,0],[15.33,0],[0,0],[0,0]],"v":[[-52.689,51.828],[24.932,51.828],[52.689,24.07],[52.689,-51.828]],"c":true}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.0863,0.098,0.102,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":17,"ix":5},"lc":1,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"fl","c":{"a":0,"k":[1,1,1,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[95.189,94.328],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":10,"op":102,"st":10,"bm":0},{"ddd":0,"ind":6,"ty":4,"nm":"Paper","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":1,"k":[{"i":{"x":0.667,"y":1},"o":{"x":0.152,"y":0},"t":0,"s":[210.316,216.867,0],"to":[19.083,-5.083,0],"ti":[2.417,-17.917,0]},{"t":20,"s":[248.316,250.867,0]}],"ix":2,"l":2},"a":{"a":0,"k":[169.556,215.825,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.376,"y":1},"o":{"x":0.112,"y":0},"t":0,"s":[{"i":[[20.169,0],[0,0],[0,20.169],[0,0],[-81.917,-0.542],[0,0],[0,-20.169],[0,0]],"o":[[0,0],[-20.169,0],[0,0],[1.034,-47.198],[0,0],[20.169,0],[0,0],[0,20.169]],"v":[[90.535,173.325],[-90.535,173.325],[-127.055,136.805],[-127.35,-127.296],[-23.399,-173.325],[90.535,-173.325],[127.056,-136.805],[127.056,136.805]],"c":true}]},{"t":10,"s":[{"i":[[20.169,0],[0,0],[0,20.169],[0,0],[-40.48,40.48],[0,0],[0,-20.169],[0,0]],"o":[[0,0],[-20.169,0],[0,0],[40.48,-40.48],[0,0],[20.169,0],[0,0],[0,20.169]],"v":[[90.536,173.325],[-90.535,173.325],[-127.055,136.805],[-127.055,-69.669],[-23.399,-173.325],[90.536,-173.325],[127.055,-136.805],[127.055,136.805]],"c":true}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.0863,0.098,0.102,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":17,"ix":5},"lc":1,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"fl","c":{"a":0,"k":[1,1,1,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[169.555,215.825],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tm","s":{"a":0,"k":0,"ix":1},"e":{"a":0,"k":100,"ix":2},"o":{"a":0,"k":0,"ix":3},"m":2,"ix":2,"nm":"Trim Paths 1","mn":"ADBE Vector Filter - Trim","hd":false}],"ip":0,"op":92,"st":0,"bm":0},{"ddd":0,"ind":7,"ty":4,"nm":"Paper 2","sr":1,"ks":{"o":{"a":1,"k":[{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":5,"s":[0]},{"t":25,"s":[100]}],"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":1,"k":[{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":5,"s":[242.316,216.867,0],"to":[-5.333,0,0],"ti":[5.333,0,0]},{"t":20,"s":[210.316,216.867,0]}],"ix":2,"l":2},"a":{"a":0,"k":[169.556,215.825,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[20.169,0],[0,0],[0,20.169],[0,0],[-81.917,-0.542],[0,0],[0,-20.169],[0,0]],"o":[[0,0],[-20.169,0],[0,0],[1.034,-47.198],[0,0],[20.169,0],[0,0],[0,20.169]],"v":[[90.535,173.325],[-90.535,173.325],[-127.055,136.805],[-127.35,-127.296],[-23.399,-173.325],[90.535,-173.325],[127.056,-136.805],[127.056,136.805]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.0863,0.098,0.102,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":17,"ix":5},"lc":1,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"fl","c":{"a":0,"k":[1,1,1,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[169.555,215.825],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":92,"st":0,"bm":0}],"markers":[]}');var K=i(79304),P=i(66741),S=i(46157),A=i(83413),G=i(34845),I=i(61666),w=i(91106),E=i.n(w);function B(n){let{loading:e}=n,i=(0,k.useRouter)(),{searchState:t,company:r}=(0,G.A)(),{savedSearches:o,loadSearch:s,getURL:m}=(0,V.A)(!0),[p,d]=(0,l.useState)(!1),h=(0,$.A)({base:!0,md:!1}),f=(0,g.d)(),[v,x]=(0,l.useState)(null);(0,l.useEffect)(()=>{e||x(null)},[e]);let b=n=>{navigator.clipboard.writeText(m(n)),d(n),setTimeout(()=>{d(null)},2e3),f({title:"Link copied to clipboard",status:"success",duration:2e3,isClosable:!0,position:"top"})},c=n=>{s(n,!1),x(n)},y=()=>{let{searchState:n,...e}=i.query;i.push({pathname:i.pathname,query:e})};return(0,a.jsxs)("div",{className:"flex flex-col space-y-2",children:[!r&&(null==o?void 0:o.length)>0&&(0,a.jsxs)("div",{className:"flex flex-row items-center space-x-2",children:[(0,a.jsx)("span",{className:"text-sm font-light",children:"Your saved searches"}),(0,a.jsx)(E(),{href:"/myhiringcafe/saved-searches",className:"text-pink-500",children:(0,a.jsx)(K.A,{className:"h-3 w-3 flex-none"})})]}),(0,a.jsxs)("div",{className:"flex flex-col md:flex-row md:items-center md:justify-end space-y-4 md:space-y-0 md:space-x-4 lg:space-x-6 w-full",children:[!r&&(0,a.jsx)("div",{className:"flex items-center space-x-2 md:space-x-4 overflow-x-auto scrollbar-hide w-full",children:(o||[]).map(n=>(0,a.jsxs)("div",{className:"relative rounded-lg font-extrabold flex-none pr-2 border border-slate-400 shadow outline-none flex items-center m-1 text-sm ".concat(v===n.id&&e?"bg-pink-500 text-white":"bg-white"),children:[(0,a.jsx)("button",{onClick:()=>{c(n.id)},className:"pl-3 pr-4 py-2",children:n.name}),v===n.id&&e?(0,a.jsx)(T.P,{isIndeterminate:!0,color:"pink.500",size:"16px",className:"m-0.5"}):(0,a.jsx)("button",{disabled:p,className:"m-0.5 border border-gray-300 rounded-full bg-gray-50 outline-none",onClick:()=>{h&&navigator.share?navigator.share({title:"Check out these jobs on HiringCafe",url:m(n.id)}).catch(()=>{}):b(n.id)},children:h&&navigator.share?(0,a.jsx)(P.A,{className:"h-3 w-3 m-1 flex-none"}):p!==n.id?(0,a.jsx)(S.A,{className:"h-4 w-4 m-1 flex-none"}):(0,a.jsx)(u.A,{width:"24px",height:"24px",animationData:D})})]},n.id))}),Object.keys(t||{}).length>0&&(0,a.jsxs)("div",{className:"lg:hidden flex items-center space-x-6 mx-2 my-1 flex-none",children:[!r&&(0,a.jsx)("div",{className:"flex-none",children:(0,a.jsx)(I.A,{})}),(0,a.jsxs)("button",{onClick:()=>{r?y():i.push("/")},className:"flex items-center space-x-2 text-sm text-gray-500 hover:text-gray-600 underline",children:[(0,a.jsx)(A.A,{className:"w-3 h-3 flex-none"}),(0,a.jsx)("span",{className:"flex-none font-bold",children:"Clear filters"})]})]})]})]})}var O=i(9812),M=i(36802),z=i(79637),W=i(10332),R=i(59146),F=i(46014),L=i(30457),j=i(7458),N=i(50879),C=i(28156),q=i(32859),Q=i(70521),J=i(5444),H=i(95323),Y=i(54056);let U=[{label:"All time",value:-1},{label:"Past 24 hours",value:2},{label:"3 days",value:4},{label:"1 week",value:14},{label:"2 weeks",value:21},{label:"3 weeks",value:29},{label:"1 month",value:61},{label:"2 months",value:91},{label:"3 months",value:121},{label:"4 months",value:151},{label:"5 months",value:181},{label:"6 months",value:211},{label:"1 year",value:750},{label:"2 years",value:1080},{label:"3 years",value:1440}];function X(n){let{onSelectClose:e}=n,{state:i}=(0,f.Ku)(),{update:t}=(0,G.A)(),r=n=>{t({type:G.k.DATE_FETCHED_PAST_N_DAYS,payload:n||null}),e&&e()};return(0,a.jsx)("div",{className:"flex flex-col w-full space-y-2 text-sm",children:U.map(n=>(0,a.jsx)("div",{className:"p-2 rounded w-full ".concat(i.dateFetchedPastNDays===n.value?"bg-gray-200":""),children:(0,a.jsx)(Y.s,{colorScheme:"pink",isChecked:i.dateFetchedPastNDays===n.value,onChange:()=>r(n.value),children:n.label})},n.label))})}let Z={All:{title:"All",description:"All application forms - simple or time-consuming."},Simple:{title:"Simple",description:"Application forms that don't require account creation. Don't require resume formatting most of the time."},"Time Consuming":{title:"Time Consuming",description:"Application forms that require account creation and/or resume formatting."}};function nn(n){let{onSelectClose:e}=n,{state:i}=(0,f.Ku)(),{update:t}=(0,G.A)(),[r,o]=(0,l.useState)([]);(0,l.useEffect)(()=>{var n;o((null===(n=i.applicationFormEase)||void 0===n?void 0:n.length)>0?i.applicationFormEase:["All"])},[i.applicationFormEase]);let s=n=>{o([n]),"All"===n?t({type:G.k.APPLICATION_FORM_EASE,payload:[]}):t({type:G.k.APPLICATION_FORM_EASE,payload:[n]}),e&&e()};return(0,a.jsx)("div",{className:"flex flex-col space-y-4 text-sm",children:Object.keys(Z).map(n=>(0,a.jsxs)("div",{className:"border flex flex-col space-y-2 rounded p-3 cursor-pointer ".concat(r.includes(n)?"border-pink-500 bg-pink-50":""),onClick:()=>s(n),children:[(0,a.jsxs)("div",{className:"flex items-center space-x-4",children:[r.includes(n)?(0,a.jsx)("div",{className:"h-3 w-3 flex-none bg-pink-600 ring-2 ring-pink-300 ring-offset-1 rounded-full"}):(0,a.jsx)("div",{className:"h-3 w-3 flex-none bg-white border border-gray-400 rounded-full"}),(0,a.jsxs)("span",{className:"font-medium",children:[Z[n].title," Application Forms"]})]}),Z[n].description&&(0,a.jsx)("span",{className:"text-xs",children:Z[n].description})]},n))})}var ne=i(10767),ni=i(6147),na=i(19447);function nt(){let{state:n}=(0,f.Ku)(),{update:e}=(0,G.A)(),[i,t]=(0,l.useState)([]),{user:r,loading:o}=(0,ne.A)();(0,l.useEffect)(()=>{t(n.hideJobTypes||[])},[n.hideJobTypes]);let s=n=>{let a=i.includes(n)?i.filter(e=>e!==n):[...i,n];t(a),e({type:G.k.HIDE_JOB_TYPES,payload:a})};return(0,a.jsxs)("div",{className:"flex flex-col space-y-2 w-fit",children:[(0,a.jsx)("div",{className:"flex flex-col space-y-1",children:!r&&!o&&(0,a.jsx)(E(),{href:"/auth",className:"text-xs border px-2 py-0.5 w-fit rounded-full text-yellow-600 border-yellow-600",children:"Log in to use this filter"})}),ni.XD.filter(n=>!n.toLocaleLowerCase().includes("hid")).map(n=>(0,a.jsx)(na.S,{size:"lg",colorScheme:"pink",isChecked:i.includes(n),onChange:()=>s(n),disabled:!r||o,children:(0,a.jsxs)("span",{className:"text-base",children:["Exclude ",n," Jobs"]})},n))]})}function nr(n){let{onSelectClose:e}=n,{state:i}=(0,f.Ku)(),{update:t}=(0,G.A)(),r=n=>{t({type:G.k.SORT_BY,payload:n||null}),e&&e()};return(0,a.jsx)("div",{className:"flex flex-col w-full space-y-2 text-sm",children:f.vP.map(n=>(0,a.jsx)("div",{className:"p-2 rounded w-full ".concat(i.sortBy===n.value?"bg-gray-200":""),children:(0,a.jsx)(Y.s,{colorScheme:"pink",isChecked:i.sortBy===n.value,onChange:()=>r(n.value),children:n.label})},n.value))})}var no=i(96452);function nl(){var n,e,i;let t=(0,$.A)({base:!1,lg:!0}),{state:o}=(0,f.Ku)(),{company:s}=(0,r.A)(),[m,u]=(0,l.useState)(!1);(0,l.useEffect)(()=>{localStorage.getItem("fightButtonDismissed")||u(!0)},[]);let p=[{label:(0,a.jsx)("span",{children:(null===(n=f.vP.find(n=>n.value===o.sortBy))||void 0===n?void 0:n.label)||"Relevance"}),componentTitle:"Sort by",component:(0,a.jsx)(nr,{})},{label:(0,a.jsx)("span",{children:(null===(e=U.find(n=>n.value===o.dateFetchedPastNDays))||void 0===e?void 0:e.label)||"All time"}),componentTitle:"Days on HiringCafe",component:(0,a.jsx)(X,{})},...s?[]:[{label:(0,a.jsx)("span",{children:"".concat((()=>{let n=o.applicationFormEase||[];return n.includes("Time Consuming")?"Lengthy apply only":n.includes("Simple")?"Easy apply only":(n.length,"Easy or lengthy apply")})())}),componentTitle:"Application form ease",component:(0,a.jsx)(nn,{})}],{label:(0,a.jsx)("span",{children:(null===(i=o.hideJobTypes)||void 0===i?void 0:i.length)?"Hide ".concat(o.hideJobTypes.join(", ").toLowerCase()):"Show all jobs"}),componentTitle:"Exclude marked jobs",component:(0,a.jsx)(nt,{})}];return(0,a.jsxs)("div",{className:"flex items-center space-x-0 md:space-x-4 overflow-auto w-full scrollbar-hide",children:[p.map((n,e)=>(0,a.jsx)(ns,{label:n.label,componentTitle:n.componentTitle,isLargerScreen:t,children:n.component},e)),(0,a.jsx)("div",{className:"h-[1px] bg-gray-300 w-full hidden md:block"}),(0,a.jsxs)(E(),{href:"https://www.reddit.com/r/hiringcafe",className:"flex-none text-sm font-semibold text-gray-600 hidden lg:flex items-center lg:space-x-2 lg:border border-gray-600 rounded px-2 py-1",target:"_blank",rel:"noopener noreferrer",children:[(0,a.jsx)("span",{className:"text-xs",children:"Join our community"}),(0,a.jsx)(no.oDE,{className:"w-4 h-4 flex-none text-red-500"})]}),(0,a.jsx)(E(),{href:"/talent-network",className:"flex-none text-sm font-semibold text-gray-600 hidden md:flex items-center md:space-x-1 md:border border-gray-600 rounded px-2 py-1",children:(0,a.jsx)("span",{className:"text-xs",children:"Talent Network"})})]})}function ns(n){var e,i;let{label:t,componentTitle:r,isLargerScreen:o,children:s}=n,{isOpen:m,onOpen:u,onClose:p}=(0,z.j)(),d=(0,l.useRef)(),h=(0,l.useRef)(),{state:v}=(0,f.Ku)(),x="flex items-center justify-between md:hover:bg-gray-200 md:rounded-full pr-3.5 md:px-3 py-2 text-start flex-none space-x-1 md:space-x-2 text-xs font-bold outline-none ".concat(("Sort by"===r?"relevance"!==v.sortBy&&"default"!==v.sortBy:"Days on HiringCafe"===r||("Application form ease"===r?(null===(e=v.applicationFormEase)||void 0===e?void 0:e.length)>0&&v.applicationFormEase.length!==ni.F4.length:"Exclude marked jobs"===r&&(null===(i=v.hideJobTypes)||void 0===i?void 0:i.length)>0))?"text-pink-600":"");if((0,W.j)({ref:h,handler:()=>{h.current&&p()}}),o){let n=("Sort by"===r||"Days on HiringCafe"===r||"Application form ease"===r)&&s&&s.type?l.cloneElement(s,{onSelectClose:p}):s;return(0,a.jsx)(R.a,{className:"flex items-center space-x-6 flex-none z-30",ref:h,children:(0,a.jsxs)(F.A,{placement:"bottom-start",isOpen:m,onClose:p,isLazy:!0,children:[(0,a.jsx)(L.W,{children:(0,a.jsxs)("button",{ref:d,onClick:u,className:x,children:[t,(0,a.jsx)(O.A,{className:"w-3.5 h-3.5"})]})}),(0,a.jsx)(j.h,{maxHeight:"300px",overflowY:"auto",py:2,children:(0,a.jsx)(N.e,{children:n})})]})})}{let n=("Sort by"===r||"Days on HiringCafe"===r||"Application form ease"===r)&&s&&s.type?l.cloneElement(s,{onSelectClose:p}):s;return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)("button",{ref:d,onClick:u,className:x.replace("rounded-full","hover:rounded-full"),children:[t,(0,a.jsx)(O.A,{className:"w-3 h-3"})]}),(0,a.jsxs)(C._s,{isOpen:m,placement:"bottom",onClose:p,finalFocusRef:d,children:[(0,a.jsx)(q.m,{}),(0,a.jsxs)(Q.z,{borderTopRadius:"3xl",height:"md",children:[(0,a.jsxs)(J.r,{display:"flex",alignItems:"center",justifyContent:"space-between",children:[r,(0,a.jsx)("button",{className:"bg-gray-200 rounded-full p-2 outline-none",onClick:p,children:(0,a.jsx)(M.A,{className:"flex-none h-4 w-4"})})]}),(0,a.jsx)(H.c,{children:(0,a.jsx)("div",{className:"pb-8",children:n})})]})]})]})}}var nm=i(51587),nu=i(64742),np=i(24527),nd=i(1194),nh=i(20480),nf=i(40714),nv=i(16217);let nx=JSON.parse('{"v":"5.7.11","fr":25,"ip":0,"op":46,"w":512,"h":512,"nm":"Comp 18","ddd":0,"assets":[],"layers":[{"ddd":0,"ind":1,"ty":4,"nm":"Layer 5","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[153.215,150.505,0],"ix":2,"l":2},"a":{"a":0,"k":[173.215,170.505,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"ef":[{"ty":5,"nm":"ŝlosilo pli pura","np":34,"mn":"Pseudo/Duik Kleaner v3.2","ix":1,"en":1,"ef":[{"ty":7,"nm":"Anticipation","mn":"Pseudo/Duik Kleaner v3.2-0001","ix":1,"v":{"a":0,"k":0,"ix":1}},{"ty":7,"nm":"Smart Interpolation","mn":"Pseudo/Duik Kleaner v3.2-0002","ix":2,"v":{"a":0,"k":0,"ix":2}},{"ty":7,"nm":"Follow Through","mn":"Pseudo/Duik Kleaner v3.2-0003","ix":3,"v":{"a":0,"k":1,"ix":3}},{"ty":6,"nm":"Anticipation","mn":"Pseudo/Duik Kleaner v3.2-0004","ix":4,"v":0},{"ty":0,"nm":"Duration (s)","mn":"Pseudo/Duik Kleaner v3.2-0005","ix":5,"v":{"a":0,"k":0.3,"ix":5}},{"ty":0,"nm":"Amplitude","mn":"Pseudo/Duik Kleaner v3.2-0006","ix":6,"v":{"a":0,"k":50,"ix":6}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0007","ix":7,"v":0},{"ty":6,"nm":"Interpolation","mn":"Pseudo/Duik Kleaner v3.2-0008","ix":8,"v":0},{"ty":0,"nm":"Slow In","mn":"Pseudo/Duik Kleaner v3.2-0009","ix":9,"v":{"a":0,"k":60,"ix":9}},{"ty":0,"nm":"Slow Out","mn":"Pseudo/Duik Kleaner v3.2-0010","ix":10,"v":{"a":0,"k":25,"ix":10}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0011","ix":11,"v":0},{"ty":6,"nm":"Follow Through","mn":"Pseudo/Duik Kleaner v3.2-0012","ix":12,"v":0},{"ty":0,"nm":"Elasticity","mn":"Pseudo/Duik Kleaner v3.2-0013","ix":13,"v":{"a":0,"k":10,"ix":13}},{"ty":0,"nm":"Elasticity random","mn":"Pseudo/Duik Kleaner v3.2-0014","ix":14,"v":{"a":0,"k":0,"ix":14}},{"ty":0,"nm":"Damping","mn":"Pseudo/Duik Kleaner v3.2-0015","ix":15,"v":{"a":0,"k":50,"ix":15}},{"ty":0,"nm":"Damping random","mn":"Pseudo/Duik Kleaner v3.2-0016","ix":16,"v":{"a":0,"k":0,"ix":16}},{"ty":7,"nm":"Bounce","mn":"Pseudo/Duik Kleaner v3.2-0017","ix":17,"v":{"a":0,"k":0,"ix":17}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0018","ix":18,"v":0},{"ty":6,"nm":"Spatial Options","mn":"Pseudo/Duik Kleaner v3.2-0019","ix":19,"v":0},{"ty":7,"nm":"Smart Interpolation","mn":"Pseudo/Duik Kleaner v3.2-0020","ix":20,"v":{"a":0,"k":0,"ix":20}},{"ty":7,"nm":"Mode","mn":"Pseudo/Duik Kleaner v3.2-0021","ix":21,"v":{"a":0,"k":1,"ix":21}},{"ty":6,"nm":"Overlap (simulation)","mn":"Pseudo/Duik Kleaner v3.2-0022","ix":22,"v":0},{"ty":7,"nm":"Overlap","mn":"Pseudo/Duik Kleaner v3.2-0023","ix":23,"v":{"a":0,"k":1,"ix":23}},{"ty":0,"nm":"Delay (s)","mn":"Pseudo/Duik Kleaner v3.2-0024","ix":24,"v":{"a":0,"k":0.05,"ix":24}},{"ty":0,"nm":"Overlap random","mn":"Pseudo/Duik Kleaner v3.2-0025","ix":25,"v":{"a":0,"k":0,"ix":25}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0026","ix":26,"v":0},{"ty":6,"nm":"Soft Body (simulation)","mn":"Pseudo/Duik Kleaner v3.2-0027","ix":27,"v":0},{"ty":7,"nm":"Soft Body","mn":"Pseudo/Duik Kleaner v3.2-0028","ix":28,"v":{"a":0,"k":1,"ix":28}},{"ty":0,"nm":"Soft-Body Flexibility","mn":"Pseudo/Duik Kleaner v3.2-0029","ix":29,"v":{"a":0,"k":100,"ix":29}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0030","ix":30,"v":0},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0031","ix":31,"v":0},{"ty":0,"nm":"Precision","mn":"Pseudo/Duik Kleaner v3.2-0032","ix":32,"v":{"a":0,"k":1,"ix":32}}]}],"shapes":[{"ty":"gr","it":[{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[-0.019,-0.24],[-0.069,-0.26],[-0.195,-0.511],[-0.103,-0.248],[-0.089,-0.131],[-0.321,-0.346],[-0.259,-0.221],[-0.368,-0.289],[-0.563,-0.006],[-0.225,0.086],[-0.07,0.174],[-0.08,0.19],[-0.033,0.196],[0.045,0.348],[0.168,0.388],[0.273,0.501],[0.369,0.516],[1.152,0.114],[-0.088,-1.059]],"o":[[0.02,0.238],[0.022,0.268],[0.142,0.529],[0.095,0.252],[0.059,0.146],[0.262,0.391],[0.233,0.247],[0.356,0.301],[0.448,0.353],[0.24,0.01],[0.176,-0.067],[0.11,-0.175],[0.076,-0.185],[0.061,-0.347],[-0.056,-0.422],[-0.229,-0.523],[-0.303,-0.558],[-0.687,-0.965],[-0.761,-0.076],[0,0]],"v":[[-3.605,-3.181],[-3.547,-2.463],[-3.384,-1.688],[-2.877,-0.145],[-2.586,0.608],[-2.337,1.014],[-1.463,2.116],[-0.751,2.859],[0.342,3.736],[2.028,4.284],[2.727,4.17],[3.096,3.809],[3.433,3.261],[3.551,2.639],[3.584,1.607],[3.184,0.419],[2.44,-1.106],[1.407,-2.682],[-1.613,-4.266],[-3.605,-3.181]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.992156863213,0.772549033165,0.156862750649,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[192.854,196.516],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0.173,-0.168],[0.156,-0.219],[0.27,-0.476],[0.126,-0.238],[0.044,-0.152],[0.062,-0.468],[0.005,-0.34],[-0.012,-0.468],[-0.354,-0.438],[-0.21,-0.119],[-0.179,0.057],[-0.197,0.06],[-0.172,0.099],[-0.24,0.256],[-0.192,0.377],[-0.212,0.529],[-0.162,0.613],[0.646,0.961],[0.76,-0.743]],"o":[[-0.171,0.167],[-0.193,0.188],[-0.317,0.446],[-0.133,0.234],[-0.075,0.138],[-0.134,0.452],[-0.042,0.337],[-0.006,0.466],[0.013,0.57],[0.145,0.192],[0.164,0.093],[0.205,-0.026],[0.191,-0.059],[0.306,-0.174],[0.29,-0.313],[0.258,-0.51],[0.237,-0.589],[0.306,-1.144],[-0.427,-0.635],[0,0]],"v":[[-0.041,-4.69],[-0.557,-4.188],[-1.051,-3.568],[-1.917,-2.195],[-2.312,-1.49],[-2.466,-1.04],[-2.759,0.336],[-2.877,1.358],[-2.857,2.76],[-2.205,4.408],[-1.672,4.874],[-1.158,4.928],[-0.521,4.839],[0.033,4.534],[0.85,3.902],[1.511,2.836],[2.212,1.291],[2.768,-0.509],[2.065,-3.846],[-0.041,-4.69]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.996078431606,0.803921580315,0.015686275437,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[159.186,198.363],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":2,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0.194,0.095],[0.192,0.03],[0.302,-0.141],[0.19,-0.138],[0.258,-0.235],[0.76,-0.707],[0.618,-0.844],[0.081,-1.294],[-0.804,-0.526],[-0.67,0.191],[-0.519,0.191],[-0.474,0.314],[-0.515,0.464],[-0.671,1.012],[-0.097,0.508],[0.007,0.447],[0.961,0.52]],"o":[[-0.127,-0.166],[-0.178,-0.079],[-0.311,-0.075],[-0.211,0.099],[-0.285,0.204],[-0.77,0.698],[-0.767,0.716],[-0.732,0.999],[-0.06,0.944],[0.625,0.411],[0.532,-0.151],[0.536,-0.199],[0.578,-0.385],[0.9,-0.811],[0.282,-0.425],[0.083,-0.439],[-0.013,-0.934],[0,0]],"v":[[4.3,-5.265],[3.82,-5.655],[3.263,-5.821],[2.293,-5.809],[1.686,-5.363],[0.845,-4.733],[-1.426,-2.589],[-3.644,-0.247],[-5.544,3.036],[-4.319,5.649],[-2.339,5.686],[-0.747,5.2],[0.762,4.295],[2.4,3.041],[4.836,0.418],[5.438,-0.916],[5.548,-2.252],[4.3,-5.265]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.992156863213,0.772549033165,0.156862750649,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[144.463,187.679],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 3","np":2,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[-1.136,-0.403],[-1.351,0.076],[-0.35,0.806],[-0.039,0.092],[0.204,-0.297],[-0.165,0.122],[0.454,0.802],[-0.009,0.148],[0.142,0.39],[0.16,0.267],[-0.104,-0.39],[0.267,0.583],[0.409,0.284],[0.334,0.134],[0.796,0.19],[1.296,0.314],[0.245,-0.381],[0.105,-0.686],[-0.205,-0.699],[-0.603,-0.215]],"o":[[1.136,0.403],[1.257,0.445],[0.923,-0.052],[0.039,-0.092],[-0.204,0.297],[0.168,-0.118],[0.798,-0.589],[-0.009,-0.013],[0.027,-0.413],[-0.107,-0.292],[0.102,0.39],[-0.061,-0.635],[-0.218,-0.472],[-0.299,-0.206],[-0.763,-0.301],[-1.294,-0.312],[-0.545,-0.131],[-0.376,0.587],[-0.107,0.71],[0.16,0.55],[0,0]],"v":[[-4.329,2.291],[-0.918,3.503],[2.961,4.407],[4.791,2.867],[4.911,2.59],[4.296,3.478],[4.799,3.125],[5.268,0.044],[5.501,1.465],[5.344,0.25],[4.909,-0.564],[5.216,0.607],[4.789,-1.233],[3.835,-2.266],[2.913,-2.752],[0.583,-3.458],[-3.303,-4.397],[-4.76,-3.497],[-5.446,-1.572],[-5.377,0.63],[-4.329,2.291]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.992156863213,0.772549033165,0.156862750649,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[203.833,183.555],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 4","np":2,"cix":2,"bm":0,"ix":4,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0.067,-1.204],[-0.452,-1.275],[-0.872,-0.109],[-0.1,-0.012],[0.342,0.113],[-0.163,-0.124],[-0.642,0.661],[-0.144,0.033],[-0.334,0.246],[-0.211,0.229],[0.345,-0.209],[-0.484,0.42],[-0.157,0.473],[-0.034,0.358],[0.041,0.817],[0.063,1.332],[0.435,0.128],[0.688,-0.092],[0.613,-0.393],[0.037,-0.639]],"o":[[-0.067,1.204],[-0.074,1.331],[0.31,0.871],[0.1,0.012],[-0.342,-0.113],[0.16,0.128],[0.789,0.6],[0.01,-0.012],[0.404,-0.09],[0.25,-0.185],[-0.345,0.207],[0.592,-0.237],[0.391,-0.342],[0.114,-0.345],[0.075,-0.817],[-0.064,-1.329],[-0.028,-0.56],[-0.669,-0.196],[-0.712,0.097],[-0.483,0.308],[0,0]],"v":[[-3.319,-3.544],[-3.524,0.07],[-3.301,4.046],[-1.309,5.37],[-1.009,5.407],[-2.034,5.067],[-1.554,5.451],[1.535,5.034],[0.237,5.658],[1.358,5.165],[2.018,4.519],[0.98,5.142],[2.625,4.216],[3.348,3.009],[3.555,1.988],[3.579,-0.447],[3.387,-4.439],[2.113,-5.585],[0.073,-5.702],[-2.02,-5.017],[-3.319,-3.544]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.992156863213,0.772549033165,0.156862750649,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[175.024,203.048],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 5","np":2,"cix":2,"bm":0,"ix":5,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[-1.198,0.133],[-1.182,0.657],[0.037,0.878],[0.005,0.1],[0.054,-0.356],[-0.095,0.182],[0.758,0.524],[0.057,0.137],[0.298,0.289],[0.26,0.17],[-0.263,-0.306],[0.494,0.408],[0.492,0.077],[0.359,-0.025],[0.799,-0.176],[1.303,-0.282],[0.054,-0.45],[-0.205,-0.663],[-0.49,-0.54],[-0.636,0.07]],"o":[[1.198,-0.133],[1.325,-0.148],[0.808,-0.45],[-0.005,-0.1],[-0.054,0.356],[0.1,-0.179],[0.461,-0.878],[-0.014,-0.008],[-0.156,-0.383],[-0.224,-0.216],[0.261,0.306],[-0.332,-0.544],[-0.402,-0.329],[-0.359,-0.056],[-0.818,0.062],[-1.3,0.284],[-0.548,0.12],[-0.082,0.692],[0.213,0.686],[0.384,0.425],[0,0]],"v":[[-2.897,3.853],[0.701,3.456],[4.586,2.577],[5.561,0.393],[5.548,0.092],[5.382,1.159],[5.681,0.622],[4.759,-2.355],[5.588,-1.179],[4.917,-2.203],[4.17,-2.746],[4.957,-1.826],[3.771,-3.295],[2.461,-3.808],[1.42,-3.843],[-0.985,-3.463],[-4.891,-2.612],[-5.81,-1.166],[-5.587,0.865],[-4.565,2.816],[-2.897,3.853]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.992156863213,0.772549033165,0.156862750649,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[204.667,168.576],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 6","np":2,"cix":2,"bm":0,"ix":6,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[-1.569,1.204],[-0.384,0.364],[-0.288,0.606],[0.32,1.34],[1.23,0.134],[0.509,-0.104],[0.461,-0.361],[0.379,-0.313],[0.667,-0.698],[0.682,-0.761],[-0.466,-0.963],[-0.485,-0.365],[-0.452,0.294]],"o":[[1.659,-1.075],[0.42,-0.324],[0.469,-0.444],[0.561,-1.185],[-0.28,-1.168],[-0.518,-0.055],[-0.589,0.123],[-0.387,0.304],[-0.742,0.617],[-0.708,0.739],[-0.839,0.938],[0.259,0.537],[0.351,0.265],[0,0]],"v":[[-2.495,5.898],[2.42,2.545],[3.595,1.456],[4.709,0.013],[5.527,-3.85],[3.131,-5.985],[1.568,-5.765],[0.106,-4.924],[-1.058,-4.014],[-3.102,-1.908],[-5.168,0.361],[-5.037,3.993],[-3.946,5.488],[-2.495,5.898]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.992156863213,0.772549033165,0.156862750649,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[199.667,151.454],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 7","np":2,"cix":2,"bm":0,"ix":7,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[-0.348,0.426],[-0.259,0.721],[-0.093,0.409],[-0.072,0.448],[0.002,0.544],[0.008,0.195],[0.098,0.307],[0.104,0.185],[-0.2,-0.376],[-0.074,-0.311],[0.011,0.151],[0.97,-0.703],[0.052,-0.038],[-0.158,0.062],[0.328,-0.29],[0.085,-0.099],[0.18,-0.349],[0.083,-0.307],[0.089,-0.326],[0.088,-0.328],[0.011,-0.502],[0.039,-0.827],[-0.519,-0.601],[-0.42,0.531]],"o":[[0.34,-0.429],[0.49,-0.597],[0.142,-0.395],[0.103,-0.44],[0.086,-0.532],[-0.001,-0.193],[-0.016,-0.322],[-0.048,-0.206],[-0.187,-0.376],[0.074,0.311],[-0.01,-0.15],[-0.052,-0.739],[-0.053,0.036],[0.158,-0.062],[-0.427,-0.039],[-0.098,0.087],[-0.253,0.295],[-0.146,0.281],[-0.087,0.326],[-0.086,0.327],[-0.129,0.484],[-0.022,0.827],[-0.037,0.775],[0.299,0.346],[0,0]],"v":[[-0.325,5.512],[0.741,4.261],[1.681,2.037],[2.072,0.846],[2.307,-0.49],[2.462,-2.063],[2.454,-2.648],[2.267,-3.59],[2.038,-4.174],[2.057,-4.175],[2.278,-3.241],[2.247,-3.691],[0.446,-5.567],[0.287,-5.454],[0.761,-5.64],[-0.212,-5.353],[-0.5,-5.077],[-1.104,-3.956],[-1.523,-3.08],[-1.787,-2.1],[-2.05,-1.118],[-2.379,0.369],[-2.458,2.849],[-1.74,5.107],[-0.325,5.512]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.992156863213,0.772549033165,0.156862750649,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[185.109,143.091],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 8","np":2,"cix":2,"bm":0,"ix":8,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0.173,-0.468],[-0.028,0.132],[0.033,0.745],[0.098,0.898],[0.121,0.945],[1.369,1.138],[0.271,0.024],[0.199,-0.479],[-0.047,-0.655],[-0.1,-0.927],[-0.198,-1.166],[-0.221,-0.638],[-0.08,-0.213],[0.109,0.33],[-0.042,-0.138],[-0.844,-0.405],[-0.094,0.673]],"o":[[0.018,-0.126],[0.047,-0.126],[0.163,-0.734],[-0.04,-0.903],[-0.101,-0.948],[-0.221,-1.698],[-0.192,-0.159],[-0.587,-0.053],[-0.266,0.632],[0.067,0.931],[0.129,1.174],[0.112,0.659],[0.077,0.214],[0.096,0.273],[0.042,0.138],[0.254,0.824],[0.716,0.344],[0,0]],"v":[[2.095,6.341],[2.112,6.056],[2.202,5.652],[2.358,3.497],[2.219,0.781],[1.873,-2.058],[-0.245,-6.942],[-0.978,-7.332],[-2.145,-6.459],[-2.341,-4.251],[-2.072,-1.458],[-1.495,2.057],[-1.001,3.97],[-0.769,4.613],[-0.79,4.529],[-0.664,4.94],[0.848,7.233],[2.095,6.341]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.992156863213,0.772549033165,0.156862750649,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[172.636,138.337],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 9","np":2,"cix":2,"bm":0,"ix":9,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0.038,0.324],[-0.028,-0.296],[0.641,1.144],[0.543,0.79],[0.389,0.566],[0.929,0.264],[0.104,-0.336],[-0.122,-0.606],[-0.697,-1.023],[-0.386,-0.565],[-0.419,-0.498],[-0.335,-0.279],[-0.682,0.199],[0.001,0.228]],"o":[[-0.038,-0.324],[0.029,0.298],[0.202,-1.345],[-0.466,-0.835],[-0.389,-0.566],[-0.534,-0.777],[-0.421,-0.12],[-0.187,0.603],[0.253,1.257],[0.385,0.567],[0.368,0.539],[0.28,0.333],[0.508,0.427],[0.261,-0.077],[0,0]],"v":[[3.56,4.637],[3.447,3.663],[3.53,4.554],[2.391,0.658],[0.919,-1.781],[-0.245,-3.479],[-2.549,-5.421],[-3.458,-4.749],[-3.431,-2.908],[-1.72,0.699],[-0.563,2.398],[0.657,3.919],[1.552,4.865],[3.152,5.376],[3.56,4.637]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.992156863213,0.772549033165,0.156862750649,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[156.034,144.312],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 10","np":2,"cix":2,"bm":0,"ix":10,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0.197,0.13],[0.329,0.068],[0.373,0.093],[0.787,0.162],[0.722,0.212],[0.349,0.076],[0.223,-0.024],[0.253,-0.221],[0.011,-0.353],[-0.079,-0.337],[-0.572,-0.701],[-0.723,-0.364],[-0.492,-0.147],[-0.781,-0.162],[-0.772,0.007],[-0.374,0.02],[-0.242,0.117],[-0.208,0.187],[-0.021,0.24],[0.158,0.493],[0.782,0.526]],"o":[[-0.197,-0.132],[-0.284,-0.187],[-0.376,-0.079],[-0.781,-0.192],[-0.737,-0.153],[-0.346,-0.101],[-0.224,-0.048],[-0.34,0.035],[-0.2,0.29],[-0.026,0.346],[0.157,0.879],[0.505,0.621],[0.456,0.228],[0.765,0.228],[0.758,0.156],[0.373,-0.005],[0.273,-0.015],[0.249,-0.121],[0.193,-0.177],[0.048,-0.524],[-0.285,-0.881],[0,0]],"v":[[4.141,-1.462],[3.557,-1.869],[2.603,-2.191],[1.478,-2.448],[-0.859,-3],[-3.047,-3.546],[-4.091,-3.873],[-4.798,-3.888],[-5.601,-3.43],[-5.914,-2.464],[-5.836,-1.439],[-4.77,1.054],[-2.998,2.612],[-1.509,3.119],[0.81,3.704],[3.057,3.907],[4.176,3.871],[4.964,3.738],[5.638,3.162],[5.913,2.319],[5.684,0.771],[4.141,-1.462]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.992156863213,0.772549033165,0.156862750649,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[143.719,158.007],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 11","np":2,"cix":2,"bm":0,"ix":11,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0.832,0.105],[0.641,-0.003],[0.694,-0.167],[0.281,-0.105],[0.162,-0.128],[0.06,-0.405],[-0.065,0.2],[0.22,-0.253],[-0.092,-0.281],[-0.356,-0.216],[-0.393,-0.177],[0,0],[-0.378,-0.223],[-0.245,-0.053],[-0.336,-0.04],[-0.674,0.066],[-0.673,0.119],[-0.413,0.509],[0.125,0.388],[0.463,0.294]],"o":[[-0.691,-0.44],[-0.636,-0.08],[-0.708,0.002],[-0.291,0.071],[-0.191,0.072],[-0.344,0.273],[0.062,-0.202],[-0.268,0.205],[-0.234,0.267],[0.123,0.382],[0.369,0.222],[0,0],[0.267,0.338],[0.219,0.128],[0.331,0.072],[0.676,0.084],[0.679,-0.07],[0.683,-0.121],[0.295,-0.368],[-0.164,-0.51],[0,0]],"v":[[3.888,-1.603],[1.592,-2.692],[-0.383,-2.687],[-2.452,-2.502],[-3.296,-2.22],[-3.834,-1.965],[-4.237,-0.849],[-4.046,-1.451],[-4.81,-0.804],[-4.823,0.281],[-4.127,1.302],[-2.969,1.863],[-3.523,1.347],[-2.614,2.269],[-1.855,2.486],[-0.859,2.685],[1.106,2.647],[3.163,2.436],[4.769,1.117],[4.796,-0.289],[3.888,-1.603]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.992156863213,0.772549033165,0.156862750649,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[141.471,173.1],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 12","np":2,"cix":2,"bm":0,"ix":12,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-0.2,-0.544],[-0.151,-1.86],[0.012,-0.664],[2.327,-3.344],[0.415,-0.493],[3.526,-1.294],[5.217,3.256],[0.417,0.613],[0,0],[0.695,1.894],[-0.282,3.232],[-0.124,0.705],[-2.439,2.981],[-0.49,0.52],[-2.494,1.149],[-0.581,0.213],[0,0],[-1.561,0.211],[-0.676,0.014],[-0.152,-0.008],[-2.353,-2.179],[-0.471,-0.529],[-0.679,-1.155],[-0.297,-0.636]],"o":[[0.668,1.819],[0.063,0.636],[-0.078,4.136],[-0.364,0.517],[-2.233,2.671],[-6.264,2.299],[-0.529,-0.572],[0,0],[-1.109,-1.572],[-1.191,-3.245],[0.073,-0.729],[0.695,-3.788],[0.457,-0.551],[1.846,-1.869],[0.579,-0.277],[0,0],[1.545,-0.546],[0.686,-0.103],[0.145,-0.011],[3.048,0.882],[0.525,0.446],[0.87,0.979],[0.372,0.608],[0.249,0.504]],"v":[[17.367,-7.562],[18.577,-2.005],[18.643,-0.029],[14.917,11.447],[13.749,12.962],[5.034,19.076],[-13.073,17.23],[-14.492,15.453],[-14.505,15.415],[-17.254,10.189],[-18.56,0.368],[-18.288,-1.732],[-13.473,-12.097],[-12.048,-13.663],[-5.499,-18.259],[-3.744,-18.987],[-3.538,-19.063],[1.137,-20.183],[3.224,-20.353],[3.692,-20.355],[11.909,-15.709],[13.381,-14.249],[15.715,-11.02],[16.707,-9.129]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.992156863213,0.772549033165,0.156862750649,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[169.112,168.132],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 13","np":2,"cix":2,"bm":0,"ix":13,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-0.213,-0.581],[-0.168,-2.024],[0.01,-0.727],[2.544,-3.679],[0.464,-0.532],[3.863,-1.418],[6.049,6.335],[0.218,0.303],[0.417,0.613],[0,0],[0.695,1.894],[-0.282,3.232],[-0.124,0.705],[-2.439,2.981],[-0.49,0.52],[-2.494,1.149],[-0.581,0.213],[0,0],[-1.561,0.211],[-0.676,0.014],[-0.152,-0.008],[-4.252,-3.93],[-0.51,-0.579],[-0.758,-1.254],[-0.325,-0.711]],"o":[[0.737,2.007],[0.053,0.725],[-0.085,4.522],[-0.394,0.549],[-2.441,2.917],[-8.758,3.215],[-0.267,-0.264],[-0.529,-0.572],[0,0],[-1.109,-1.572],[-1.191,-3.245],[0.073,-0.729],[0.695,-3.788],[0.457,-0.551],[1.846,-1.869],[0.579,-0.277],[0,0],[1.545,-0.546],[0.686,-0.103],[0.145,-0.011],[5.849,-0.125],[0.565,0.495],[0.942,1.059],[0.412,0.658],[0.27,0.561]],"v":[[21.324,-7.832],[22.656,-1.766],[22.734,0.418],[18.662,12.979],[17.371,14.623],[7.826,21.319],[-16.429,15.707],[-17.162,14.87],[-18.581,13.092],[-18.595,13.055],[-21.343,7.828],[-22.649,-1.993],[-22.377,-4.093],[-17.562,-14.457],[-16.137,-16.024],[-9.588,-20.619],[-7.834,-21.348],[-7.627,-21.424],[-2.952,-22.544],[-0.865,-22.714],[-0.398,-22.715],[15.367,-16.755],[16.965,-15.128],[19.529,-11.621],[20.608,-9.549]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.949019610882,0.678431391716,0,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[173.201,170.492],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 14","np":2,"cix":2,"bm":0,"ix":14,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[173.201,170.492],"ix":2},"a":{"a":0,"k":[173.201,170.492],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":14,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[173.201,170.492],"ix":2},"a":{"a":0,"k":[173.201,170.492],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":1,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0.111,1.509],[1.533,4.176],[0.561,1.167],[0.856,1.368],[1.96,2.203],[1.175,1.03],[12.171,-0.26],[0.302,-0.022],[1.427,-0.214],[3.214,-1.136],[0,0],[1.206,-0.576],[3.842,-3.89],[0.952,-1.147],[1.447,-7.882],[0.152,-1.517],[-2.478,-6.751],[-2.308,-3.271],[0,0],[-1.101,-1.19],[-0.556,-0.549],[-18.225,6.689],[-5.078,6.071],[-0.82,1.143],[-0.178,9.409]],"o":[[-0.35,-4.211],[-0.444,-1.21],[-0.675,-1.479],[-1.578,-2.609],[-1.062,-1.204],[-8.847,-8.178],[-0.316,-0.017],[-1.406,0.029],[-3.248,0.44],[0,0],[-1.21,0.444],[-5.189,2.392],[-1.02,1.083],[-5.075,6.202],[-0.259,1.468],[-0.587,6.725],[1.447,3.942],[0,0],[0.867,1.276],[0.453,0.631],[12.587,13.181],[8.039,-2.951],[0.966,-1.108],[5.294,-7.655],[0.02,-1.513]],"v":[[47.144,-3.676],[44.371,-16.297],[42.883,-19.869],[40.636,-24.181],[35.301,-31.478],[31.977,-34.864],[-0.828,-47.267],[-1.801,-47.264],[-6.143,-46.91],[-15.871,-44.58],[-16.301,-44.422],[-19.951,-42.905],[-33.578,-33.343],[-36.545,-30.084],[-46.563,-8.517],[-47.129,-4.146],[-44.411,16.289],[-38.693,27.165],[-38.664,27.243],[-35.712,30.942],[-34.187,32.685],[16.285,44.361],[36.147,30.428],[38.832,27.007],[47.307,0.87]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.949019610882,0.678431391716,0,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[173.215,170.505],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[0,0],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":20,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 7","np":2,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0.111,1.509],[1.533,4.176],[0.561,1.167],[0.856,1.368],[1.96,2.203],[1.175,1.03],[12.171,-0.26],[0.302,-0.022],[1.427,-0.214],[3.214,-1.136],[0,0],[1.206,-0.576],[3.842,-3.89],[0.952,-1.147],[1.447,-7.882],[0.152,-1.517],[-2.478,-6.751],[-2.308,-3.271],[0,0],[-1.101,-1.19],[-0.556,-0.549],[-18.225,6.689],[-5.078,6.071],[-0.82,1.143],[-0.178,9.409]],"o":[[-0.35,-4.211],[-0.444,-1.21],[-0.675,-1.479],[-1.578,-2.609],[-1.062,-1.204],[-8.847,-8.178],[-0.316,-0.017],[-1.406,0.029],[-3.248,0.44],[0,0],[-1.21,0.444],[-5.189,2.392],[-1.02,1.083],[-5.075,6.202],[-0.259,1.468],[-0.587,6.725],[1.447,3.942],[0,0],[0.867,1.276],[0.453,0.631],[12.587,13.181],[8.039,-2.951],[0.966,-1.108],[5.294,-7.655],[0.02,-1.513]],"v":[[47.144,-3.676],[44.371,-16.297],[42.883,-19.869],[40.636,-24.181],[35.301,-31.478],[31.977,-34.864],[-0.828,-47.267],[-1.801,-47.264],[-6.143,-46.91],[-15.871,-44.58],[-16.301,-44.422],[-19.951,-42.905],[-33.578,-33.343],[-36.545,-30.084],[-46.563,-8.517],[-47.129,-4.146],[-44.411,16.289],[-38.693,27.165],[-38.664,27.243],[-35.712,30.942],[-34.187,32.685],[16.285,44.361],[36.147,30.428],[38.832,27.007],[47.307,0.87]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.949019610882,0.678431391716,0,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[173.215,170.505],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[0,0],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":20,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 6","np":2,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0.111,1.509],[1.533,4.176],[0.561,1.167],[0.856,1.368],[1.96,2.203],[1.175,1.03],[12.171,-0.26],[0.302,-0.022],[1.427,-0.214],[3.214,-1.136],[0,0],[1.206,-0.576],[3.842,-3.89],[0.952,-1.147],[1.447,-7.882],[0.152,-1.517],[-2.478,-6.751],[-2.308,-3.271],[0,0],[-1.101,-1.19],[-0.556,-0.549],[-18.225,6.689],[-5.078,6.071],[-0.82,1.143],[-0.178,9.409]],"o":[[-0.35,-4.211],[-0.444,-1.21],[-0.675,-1.479],[-1.578,-2.609],[-1.062,-1.204],[-8.847,-8.178],[-0.316,-0.017],[-1.406,0.029],[-3.248,0.44],[0,0],[-1.21,0.444],[-5.189,2.392],[-1.02,1.083],[-5.075,6.202],[-0.259,1.468],[-0.587,6.725],[1.447,3.942],[0,0],[0.867,1.276],[0.453,0.631],[12.587,13.181],[8.039,-2.951],[0.966,-1.108],[5.294,-7.655],[0.02,-1.513]],"v":[[47.144,-3.676],[44.371,-16.297],[42.883,-19.869],[40.636,-24.181],[35.301,-31.478],[31.977,-34.864],[-0.828,-47.267],[-1.801,-47.264],[-6.143,-46.91],[-15.871,-44.58],[-16.301,-44.422],[-19.951,-42.905],[-33.578,-33.343],[-36.545,-30.084],[-46.563,-8.517],[-47.129,-4.146],[-44.411,16.289],[-38.693,27.165],[-38.664,27.243],[-35.712,30.942],[-34.187,32.685],[16.285,44.361],[36.147,30.428],[38.832,27.007],[47.307,0.87]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.949019610882,0.678431391716,0,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[173.215,170.505],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[0,0],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":20,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 5","np":2,"cix":2,"bm":0,"ix":4,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0.111,1.509],[1.533,4.176],[0.561,1.167],[0.856,1.368],[1.96,2.203],[1.175,1.03],[12.171,-0.26],[0.302,-0.022],[1.427,-0.214],[3.214,-1.136],[0,0],[1.206,-0.576],[3.842,-3.89],[0.952,-1.147],[1.447,-7.882],[0.152,-1.517],[-2.478,-6.751],[-2.308,-3.271],[0,0],[-1.101,-1.19],[-0.556,-0.549],[-18.225,6.689],[-5.078,6.071],[-0.82,1.143],[-0.178,9.409]],"o":[[-0.35,-4.211],[-0.444,-1.21],[-0.675,-1.479],[-1.578,-2.609],[-1.062,-1.204],[-8.847,-8.178],[-0.316,-0.017],[-1.406,0.029],[-3.248,0.44],[0,0],[-1.21,0.444],[-5.189,2.392],[-1.02,1.083],[-5.075,6.202],[-0.259,1.468],[-0.587,6.725],[1.447,3.942],[0,0],[0.867,1.276],[0.453,0.631],[12.587,13.181],[8.039,-2.951],[0.966,-1.108],[5.294,-7.655],[0.02,-1.513]],"v":[[47.144,-3.676],[44.371,-16.297],[42.883,-19.869],[40.636,-24.181],[35.301,-31.478],[31.977,-34.864],[-0.828,-47.267],[-1.801,-47.264],[-6.143,-46.91],[-15.871,-44.58],[-16.301,-44.422],[-19.951,-42.905],[-33.578,-33.343],[-36.545,-30.084],[-46.563,-8.517],[-47.129,-4.146],[-44.411,16.289],[-38.693,27.165],[-38.664,27.243],[-35.712,30.942],[-34.187,32.685],[16.285,44.361],[36.147,30.428],[38.832,27.007],[47.307,0.87]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.949019610882,0.678431391716,0,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[173.215,170.505],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[0,0],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":20,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 4","np":2,"cix":2,"bm":0,"ix":5,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0.111,1.509],[1.533,4.176],[0.561,1.167],[0.856,1.368],[1.96,2.203],[1.175,1.03],[12.171,-0.26],[0.302,-0.022],[1.427,-0.214],[3.214,-1.136],[0,0],[1.206,-0.576],[3.842,-3.89],[0.952,-1.147],[1.447,-7.882],[0.152,-1.517],[-2.478,-6.751],[-2.308,-3.271],[0,0],[-1.101,-1.19],[-0.556,-0.549],[-18.225,6.689],[-5.078,6.071],[-0.82,1.143],[-0.178,9.409]],"o":[[-0.35,-4.211],[-0.444,-1.21],[-0.675,-1.479],[-1.578,-2.609],[-1.062,-1.204],[-8.847,-8.178],[-0.316,-0.017],[-1.406,0.029],[-3.248,0.44],[0,0],[-1.21,0.444],[-5.189,2.392],[-1.02,1.083],[-5.075,6.202],[-0.259,1.468],[-0.587,6.725],[1.447,3.942],[0,0],[0.867,1.276],[0.453,0.631],[12.587,13.181],[8.039,-2.951],[0.966,-1.108],[5.294,-7.655],[0.02,-1.513]],"v":[[47.144,-3.676],[44.371,-16.297],[42.883,-19.869],[40.636,-24.181],[35.301,-31.478],[31.977,-34.864],[-0.828,-47.267],[-1.801,-47.264],[-6.143,-46.91],[-15.871,-44.58],[-16.301,-44.422],[-19.951,-42.905],[-33.578,-33.343],[-36.545,-30.084],[-46.563,-8.517],[-47.129,-4.146],[-44.411,16.289],[-38.693,27.165],[-38.664,27.243],[-35.712,30.942],[-34.187,32.685],[16.285,44.361],[36.147,30.428],[38.832,27.007],[47.307,0.87]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.949019610882,0.678431391716,0,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[173.215,170.505],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":1,"k":[{"i":{"x":[0.667,0.667],"y":[1,1]},"o":{"x":[0.333,0.333],"y":[0,0]},"t":21.923,"s":[0,0]},{"t":42.9228515625,"s":[100,100]}],"ix":3,"x":"var $bm_rt;\\nvar fx = effect(\'ŝlosilo pli pura\');\\nvar doAnticipation = fx(1).value;\\nvar doInterpolation = fx(2).value;\\nvar doFollowThrough = fx(3).value;\\nvar damping = $bm_div(fx(15).value, 10);\\nvar elasticity = $bm_div(fx(13).value, 10);\\nvar bounce = fx(17).value;\\nvar anticipationDuration = fx(5).value;\\nvar anticipationQuantity = $bm_div(fx(6).value, 100);\\nvar slowIn = $bm_div(fx(9).value, 100);\\nvar slowOut = $bm_div(fx(10).value, 100);\\nvar spatialMode = fx(21).value;\\nvar spatialDoInterpolation = fx(20).value;\\nvar moBlurPrecision = fx(32).value;\\nvar elasticityRandom = fx(14).value;\\nvar dampingRandom = fx(16).value;\\nvar softBody = fx(28).value;\\nvar flexibility = $bm_div(fx(29).value, 100);\\nvar doOverlap = fx(23).value;\\nvar overlapDuration = fx(24).value;\\nvar overlapRandom = fx(25).value;\\nvar threshold = $bm_div($bm_div(1, moBlurPrecision), 1000);\\nvar zeroValue;\\nif ($bm_isInstanceOfArray(value)) {\\n    if (value.length == 2)\\n        zeroValue = [\\n            0,\\n            0\\n        ];\\n    else if (value.length == 3)\\n        zeroValue = [\\n            0,\\n            0,\\n            0\\n        ];\\n    else if (value.length == 4)\\n        zeroValue = [\\n            0,\\n            0,\\n            0,\\n            0\\n        ];\\n} else\\n    zeroValue = 0;\\nvar isThisSpatial = isSpatial(thisProperty);\\nvar isThisPosition = thisProperty === $bm_transform.position;\\nvar simulate = false;\\nif (isThisSpatial) {\\n    doInterpolation = doInterpolation && spatialDoInterpolation;\\n    if (isThisPosition && thisProperty.numKeys > 0) {\\n        doOverlap = false;\\n        simulate = false;\\n    } else {\\n        simulate = spatialMode == 2;\\n        doOverlap = overlapDuration != 0 && doOverlap && simulate;\\n    }\\n} else {\\n    doOverlap = false;\\n}\\nif (!doOverlap) {\\n    overlapDuration = 0;\\n}\\nif (simulate && softBody && isThisSpatial && !isThisPosition && (doFollowThrough || doOverlap)) {\\n    var distanceRatio = $bm_div(length(valueAtTime(0), $bm_transform.anchorPoint), $bm_div(thisLayer.width, 2));\\n    distanceRatio = $bm_div($bm_sum(1, $bm_mul(distanceRatio, flexibility)), 2);\\n    if (doFollowThrough) {\\n        elasticity = $bm_div(elasticity, distanceRatio);\\n        damping = $bm_div(damping, distanceRatio);\\n    }\\n    if (doOverlap) {\\n        overlapDuration = $bm_mul(overlapDuration, distanceRatio);\\n    }\\n}\\nseedRandom(0, true);\\nif (doFollowThrough) {\\n    if (elasticityRandom > 0)\\n        elasticity = addNoise(elasticity, elasticityRandom);\\n    if (dampingRandom > 0)\\n        damping = addNoise(damping, dampingRandom);\\n}\\nif (doOverlap) {\\n    if (doOverlap && overlapRandom > 0)\\n        overlapDuration = addNoise(overlapDuration, overlapRandom);\\n}\\nvar result = value;\\nfunction isSpatial(prop) {\\n    if (!(prop.value instanceof Array))\\n        return false;\\n    if (prop.value.length != 2 && prop.value.length != 3)\\n        return false;\\n    try {\\n        if (typeof prop.speed !== \'undefined\')\\n            return true;\\n    } catch (e) {\\n        return false;\\n    }\\n}\\nfunction addNoise(val, quantity) {\\n    var randomValue = random(0.9, 1.1);\\n    var noiseValue = noise($bm_mul(valueAtTime(0), randomValue));\\n    noiseValue = $bm_mul(noiseValue, $bm_div(quantity, 100));\\n    return $bm_mul(val, $bm_sum(noiseValue, 1));\\n}\\nfunction isAfterLastKey() {\\n    if (numKeys == 0)\\n        return false;\\n    var nKey = nearestKey(time);\\n    return nKey.time <= time && nKey.index == numKeys;\\n}\\nfunction isStill(t, threshold) {\\n    var d = $bm_sub(valueAtTime(t), valueAtTime($bm_sum(t, framesToTime(1))));\\n    if ($bm_isInstanceOfArray(d)) {\\n        for (var i = 0; i < d.length; i++) {\\n            d[i] = Math.abs(d[i]);\\n            if (d[i] >= threshold) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    } else {\\n        d = Math.abs(d);\\n        return d < threshold;\\n    }\\n}\\nfunction bezierInterpolation(t, tMin, tMax, value1, value2, bezierPoints) {\\n    if (arguments.length !== 5 && arguments.length !== 6)\\n        return t;\\n    var a = $bm_sub(value2, value1);\\n    var b = $bm_sub(tMax, tMin);\\n    if (b == 0)\\n        return t;\\n    var c = clamp($bm_div($bm_sub(t, tMin), b), 0, 1);\\n    if (!(bezierPoints instanceof Array) || bezierPoints.length !== 4)\\n        bezierPoints = [\\n            0.33,\\n            0,\\n            0.66,\\n            1\\n        ];\\n    return $bm_sum($bm_mul(a, h(c, bezierPoints)), value1);\\n    function h(f, g) {\\n        var x = $bm_mul(3, g[0]);\\n        var j = $bm_sub($bm_mul(3, $bm_sub(g[2], g[0])), x);\\n        var k = $bm_sub($bm_sub(1, x), j);\\n        var l = $bm_mul(3, g[1]);\\n        var m = $bm_sub($bm_mul(3, $bm_sub(g[3], g[1])), l);\\n        var n = $bm_sub($bm_sub(1, l), m);\\n        var d = f;\\n        for (var i = 0; i < 5; i++) {\\n            var z = $bm_sub($bm_mul(d, $bm_sum(x, $bm_mul(d, $bm_sum(j, $bm_mul(d, k))))), f);\\n            if (Math.abs(z) < 0.001)\\n                break;\\n            d = $bm_sub(d, $bm_div(z, $bm_sum(x, $bm_mul(d, $bm_sum($bm_mul(2, j), $bm_mul($bm_mul(3, k), d))))));\\n        }\\n        return $bm_mul(d, $bm_sum(l, $bm_mul(d, $bm_sum(m, $bm_mul(d, n)))));\\n    }\\n}\\nfunction getPropWorldSpeed(t, prop) {\\n    return length(getPropWorldVelocity(t, prop));\\n}\\nfunction getPrevKey(t) {\\n    if (numKeys == 0)\\n        return null;\\n    var nKey = nearestKey(t);\\n    if (nKey.time <= t)\\n        return nKey;\\n    if (nKey.index > 1)\\n        return key($bm_sub(nKey.index, 1));\\n    return null;\\n}\\nfunction getNextKey(t) {\\n    if (numKeys == 0)\\n        return null;\\n    var nKey = nearestKey(t);\\n    if (nKey.time >= t)\\n        return nKey;\\n    if (nKey.index < numKeys)\\n        return key($bm_sum(nKey.index, 1));\\n    return null;\\n}\\nfunction getPropWorldVelocity(t, prop) {\\n    return $bm_mul($bm_sub(getPropWorldValue($bm_sum(t, 0.005), prop), getPropWorldValue($bm_sub(t, 0.005), prop)), 100);\\n}\\nfunction getLayerWorldPos(t, l) {\\n    return l.toWorld(l.anchorPoint, t);\\n}\\nfunction getPropWorldValue(t, prop) {\\n    if (isPosition(prop))\\n        return getLayerWorldPos(t, thisLayer);\\n    return thisLayer.toWorld(prop.valueAtTime(t), t);\\n}\\nfunction isPosition(prop) {\\n    return prop === $bm_transform.position;\\n}\\nfunction isKeyTop(k, axis) {\\n    var prevSpeed = velocityAtTime($bm_sub(k.time, threshold));\\n    var nextSpeed = velocityAtTime($bm_sum(k.time, threshold));\\n    if ($bm_isInstanceOfArray(value)) {\\n        prevSpeed = prevSpeed[axis];\\n        nextSpeed = nextSpeed[axis];\\n    }\\n    if (Math.abs(prevSpeed) < 0.01 || Math.abs(nextSpeed) < 0.01)\\n        return true;\\n    return $bm_mul(prevSpeed, nextSpeed) < 0;\\n}\\nfunction anticipate() {\\n    var anticipation = zeroValue;\\n    if (isAfterLastKey())\\n        return anticipation;\\n    if (numKeys < 2)\\n        return anticipation;\\n    var nextKey = getNextKey(time);\\n    var aKey = nextKey;\\n    if (!isStill(aKey.time - 0.1, 0.1)) {\\n        aKey = getPrevKey(time);\\n        if (!isStill(aKey.time - 0.1, 0.1))\\n            return anticipation;\\n    }\\n    if (aKey.index == numKeys)\\n        return anticipation;\\n    var anticipationMiddle = aKey.time;\\n    var anticipationStart = $bm_sub(anticipationMiddle, anticipationDuration);\\n    var anticipationEnd = key(aKey.index + 1).time;\\n    var startValue = anticipation;\\n    var midValue = $bm_mul($bm_sum($bm_neg(valueAtTime($bm_sum(anticipationMiddle, anticipationDuration))), aKey.value), anticipationQuantity);\\n    var endValue = anticipation;\\n    if (time < anticipationStart) {\\n        return anticipation;\\n    } else if (time < anticipationMiddle) {\\n        if ($bm_isInstanceOfArray(value)) {\\n            for (var i = 0; i < value.length; i++) {\\n                anticipation[i] = bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue[i], midValue[i], [\\n                    slowOut,\\n                    0,\\n                    slowIn,\\n                    1\\n                ]);\\n            }\\n            return anticipation;\\n        } else {\\n            return bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue, midValue, [\\n                slowOut,\\n                0,\\n                slowIn,\\n                1\\n            ]);\\n        }\\n    } else if (time <= anticipationEnd) {\\n        if ($bm_isInstanceOfArray(value)) {\\n            for (var i = 0; i < value.length; i++) {\\n                anticipation[i] = bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue[i], endValue[i], [\\n                    slowOut,\\n                    0,\\n                    slowIn,\\n                    1\\n                ]);\\n            }\\n            return anticipation;\\n        } else {\\n            return bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue, endValue, [\\n                slowOut,\\n                0,\\n                slowIn,\\n                1\\n            ]);\\n        }\\n    } else {\\n        return anticipation;\\n    }\\n}\\nfunction followThroughAtTime(t) {\\n    var fThrough = zeroValue;\\n    if (elasticity == 0)\\n        return fThrough;\\n    var propSpeed;\\n    if (!simulate) {\\n        if (numKeys < 2)\\n            return fThrough;\\n        if (nearestKey(t).index == 1)\\n            return fThrough;\\n        propSpeed = length(velocityAtTime(t));\\n        if (propSpeed >= threshold)\\n            return fThrough;\\n    } else {\\n        propSpeed = getPropWorldSpeed(t, thisProperty);\\n        if (propSpeed >= threshold)\\n            return fThrough;\\n    }\\n    var fThroughStart = 0;\\n    var fThroughTime = 0;\\n    if (simulate) {\\n        var speedI = getPropWorldSpeed(t, thisProperty);\\n        var i = t;\\n        while (speedI < threshold && i > 0) {\\n            i = $bm_sub(i, $bm_div(thisComp.frameDuration, moBlurPrecision));\\n            speedI = getPropWorldSpeed(i, thisProperty);\\n        }\\n        fThroughStart = i;\\n    } else {\\n        var fThroughKey = getPrevKey(t);\\n        fThroughStart = fThroughKey.time;\\n    }\\n    if (fThroughStart == 0)\\n        return fThrough;\\n    fThroughTime = $bm_sub(t, fThroughStart);\\n    if (simulate)\\n        fThrough = $bm_div(getPropWorldVelocity($bm_sub(fThroughStart, thisComp.frameDuration), thisProperty), 2);\\n    else\\n        fThrough = $bm_div(velocityAtTime($bm_sub(fThroughStart, thisComp.frameDuration)), 2);\\n    if (bounce) {\\n        var cycleDamp = Math.exp($bm_mul($bm_mul(fThroughTime, damping), 0.1));\\n        var damp = $bm_div(Math.exp($bm_mul(fThroughTime, damping)), $bm_div(elasticity, 2));\\n        var cycleDuration = $bm_div(1, $bm_mul(elasticity, 2));\\n        cycleDuration = Math.round(timeToFrames(cycleDuration));\\n        cycleDuration = framesToTime(cycleDuration);\\n        var midDuration = $bm_div(cycleDuration, 2);\\n        var maxValue = $bm_mul(fThrough, midDuration);\\n        var cycvarime = fThroughTime;\\n        var numEndCycles = 1;\\n        while (cycvarime > cycleDuration) {\\n            cycvarime = $bm_sub(cycvarime, cycleDuration);\\n            cycleDuration = $bm_div(cycleDuration, cycleDamp);\\n            cycleDuration = Math.round(timeToFrames(cycleDuration));\\n            if (cycleDuration < 2) {\\n                cycleDuration = 2;\\n                numEndCycles++;\\n            }\\n            cycleDuration = framesToTime(cycleDuration);\\n            midDuration = $bm_div(cycleDuration, 2);\\n            maxValue = $bm_div($bm_mul(fThrough, midDuration), damp);\\n            if (numEndCycles > 100 / damping && maxValue < threshold)\\n                return zeroValue;\\n        }\\n        if (cycvarime < midDuration)\\n            fThrough = bezierInterpolation(cycvarime, 0, midDuration, 0, maxValue, [\\n                0,\\n                0.1,\\n                slowIn,\\n                1\\n            ]);\\n        else\\n            fThrough = bezierInterpolation(cycvarime, midDuration, cycleDuration, maxValue, 0, [\\n                $bm_sub(1, slowIn),\\n                0,\\n                1,\\n                0.9\\n            ]);\\n    } else {\\n        var damp = Math.exp($bm_mul(fThroughTime, damping));\\n        var sinus = $bm_mul($bm_mul($bm_mul(elasticity, fThroughTime), 2), Math.PI);\\n        sinus = Math.sin(sinus);\\n        sinus = $bm_mul($bm_div(0.3, elasticity), sinus);\\n        sinus = $bm_div(sinus, damp);\\n        if (Math.abs(sinus) < $bm_div(threshold, 100))\\n            return 0;\\n        fThrough = $bm_mul(fThrough, sinus);\\n        if (threshold > 0) {\\n            fThrough = $bm_mul(fThrough, $bm_sub(1, $bm_div(propSpeed, threshold)));\\n        }\\n    }\\n    if (bounce) {\\n        var prevValue = valueAtTime($bm_sub(fThroughStart, thisComp.frameDuration));\\n        var startValue = valueAtTime(fThroughStart);\\n        if ($bm_isInstanceOfArray(value)) {\\n            for (var i = 0; i < prevValue.length; i++) {\\n                if (prevValue[i] > startValue[i])\\n                    fThrough[i] = Math.abs(fThrough[i]);\\n                if (prevValue[i] < startValue[i])\\n                    fThrough[i] = $bm_neg(Math.abs(fThrough[i]));\\n            }\\n        } else {\\n            if (prevValue > startValue)\\n                fThrough = Math.abs(fThrough);\\n            if (prevValue < startValue)\\n                fThrough = $bm_neg(Math.abs(fThrough));\\n        }\\n    }\\n    if (simulate) {\\n        if (!isThisPosition) {\\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer));\\n            fThrough = $bm_sub(thisLayer.fromWorld(fThrough), thisLayer.anchorPoint);\\n        } else if (thisLayer.hasParent) {\\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer.parent));\\n            fThrough = $bm_sub(thisLayer.parent.fromWorld(fThrough), thisLayer.parent.anchorPoint);\\n        }\\n    }\\n    return fThrough;\\n}\\nfunction followThrough() {\\n    var propSpeed = length(velocity);\\n    if (propSpeed < threshold)\\n        return followThroughAtTime($bm_sub(time, overlapDuration));\\n    var fThrough = zeroValue;\\n    var t = time;\\n    while (t > 0) {\\n        t = $bm_sub(t, thisComp.frameDuration);\\n        if (simulate)\\n            propSpeed = getPropWorldSpeed($bm_sub(t, overlapDuration), thisProperty);\\n        else\\n            propSpeed = length(velocityAtTime(t));\\n        if (propSpeed < threshold) {\\n            fThrough = followThroughAtTime($bm_sub(t, overlapDuration));\\n            break;\\n        }\\n    }\\n    return linear(time, t, $bm_sum(t, $bm_mul(anticipationDuration, 2)), fThrough, zeroValue);\\n}\\nfunction smartSmooth(axis) {\\n    var startKey = nearestKey(time);\\n    var endKey = startKey;\\n    if (time == startKey.time)\\n        return 0;\\n    if (time < startKey.time && startKey.index == 1)\\n        return 0;\\n    if (time > startKey.time && startKey.index == numKeys)\\n        return 0;\\n    if (time < startKey.time)\\n        startKey = key($bm_sub(startKey.index, 1));\\n    if (time > startKey.time)\\n        endKey = key($bm_sum(startKey.index, 1));\\n    var sI = 0.66;\\n    var sO = 0.33;\\n    var sIV = 1;\\n    var sOV = 0;\\n    var sVal = startKey.value;\\n    var eVal = endKey.value;\\n    if ($bm_isInstanceOfArray(value)) {\\n        sVal = sVal[axis];\\n        eVal = eVal[axis];\\n    }\\n    var sTime = startKey.time;\\n    var eTime = endKey.time;\\n    if (isKeyTop(startKey, axis))\\n        sO = slowOut;\\n    else {\\n        var prevKey = key($bm_sub(startKey.index, 1));\\n        var pVal = prevKey.value;\\n        if ($bm_isInstanceOfArray(value))\\n            pVal = pVal[axis];\\n        sOV = $bm_div($bm_sub(sVal, pVal), $bm_sub(eVal, pVal));\\n    }\\n    if (isKeyTop(endKey, axis)) {\\n        sI = slowIn;\\n        if (endKey.index != numKeys) {\\n            var nextKey = key($bm_sum(endKey.index, 1));\\n            var nVal = nextKey.value;\\n            if ($bm_isInstanceOfArray(value))\\n                nVal = nVal[axis];\\n            if (Math.abs(nVal - eVal) < 0.01 && doFollowThrough)\\n                sI = 1;\\n        }\\n    } else {\\n        var nextKey = key($bm_sum(endKey.index, 1));\\n        var nVal = nextKey.value;\\n        if ($bm_isInstanceOfArray(value))\\n            nVal = nVal[axis];\\n        sIV = $bm_div($bm_sub(eVal, sVal), $bm_sub(nVal, sVal));\\n    }\\n    if (endKey.index == numKeys && doFollowThrough) {\\n        sI = 1;\\n    }\\n    var val = value;\\n    if ($bm_isInstanceOfArray(value))\\n        val = val[axis];\\n    return $bm_sub(bezierInterpolation(time, sTime, eTime, sVal, eVal, [\\n        sO,\\n        sOV,\\n        sI,\\n        sIV\\n    ]), val);\\n}\\nfunction overlap() {\\n    var ol = zeroValue;\\n    if (isThisPosition && !hasParent)\\n        return zeroValue;\\n    ol = $bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisProperty), getPropWorldValue(time, thisProperty));\\n    var motionRatio = $bm_div($bm_div(length(zeroValue, ol), thisLayer.width), 2);\\n    if (isThisPosition) {\\n        var originalDistance = length(valueAtTime(0));\\n        motionRatio = $bm_div(length(zeroValue, ol), thisComp.width);\\n    }\\n    ol = $bm_sum(ol, getPropWorldValue(time, thisProperty));\\n    ol = $bm_sum(ol, $bm_mul($bm_mul($bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisLayer.anchorPoint), ol), motionRatio), flexibility));\\n    ol = thisLayer.fromWorld(ol);\\n    if (!isThisPosition)\\n        ol = $bm_sub(ol, value);\\n    else {\\n        ol = linear(flexibility, 0, 100, $bm_div(ol, 2), 0);\\n        var prevParentWorldPos = getLayerWorldPos($bm_sub(time, overlapDuration), parent);\\n        ol = $bm_sum(ol, $bm_mul($bm_mul($bm_mul(thisLayer.fromWorld(prevParentWorldPos), motionRatio), flexibility), 5));\\n    }\\n    return ol;\\n}\\nvar okToGo = false;\\nif (simulate && fx.enabled)\\n    okToGo = true;\\nelse if (numKeys > 1 && fx.enabled)\\n    okToGo = true;\\nif (okToGo) {\\n    var smartSmoothResult = zeroValue;\\n    if (doInterpolation) {\\n        if ($bm_isInstanceOfArray(value)) {\\n            if (value.length == 2)\\n                smartSmoothResult = [\\n                    smartSmooth(0),\\n                    smartSmooth(1)\\n                ];\\n            else if (value.length == 3)\\n                smartSmoothResult = [\\n                    smartSmooth(0),\\n                    smartSmooth(1),\\n                    smartSmooth(2)\\n                ];\\n            else if (value.length == 4)\\n                smartSmoothResult = [\\n                    smartSmooth(0),\\n                    smartSmooth(1),\\n                    smartSmooth(2),\\n                    smartSmooth(3)\\n                ];\\n        } else {\\n            smartSmoothResult = smartSmooth(0);\\n        }\\n    }\\n    if (doAnticipation)\\n        result = $bm_sum(result, anticipate());\\n    result = $bm_sum(result, smartSmoothResult);\\n    if (doFollowThrough)\\n        result = $bm_sum(result, followThrough());\\n    if (doOverlap)\\n        result = $bm_sum(result, overlap());\\n}\\n$bm_rt = result;"},"r":{"a":0,"k":0,"ix":6},"o":{"a":1,"k":[{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":42.923,"s":[20]},{"t":45,"s":[0]}],"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 3","np":2,"cix":2,"bm":0,"ix":6,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0.111,1.509],[1.533,4.176],[0.561,1.167],[0.856,1.368],[1.96,2.203],[1.175,1.03],[12.171,-0.26],[0.302,-0.022],[1.427,-0.214],[3.214,-1.136],[0,0],[1.206,-0.576],[3.842,-3.89],[0.952,-1.147],[1.447,-7.882],[0.152,-1.517],[-2.478,-6.751],[-2.308,-3.271],[0,0],[-1.101,-1.19],[-0.556,-0.549],[-18.225,6.689],[-5.078,6.071],[-0.82,1.143],[-0.178,9.409]],"o":[[-0.35,-4.211],[-0.444,-1.21],[-0.675,-1.479],[-1.578,-2.609],[-1.062,-1.204],[-8.847,-8.178],[-0.316,-0.017],[-1.406,0.029],[-3.248,0.44],[0,0],[-1.21,0.444],[-5.189,2.392],[-1.02,1.083],[-5.075,6.202],[-0.259,1.468],[-0.587,6.725],[1.447,3.942],[0,0],[0.867,1.276],[0.453,0.631],[12.587,13.181],[8.039,-2.951],[0.966,-1.108],[5.294,-7.655],[0.02,-1.513]],"v":[[47.144,-3.676],[44.371,-16.297],[42.883,-19.869],[40.636,-24.181],[35.301,-31.478],[31.977,-34.864],[-0.828,-47.267],[-1.801,-47.264],[-6.143,-46.91],[-15.871,-44.58],[-16.301,-44.422],[-19.951,-42.905],[-33.578,-33.343],[-36.545,-30.084],[-46.563,-8.517],[-47.129,-4.146],[-44.411,16.289],[-38.693,27.165],[-38.664,27.243],[-35.712,30.942],[-34.187,32.685],[16.285,44.361],[36.147,30.428],[38.832,27.007],[47.307,0.87]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.949019610882,0.678431391716,0,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[173.215,170.505],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":1,"k":[{"i":{"x":[0.667,0.667],"y":[1,1]},"o":{"x":[0.333,0.333],"y":[0,0]},"t":0,"s":[0,0]},{"t":21,"s":[100,100]}],"ix":3,"x":"var $bm_rt;\\nvar fx = effect(\'ŝlosilo pli pura\');\\nvar doAnticipation = fx(1).value;\\nvar doInterpolation = fx(2).value;\\nvar doFollowThrough = fx(3).value;\\nvar damping = $bm_div(fx(15).value, 10);\\nvar elasticity = $bm_div(fx(13).value, 10);\\nvar bounce = fx(17).value;\\nvar anticipationDuration = fx(5).value;\\nvar anticipationQuantity = $bm_div(fx(6).value, 100);\\nvar slowIn = $bm_div(fx(9).value, 100);\\nvar slowOut = $bm_div(fx(10).value, 100);\\nvar spatialMode = fx(21).value;\\nvar spatialDoInterpolation = fx(20).value;\\nvar moBlurPrecision = fx(32).value;\\nvar elasticityRandom = fx(14).value;\\nvar dampingRandom = fx(16).value;\\nvar softBody = fx(28).value;\\nvar flexibility = $bm_div(fx(29).value, 100);\\nvar doOverlap = fx(23).value;\\nvar overlapDuration = fx(24).value;\\nvar overlapRandom = fx(25).value;\\nvar threshold = $bm_div($bm_div(1, moBlurPrecision), 1000);\\nvar zeroValue;\\nif ($bm_isInstanceOfArray(value)) {\\n    if (value.length == 2)\\n        zeroValue = [\\n            0,\\n            0\\n        ];\\n    else if (value.length == 3)\\n        zeroValue = [\\n            0,\\n            0,\\n            0\\n        ];\\n    else if (value.length == 4)\\n        zeroValue = [\\n            0,\\n            0,\\n            0,\\n            0\\n        ];\\n} else\\n    zeroValue = 0;\\nvar isThisSpatial = isSpatial(thisProperty);\\nvar isThisPosition = thisProperty === $bm_transform.position;\\nvar simulate = false;\\nif (isThisSpatial) {\\n    doInterpolation = doInterpolation && spatialDoInterpolation;\\n    if (isThisPosition && thisProperty.numKeys > 0) {\\n        doOverlap = false;\\n        simulate = false;\\n    } else {\\n        simulate = spatialMode == 2;\\n        doOverlap = overlapDuration != 0 && doOverlap && simulate;\\n    }\\n} else {\\n    doOverlap = false;\\n}\\nif (!doOverlap) {\\n    overlapDuration = 0;\\n}\\nif (simulate && softBody && isThisSpatial && !isThisPosition && (doFollowThrough || doOverlap)) {\\n    var distanceRatio = $bm_div(length(valueAtTime(0), $bm_transform.anchorPoint), $bm_div(thisLayer.width, 2));\\n    distanceRatio = $bm_div($bm_sum(1, $bm_mul(distanceRatio, flexibility)), 2);\\n    if (doFollowThrough) {\\n        elasticity = $bm_div(elasticity, distanceRatio);\\n        damping = $bm_div(damping, distanceRatio);\\n    }\\n    if (doOverlap) {\\n        overlapDuration = $bm_mul(overlapDuration, distanceRatio);\\n    }\\n}\\nseedRandom(0, true);\\nif (doFollowThrough) {\\n    if (elasticityRandom > 0)\\n        elasticity = addNoise(elasticity, elasticityRandom);\\n    if (dampingRandom > 0)\\n        damping = addNoise(damping, dampingRandom);\\n}\\nif (doOverlap) {\\n    if (doOverlap && overlapRandom > 0)\\n        overlapDuration = addNoise(overlapDuration, overlapRandom);\\n}\\nvar result = value;\\nfunction isSpatial(prop) {\\n    if (!(prop.value instanceof Array))\\n        return false;\\n    if (prop.value.length != 2 && prop.value.length != 3)\\n        return false;\\n    try {\\n        if (typeof prop.speed !== \'undefined\')\\n            return true;\\n    } catch (e) {\\n        return false;\\n    }\\n}\\nfunction addNoise(val, quantity) {\\n    var randomValue = random(0.9, 1.1);\\n    var noiseValue = noise($bm_mul(valueAtTime(0), randomValue));\\n    noiseValue = $bm_mul(noiseValue, $bm_div(quantity, 100));\\n    return $bm_mul(val, $bm_sum(noiseValue, 1));\\n}\\nfunction isAfterLastKey() {\\n    if (numKeys == 0)\\n        return false;\\n    var nKey = nearestKey(time);\\n    return nKey.time <= time && nKey.index == numKeys;\\n}\\nfunction isStill(t, threshold) {\\n    var d = $bm_sub(valueAtTime(t), valueAtTime($bm_sum(t, framesToTime(1))));\\n    if ($bm_isInstanceOfArray(d)) {\\n        for (var i = 0; i < d.length; i++) {\\n            d[i] = Math.abs(d[i]);\\n            if (d[i] >= threshold) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    } else {\\n        d = Math.abs(d);\\n        return d < threshold;\\n    }\\n}\\nfunction bezierInterpolation(t, tMin, tMax, value1, value2, bezierPoints) {\\n    if (arguments.length !== 5 && arguments.length !== 6)\\n        return t;\\n    var a = $bm_sub(value2, value1);\\n    var b = $bm_sub(tMax, tMin);\\n    if (b == 0)\\n        return t;\\n    var c = clamp($bm_div($bm_sub(t, tMin), b), 0, 1);\\n    if (!(bezierPoints instanceof Array) || bezierPoints.length !== 4)\\n        bezierPoints = [\\n            0.33,\\n            0,\\n            0.66,\\n            1\\n        ];\\n    return $bm_sum($bm_mul(a, h(c, bezierPoints)), value1);\\n    function h(f, g) {\\n        var x = $bm_mul(3, g[0]);\\n        var j = $bm_sub($bm_mul(3, $bm_sub(g[2], g[0])), x);\\n        var k = $bm_sub($bm_sub(1, x), j);\\n        var l = $bm_mul(3, g[1]);\\n        var m = $bm_sub($bm_mul(3, $bm_sub(g[3], g[1])), l);\\n        var n = $bm_sub($bm_sub(1, l), m);\\n        var d = f;\\n        for (var i = 0; i < 5; i++) {\\n            var z = $bm_sub($bm_mul(d, $bm_sum(x, $bm_mul(d, $bm_sum(j, $bm_mul(d, k))))), f);\\n            if (Math.abs(z) < 0.001)\\n                break;\\n            d = $bm_sub(d, $bm_div(z, $bm_sum(x, $bm_mul(d, $bm_sum($bm_mul(2, j), $bm_mul($bm_mul(3, k), d))))));\\n        }\\n        return $bm_mul(d, $bm_sum(l, $bm_mul(d, $bm_sum(m, $bm_mul(d, n)))));\\n    }\\n}\\nfunction getPropWorldSpeed(t, prop) {\\n    return length(getPropWorldVelocity(t, prop));\\n}\\nfunction getPrevKey(t) {\\n    if (numKeys == 0)\\n        return null;\\n    var nKey = nearestKey(t);\\n    if (nKey.time <= t)\\n        return nKey;\\n    if (nKey.index > 1)\\n        return key($bm_sub(nKey.index, 1));\\n    return null;\\n}\\nfunction getNextKey(t) {\\n    if (numKeys == 0)\\n        return null;\\n    var nKey = nearestKey(t);\\n    if (nKey.time >= t)\\n        return nKey;\\n    if (nKey.index < numKeys)\\n        return key($bm_sum(nKey.index, 1));\\n    return null;\\n}\\nfunction getPropWorldVelocity(t, prop) {\\n    return $bm_mul($bm_sub(getPropWorldValue($bm_sum(t, 0.005), prop), getPropWorldValue($bm_sub(t, 0.005), prop)), 100);\\n}\\nfunction getLayerWorldPos(t, l) {\\n    return l.toWorld(l.anchorPoint, t);\\n}\\nfunction getPropWorldValue(t, prop) {\\n    if (isPosition(prop))\\n        return getLayerWorldPos(t, thisLayer);\\n    return thisLayer.toWorld(prop.valueAtTime(t), t);\\n}\\nfunction isPosition(prop) {\\n    return prop === $bm_transform.position;\\n}\\nfunction isKeyTop(k, axis) {\\n    var prevSpeed = velocityAtTime($bm_sub(k.time, threshold));\\n    var nextSpeed = velocityAtTime($bm_sum(k.time, threshold));\\n    if ($bm_isInstanceOfArray(value)) {\\n        prevSpeed = prevSpeed[axis];\\n        nextSpeed = nextSpeed[axis];\\n    }\\n    if (Math.abs(prevSpeed) < 0.01 || Math.abs(nextSpeed) < 0.01)\\n        return true;\\n    return $bm_mul(prevSpeed, nextSpeed) < 0;\\n}\\nfunction anticipate() {\\n    var anticipation = zeroValue;\\n    if (isAfterLastKey())\\n        return anticipation;\\n    if (numKeys < 2)\\n        return anticipation;\\n    var nextKey = getNextKey(time);\\n    var aKey = nextKey;\\n    if (!isStill(aKey.time - 0.1, 0.1)) {\\n        aKey = getPrevKey(time);\\n        if (!isStill(aKey.time - 0.1, 0.1))\\n            return anticipation;\\n    }\\n    if (aKey.index == numKeys)\\n        return anticipation;\\n    var anticipationMiddle = aKey.time;\\n    var anticipationStart = $bm_sub(anticipationMiddle, anticipationDuration);\\n    var anticipationEnd = key(aKey.index + 1).time;\\n    var startValue = anticipation;\\n    var midValue = $bm_mul($bm_sum($bm_neg(valueAtTime($bm_sum(anticipationMiddle, anticipationDuration))), aKey.value), anticipationQuantity);\\n    var endValue = anticipation;\\n    if (time < anticipationStart) {\\n        return anticipation;\\n    } else if (time < anticipationMiddle) {\\n        if ($bm_isInstanceOfArray(value)) {\\n            for (var i = 0; i < value.length; i++) {\\n                anticipation[i] = bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue[i], midValue[i], [\\n                    slowOut,\\n                    0,\\n                    slowIn,\\n                    1\\n                ]);\\n            }\\n            return anticipation;\\n        } else {\\n            return bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue, midValue, [\\n                slowOut,\\n                0,\\n                slowIn,\\n                1\\n            ]);\\n        }\\n    } else if (time <= anticipationEnd) {\\n        if ($bm_isInstanceOfArray(value)) {\\n            for (var i = 0; i < value.length; i++) {\\n                anticipation[i] = bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue[i], endValue[i], [\\n                    slowOut,\\n                    0,\\n                    slowIn,\\n                    1\\n                ]);\\n            }\\n            return anticipation;\\n        } else {\\n            return bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue, endValue, [\\n                slowOut,\\n                0,\\n                slowIn,\\n                1\\n            ]);\\n        }\\n    } else {\\n        return anticipation;\\n    }\\n}\\nfunction followThroughAtTime(t) {\\n    var fThrough = zeroValue;\\n    if (elasticity == 0)\\n        return fThrough;\\n    var propSpeed;\\n    if (!simulate) {\\n        if (numKeys < 2)\\n            return fThrough;\\n        if (nearestKey(t).index == 1)\\n            return fThrough;\\n        propSpeed = length(velocityAtTime(t));\\n        if (propSpeed >= threshold)\\n            return fThrough;\\n    } else {\\n        propSpeed = getPropWorldSpeed(t, thisProperty);\\n        if (propSpeed >= threshold)\\n            return fThrough;\\n    }\\n    var fThroughStart = 0;\\n    var fThroughTime = 0;\\n    if (simulate) {\\n        var speedI = getPropWorldSpeed(t, thisProperty);\\n        var i = t;\\n        while (speedI < threshold && i > 0) {\\n            i = $bm_sub(i, $bm_div(thisComp.frameDuration, moBlurPrecision));\\n            speedI = getPropWorldSpeed(i, thisProperty);\\n        }\\n        fThroughStart = i;\\n    } else {\\n        var fThroughKey = getPrevKey(t);\\n        fThroughStart = fThroughKey.time;\\n    }\\n    if (fThroughStart == 0)\\n        return fThrough;\\n    fThroughTime = $bm_sub(t, fThroughStart);\\n    if (simulate)\\n        fThrough = $bm_div(getPropWorldVelocity($bm_sub(fThroughStart, thisComp.frameDuration), thisProperty), 2);\\n    else\\n        fThrough = $bm_div(velocityAtTime($bm_sub(fThroughStart, thisComp.frameDuration)), 2);\\n    if (bounce) {\\n        var cycleDamp = Math.exp($bm_mul($bm_mul(fThroughTime, damping), 0.1));\\n        var damp = $bm_div(Math.exp($bm_mul(fThroughTime, damping)), $bm_div(elasticity, 2));\\n        var cycleDuration = $bm_div(1, $bm_mul(elasticity, 2));\\n        cycleDuration = Math.round(timeToFrames(cycleDuration));\\n        cycleDuration = framesToTime(cycleDuration);\\n        var midDuration = $bm_div(cycleDuration, 2);\\n        var maxValue = $bm_mul(fThrough, midDuration);\\n        var cycvarime = fThroughTime;\\n        var numEndCycles = 1;\\n        while (cycvarime > cycleDuration) {\\n            cycvarime = $bm_sub(cycvarime, cycleDuration);\\n            cycleDuration = $bm_div(cycleDuration, cycleDamp);\\n            cycleDuration = Math.round(timeToFrames(cycleDuration));\\n            if (cycleDuration < 2) {\\n                cycleDuration = 2;\\n                numEndCycles++;\\n            }\\n            cycleDuration = framesToTime(cycleDuration);\\n            midDuration = $bm_div(cycleDuration, 2);\\n            maxValue = $bm_div($bm_mul(fThrough, midDuration), damp);\\n            if (numEndCycles > 100 / damping && maxValue < threshold)\\n                return zeroValue;\\n        }\\n        if (cycvarime < midDuration)\\n            fThrough = bezierInterpolation(cycvarime, 0, midDuration, 0, maxValue, [\\n                0,\\n                0.1,\\n                slowIn,\\n                1\\n            ]);\\n        else\\n            fThrough = bezierInterpolation(cycvarime, midDuration, cycleDuration, maxValue, 0, [\\n                $bm_sub(1, slowIn),\\n                0,\\n                1,\\n                0.9\\n            ]);\\n    } else {\\n        var damp = Math.exp($bm_mul(fThroughTime, damping));\\n        var sinus = $bm_mul($bm_mul($bm_mul(elasticity, fThroughTime), 2), Math.PI);\\n        sinus = Math.sin(sinus);\\n        sinus = $bm_mul($bm_div(0.3, elasticity), sinus);\\n        sinus = $bm_div(sinus, damp);\\n        if (Math.abs(sinus) < $bm_div(threshold, 100))\\n            return 0;\\n        fThrough = $bm_mul(fThrough, sinus);\\n        if (threshold > 0) {\\n            fThrough = $bm_mul(fThrough, $bm_sub(1, $bm_div(propSpeed, threshold)));\\n        }\\n    }\\n    if (bounce) {\\n        var prevValue = valueAtTime($bm_sub(fThroughStart, thisComp.frameDuration));\\n        var startValue = valueAtTime(fThroughStart);\\n        if ($bm_isInstanceOfArray(value)) {\\n            for (var i = 0; i < prevValue.length; i++) {\\n                if (prevValue[i] > startValue[i])\\n                    fThrough[i] = Math.abs(fThrough[i]);\\n                if (prevValue[i] < startValue[i])\\n                    fThrough[i] = $bm_neg(Math.abs(fThrough[i]));\\n            }\\n        } else {\\n            if (prevValue > startValue)\\n                fThrough = Math.abs(fThrough);\\n            if (prevValue < startValue)\\n                fThrough = $bm_neg(Math.abs(fThrough));\\n        }\\n    }\\n    if (simulate) {\\n        if (!isThisPosition) {\\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer));\\n            fThrough = $bm_sub(thisLayer.fromWorld(fThrough), thisLayer.anchorPoint);\\n        } else if (thisLayer.hasParent) {\\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer.parent));\\n            fThrough = $bm_sub(thisLayer.parent.fromWorld(fThrough), thisLayer.parent.anchorPoint);\\n        }\\n    }\\n    return fThrough;\\n}\\nfunction followThrough() {\\n    var propSpeed = length(velocity);\\n    if (propSpeed < threshold)\\n        return followThroughAtTime($bm_sub(time, overlapDuration));\\n    var fThrough = zeroValue;\\n    var t = time;\\n    while (t > 0) {\\n        t = $bm_sub(t, thisComp.frameDuration);\\n        if (simulate)\\n            propSpeed = getPropWorldSpeed($bm_sub(t, overlapDuration), thisProperty);\\n        else\\n            propSpeed = length(velocityAtTime(t));\\n        if (propSpeed < threshold) {\\n            fThrough = followThroughAtTime($bm_sub(t, overlapDuration));\\n            break;\\n        }\\n    }\\n    return linear(time, t, $bm_sum(t, $bm_mul(anticipationDuration, 2)), fThrough, zeroValue);\\n}\\nfunction smartSmooth(axis) {\\n    var startKey = nearestKey(time);\\n    var endKey = startKey;\\n    if (time == startKey.time)\\n        return 0;\\n    if (time < startKey.time && startKey.index == 1)\\n        return 0;\\n    if (time > startKey.time && startKey.index == numKeys)\\n        return 0;\\n    if (time < startKey.time)\\n        startKey = key($bm_sub(startKey.index, 1));\\n    if (time > startKey.time)\\n        endKey = key($bm_sum(startKey.index, 1));\\n    var sI = 0.66;\\n    var sO = 0.33;\\n    var sIV = 1;\\n    var sOV = 0;\\n    var sVal = startKey.value;\\n    var eVal = endKey.value;\\n    if ($bm_isInstanceOfArray(value)) {\\n        sVal = sVal[axis];\\n        eVal = eVal[axis];\\n    }\\n    var sTime = startKey.time;\\n    var eTime = endKey.time;\\n    if (isKeyTop(startKey, axis))\\n        sO = slowOut;\\n    else {\\n        var prevKey = key($bm_sub(startKey.index, 1));\\n        var pVal = prevKey.value;\\n        if ($bm_isInstanceOfArray(value))\\n            pVal = pVal[axis];\\n        sOV = $bm_div($bm_sub(sVal, pVal), $bm_sub(eVal, pVal));\\n    }\\n    if (isKeyTop(endKey, axis)) {\\n        sI = slowIn;\\n        if (endKey.index != numKeys) {\\n            var nextKey = key($bm_sum(endKey.index, 1));\\n            var nVal = nextKey.value;\\n            if ($bm_isInstanceOfArray(value))\\n                nVal = nVal[axis];\\n            if (Math.abs(nVal - eVal) < 0.01 && doFollowThrough)\\n                sI = 1;\\n        }\\n    } else {\\n        var nextKey = key($bm_sum(endKey.index, 1));\\n        var nVal = nextKey.value;\\n        if ($bm_isInstanceOfArray(value))\\n            nVal = nVal[axis];\\n        sIV = $bm_div($bm_sub(eVal, sVal), $bm_sub(nVal, sVal));\\n    }\\n    if (endKey.index == numKeys && doFollowThrough) {\\n        sI = 1;\\n    }\\n    var val = value;\\n    if ($bm_isInstanceOfArray(value))\\n        val = val[axis];\\n    return $bm_sub(bezierInterpolation(time, sTime, eTime, sVal, eVal, [\\n        sO,\\n        sOV,\\n        sI,\\n        sIV\\n    ]), val);\\n}\\nfunction overlap() {\\n    var ol = zeroValue;\\n    if (isThisPosition && !hasParent)\\n        return zeroValue;\\n    ol = $bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisProperty), getPropWorldValue(time, thisProperty));\\n    var motionRatio = $bm_div($bm_div(length(zeroValue, ol), thisLayer.width), 2);\\n    if (isThisPosition) {\\n        var originalDistance = length(valueAtTime(0));\\n        motionRatio = $bm_div(length(zeroValue, ol), thisComp.width);\\n    }\\n    ol = $bm_sum(ol, getPropWorldValue(time, thisProperty));\\n    ol = $bm_sum(ol, $bm_mul($bm_mul($bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisLayer.anchorPoint), ol), motionRatio), flexibility));\\n    ol = thisLayer.fromWorld(ol);\\n    if (!isThisPosition)\\n        ol = $bm_sub(ol, value);\\n    else {\\n        ol = linear(flexibility, 0, 100, $bm_div(ol, 2), 0);\\n        var prevParentWorldPos = getLayerWorldPos($bm_sub(time, overlapDuration), parent);\\n        ol = $bm_sum(ol, $bm_mul($bm_mul($bm_mul(thisLayer.fromWorld(prevParentWorldPos), motionRatio), flexibility), 5));\\n    }\\n    return ol;\\n}\\nvar okToGo = false;\\nif (simulate && fx.enabled)\\n    okToGo = true;\\nelse if (numKeys > 1 && fx.enabled)\\n    okToGo = true;\\nif (okToGo) {\\n    var smartSmoothResult = zeroValue;\\n    if (doInterpolation) {\\n        if ($bm_isInstanceOfArray(value)) {\\n            if (value.length == 2)\\n                smartSmoothResult = [\\n                    smartSmooth(0),\\n                    smartSmooth(1)\\n                ];\\n            else if (value.length == 3)\\n                smartSmoothResult = [\\n                    smartSmooth(0),\\n                    smartSmooth(1),\\n                    smartSmooth(2)\\n                ];\\n            else if (value.length == 4)\\n                smartSmoothResult = [\\n                    smartSmooth(0),\\n                    smartSmooth(1),\\n                    smartSmooth(2),\\n                    smartSmooth(3)\\n                ];\\n        } else {\\n            smartSmoothResult = smartSmooth(0);\\n        }\\n    }\\n    if (doAnticipation)\\n        result = $bm_sum(result, anticipate());\\n    result = $bm_sum(result, smartSmoothResult);\\n    if (doFollowThrough)\\n        result = $bm_sum(result, followThrough());\\n    if (doOverlap)\\n        result = $bm_sum(result, overlap());\\n}\\n$bm_rt = result;"},"r":{"a":0,"k":0,"ix":6},"o":{"a":1,"k":[{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":21,"s":[20]},{"t":23.0771484375,"s":[0]}],"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":2,"cix":2,"bm":0,"ix":7,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":250,"st":0,"bm":0},{"ddd":0,"ind":2,"ty":4,"nm":"Layer 4","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":1,"k":[{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":0,"s":[180.681,245.867,0],"to":[-6.667,0,0],"ti":[6.667,0,0]},{"t":37,"s":[140.681,245.867,0]}],"ix":2,"l":2},"a":{"a":0,"k":[180.681,245.867,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0]],"o":[[0,0],[0,0]],"v":[[-32.996,0],[32.996,0]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.164705887437,0.192156866193,0.203921571374,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":1.482,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[180.681,245.974],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0]],"o":[[0,0],[0,0]],"v":[[-17.235,0],[17.235,0]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.164705887437,0.192156866193,0.203921571374,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":1.482,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[191.411,256.277],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":2,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0]],"o":[[0,0],[0,0]],"v":[[-17.235,0],[17.235,0]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.164705887437,0.192156866193,0.203921571374,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":1.482,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[180.873,235.458],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 3","np":2,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"tm","s":{"a":1,"k":[{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":0,"s":[100]},{"t":19,"s":[0]}],"ix":1},"e":{"a":1,"k":[{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":19,"s":[100]},{"t":37,"s":[0]}],"ix":2},"o":{"a":0,"k":0,"ix":3},"m":1,"ix":4,"nm":"Trim Paths 1","mn":"ADBE Vector Filter - Trim","hd":false}],"ip":0,"op":250,"st":0,"bm":0},{"ddd":0,"ind":3,"ty":4,"nm":"Layer 3","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[264.243,381.001,0],"ix":2,"l":2},"a":{"a":0,"k":[264.243,381.001,0],"ix":1,"l":2},"s":{"a":1,"k":[{"i":{"x":[0.667,0.667,0.667],"y":[1,1,1]},"o":{"x":[0.333,0.333,0.333],"y":[0,0,0]},"t":0,"s":[100,100,100]},{"i":{"x":[0.667,0.667,0.667],"y":[1,1,1]},"o":{"x":[0.333,0.333,0.333],"y":[0,0,0]},"t":7.2,"s":[100,98.291,100]},{"t":15,"s":[100,100,100]}],"ix":6,"l":2,"x":"var $bm_rt;\\n$bm_rt = loopOut();"}},"ao":0,"shapes":[{"ty":"gr","it":[{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,-5.799],[5.799,0],[0,5.799],[-5.799,0]],"o":[[0,5.799],[-5.799,0],[0,-5.799],[5.799,0]],"v":[[10.5,0],[0,10.5],[-10.5,0],[0,-10.5]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.992156863213,0.772549033165,0.156862750649,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[191.989,342.195],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[19.262,0],[0,-19.263],[-19.262,0],[0,19.262]],"o":[[-19.262,0],[0,19.262],[19.262,0],[0,-19.263]],"v":[[0,-34.933],[-34.933,0.001],[0,34.933],[34.933,0.001]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ind":1,"ty":"sh","ix":2,"ks":{"a":0,"k":{"i":[[21.491,0],[0,21.49],[-21.491,0],[0,-21.492]],"o":[[-21.491,0],[0,-21.492],[21.491,0],[0,21.49]],"v":[[0,38.975],[-38.975,0.001],[0,-38.975],[38.975,0.001]],"c":true},"ix":2},"nm":"Path 2","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.992156863213,0.772549033165,0.156862750649,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[191.989,342.026],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":1,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[0.674,36.954],[-0.674,36.954],[-0.674,-36.954],[0.674,-36.954]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.866666674614,0.89411765337,0.933333337307,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[192.084,342.534],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 3","np":1,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[36.954,0.674],[-36.954,0.674],[-36.954,-0.674],[36.954,-0.674]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.866666674614,0.89411765337,0.933333337307,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[191.989,342.026],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 4","np":1,"cix":2,"bm":0,"ix":4,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[-25.655,26.607],[-26.607,25.654],[25.655,-26.607],[26.607,-25.654]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.866666674614,0.89411765337,0.933333337307,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[191.989,342.026],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 5","np":1,"cix":2,"bm":0,"ix":5,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[25.655,26.607],[-26.607,-25.654],[-25.655,-26.607],[26.607,25.654]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.866666674614,0.89411765337,0.933333337307,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[191.989,342.026],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 6","np":1,"cix":2,"bm":0,"ix":6,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[191.989,342.026],"ix":2},"a":{"a":0,"k":[191.989,342.026],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 8","np":6,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,-5.799],[5.799,0],[0,5.799],[-5.799,0]],"o":[[0,5.799],[-5.799,0],[0,-5.799],[5.799,0]],"v":[[10.5,0],[0,10.5],[-10.5,0],[0,-10.5]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.992156863213,0.772549033165,0.156862750649,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[191.989,342.195],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[19.262,0],[0,-19.263],[-19.262,0],[0,19.262]],"o":[[-19.262,0],[0,19.262],[19.262,0],[0,-19.263]],"v":[[0,-34.933],[-34.933,0.001],[0,34.933],[34.933,0.001]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ind":1,"ty":"sh","ix":2,"ks":{"a":0,"k":{"i":[[21.491,0],[0,21.49],[-21.491,0],[0,-21.492]],"o":[[-21.491,0],[0,-21.492],[21.491,0],[0,21.49]],"v":[[0,38.975],[-38.975,0.001],[0,-38.975],[38.975,0.001]],"c":true},"ix":2},"nm":"Path 2","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.992156863213,0.772549033165,0.156862750649,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[191.989,342.026],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":1,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[0.674,36.954],[-0.674,36.954],[-0.674,-36.954],[0.674,-36.954]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.866666674614,0.89411765337,0.933333337307,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[192.084,342.534],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 3","np":1,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[36.954,0.674],[-36.954,0.674],[-36.954,-0.674],[36.954,-0.674]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.866666674614,0.89411765337,0.933333337307,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[191.989,342.026],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 4","np":1,"cix":2,"bm":0,"ix":4,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[-25.655,26.607],[-26.607,25.654],[25.655,-26.607],[26.607,-25.654]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.866666674614,0.89411765337,0.933333337307,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[191.989,342.026],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 5","np":1,"cix":2,"bm":0,"ix":5,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[25.655,26.607],[-26.607,-25.654],[-25.655,-26.607],[26.607,25.654]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.866666674614,0.89411765337,0.933333337307,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[191.989,342.026],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 6","np":1,"cix":2,"bm":0,"ix":6,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[191.989,342.026],"ix":2},"a":{"a":0,"k":[191.989,342.026],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 4","np":6,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[191.989,342.026],"ix":2},"a":{"a":0,"k":[191.989,342.026],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":-5400,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 8","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[1.34,-1.79]],"o":[[-2.192,-0.44],[0,0]],"v":[[2.97,-1.08],[-2.97,1.189]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.164705887437,0.192156866193,0.203921571374,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":1.482,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[312.01,249.461],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[1.34,-1.79]],"o":[[-2.192,-0.44],[0,0]],"v":[[2.97,-1.08],[-2.97,1.189]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.164705887437,0.192156866193,0.203921571374,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":1.482,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[309.516,244.794],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":2,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[-10.788,5.521],[-3.159,0.784],[-2.112,-2.477],[1.046,-2.702],[2.159,-1.933],[17.59,6.824]],"o":[[11.553,3.658],[2.897,-1.483],[3.159,-0.784],[1.88,2.205],[-1.046,2.702],[-14.056,12.586],[0,0]],"v":[[-27.261,-6.289],[11.812,-11.879],[20.658,-15.952],[29.669,-13.785],[30.635,-5.563],[25.386,1.263],[-31.288,13.544]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.164705887437,0.192156866193,0.203921571374,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":1.482,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[284.21,258.438],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 3","np":2,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[1.045,-2.699],[2.166,-1.919],[15.241,2.527],[-10.718,5.739],[-1.273,3.193],[2.109,2.128],[0.969,0.361],[-0.437,0.114],[-2.109,-2.471]],"o":[[-1.045,2.699],[-11.535,10.338],[11.896,-2.528],[3.022,-1.634],[1.083,-2.775],[-0.703,-0.703],[0.437,-0.133],[3.155,-0.779],[1.881,2.223]],"v":[[25.771,-5.759],[20.507,1.063],[-26.424,15.985],[11.462,0.835],[18.911,-5.968],[17.201,-14.292],[14.483,-15.774],[15.794,-16.154],[24.802,-13.988]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.866666674614,0.89411765337,0.933333337307,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[289.081,258.632],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 4","np":2,"cix":2,"bm":0,"ix":4,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[1.045,-2.699],[2.166,-1.919],[15.241,2.527],[3.155,1.216],[0,0],[-10.794,5.511],[-2.642,0.912],[-0.437,0.114],[-2.109,-2.471]],"o":[[-1.045,2.699],[-11.535,10.338],[-3.326,-0.551],[0,0],[11.554,3.649],[2.508,-1.273],[0.437,-0.133],[3.155,-0.779],[1.881,2.223]],"v":[[30.636,-5.759],[25.372,1.063],[-21.559,15.985],[-31.289,13.344],[-27.26,-6.477],[11.804,-12.068],[19.348,-15.774],[20.659,-16.154],[29.667,-13.988]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[1,1,1,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[284.216,258.632],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 5","np":2,"cix":2,"bm":0,"ix":5,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[284.216,258.632],"ix":2},"a":{"a":0,"k":[284.216,258.632],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":5,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[-9.895,13.567]],"o":[[0,0],[9.895,-13.567]],"v":[[-13.48,0.345],[13.48,-3.634]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.164705887437,0.192156866193,0.203921571374,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":1.482,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[276.137,214.742],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-0.47,0.174],[-0.447,0.021],[-0.183,-0.077],[0.379,-0.361],[1.096,-0.229],[-0.056,0.791],[-0.548,0.338]],"o":[[0.438,-0.162],[0.198,-0.009],[0.718,0.305],[-0.805,0.768],[-0.489,0.102],[0.051,-0.717],[0.405,-0.25]],"v":[[0.226,-1.302],[1.565,-1.596],[2.15,-1.518],[1.987,-0.084],[-0.96,1.52],[-2.512,0.967],[-1.101,-0.643]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[1,1,1,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[273.907,201.484],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":2,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-0.398,1.21],[-0.803,0.234],[-3.613,-1.024],[-0.355,-0.318],[0.789,-0.86],[2.746,2.503],[0.874,1.106]],"o":[[0.175,-0.531],[3.638,-1.061],[0.459,0.13],[1.082,0.97],[-1.802,1.965],[-1.039,-0.947],[-0.685,-0.867]],"v":[[-7.236,-2.85],[-5.719,-3.95],[5.488,-3.712],[6.772,-3.112],[6.302,0.169],[-2.662,3.854],[-5.6,0.826]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.164705887437,0.192156866193,0.203921571374,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[276.937,203.335],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 3","np":2,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0]],"o":[[0,0],[0,0]],"v":[[-0.47,-5.699],[0.47,5.699]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.164705887437,0.192156866193,0.203921571374,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":1.482,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[277.271,212.56],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 4","np":2,"cix":2,"bm":0,"ix":4,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[277.271,212.56],"ix":2},"a":{"a":0,"k":[277.271,212.56],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":4,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[-3.938,-1.182]],"o":[[3.13,-2.667],[0,0]],"v":[[-5.789,1.467],[5.789,-0.966]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.164705887437,0.192156866193,0.203921571374,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":1.482,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[293.177,191.313],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[-3.938,-1.182]],"o":[[3.13,-2.667],[0,0]],"v":[[-5.789,1.467],[5.789,-0.966]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.164705887437,0.192156866193,0.203921571374,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":1.482,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[258.443,189.591],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":2,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[258.443,189.591],"ix":2},"a":{"a":0,"k":[258.443,189.591],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0.214,-0.955],[0.644,0.175],[-0.214,0.955],[-0.647,-0.176]],"o":[[-0.214,0.955],[-0.647,-0.176],[0.214,-0.955],[0.644,0.175]],"v":[[1.171,0.318],[-0.386,1.73],[-1.171,-0.319],[0.389,-1.73]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[1,1,1,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":1,"k":[{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":0,"s":[0,0],"to":[-0.338,-0.06],"ti":[0.338,0.06]},{"i":{"x":0.667,"y":0.667},"o":{"x":0.333,"y":0.333},"t":4,"s":[-2.031,-0.361],"to":[0,0],"ti":[0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":19.026,"s":[-2.031,-0.361],"to":[0.338,0.06],"ti":[-0.338,-0.06]},{"t":23.0263671875,"s":[0,0]}],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[260.605,194.51],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":1,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0.618,-2.782],[1.87,0.51],[0.135,0.073],[0.357,0.721],[-0.35,1.561],[-1.887,-0.512]],"o":[[-0.626,2.773],[-0.146,-0.038],[-0.627,-0.298],[-0.549,-1.128],[0.626,-2.78],[1.87,0.51]],"v":[[3.41,0.929],[-1.119,5.034],[-1.545,4.871],[-3.035,3.299],[-3.409,-0.924],[1.138,-5.033]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.164705887437,0.192156866193,0.203921571374,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[259.637,193.191],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":1,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[259.637,193.191],"ix":2},"a":{"a":0,"k":[259.637,193.191],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0.214,-0.955],[0.644,0.175],[-0.214,0.955],[-0.647,-0.176]],"o":[[-0.214,0.955],[-0.647,-0.176],[0.214,-0.955],[0.644,0.175]],"v":[[1.171,0.318],[-0.386,1.73],[-1.171,-0.319],[0.389,-1.73]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[1,1,1,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":1,"k":[{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":0,"s":[0,0],"to":[-0.338,-0.06],"ti":[0.338,0.06]},{"i":{"x":0.667,"y":0.667},"o":{"x":0.333,"y":0.333},"t":4,"s":[-2.031,-0.361],"to":[0,0],"ti":[0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":19.026,"s":[-2.031,-0.361],"to":[0.338,0.06],"ti":[-0.338,-0.06]},{"t":23.0263671875,"s":[0,0]}],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[295.278,195.892],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":1,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0.618,-2.782],[1.87,0.51],[0.135,0.073],[0.357,0.721],[-0.35,1.561],[-1.887,-0.512]],"o":[[-0.626,2.773],[-0.146,-0.038],[-0.627,-0.298],[-0.549,-1.128],[0.626,-2.78],[1.87,0.51]],"v":[[3.41,0.929],[-1.119,5.034],[-1.545,4.871],[-3.035,3.299],[-3.409,-0.924],[1.138,-5.033]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.164705887437,0.192156866193,0.203921571374,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[294.501,194.484],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":1,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[294.501,194.484],"ix":2},"a":{"a":0,"k":[294.501,194.484],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":2,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[276.977,194.889],"ix":2},"a":{"a":0,"k":[276.977,194.889],"ix":1},"s":{"a":1,"k":[{"i":{"x":[0.667,0.667],"y":[1,1]},"o":{"x":[0.333,0.333],"y":[0,0]},"t":9,"s":[100,100]},{"i":{"x":[0.667,0.667],"y":[1,1]},"o":{"x":[0.333,0.333],"y":[0,0]},"t":11,"s":[100,11.611]},{"i":{"x":[0.667,0.667],"y":[1,1]},"o":{"x":[0.333,0.333],"y":[0,0]},"t":13,"s":[100,100]},{"i":{"x":[0.667,0.667],"y":[1,1]},"o":{"x":[0.333,0.333],"y":[0,0]},"t":29,"s":[100,100]},{"i":{"x":[0.667,0.667],"y":[1,1]},"o":{"x":[0.333,0.333],"y":[0,0]},"t":31,"s":[100,11.611]},{"t":33,"s":[100,100]}],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":2,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[294.501,194.484],"ix":2},"a":{"a":0,"k":[294.501,194.484],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":2,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":1,"k":[{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":0,"s":[283.501,202.234],"to":[-2.787,1.266],"ti":[2.787,-1.266]},{"i":{"x":0.667,"y":0.667},"o":{"x":0.333,"y":0.333},"t":4,"s":[266.78,209.832],"to":[0,0],"ti":[0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":19,"s":[266.78,209.832],"to":[2.787,-1.266],"ti":[-2.787,1.266]},{"t":23.0263671875,"s":[283.501,202.234]}],"ix":2},"a":{"a":0,"k":[276.501,204.234],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[-0.208,2.454],[-2.222,0.85],[-2.114,-1.797]],"o":[[-0.979,-2.277],[0.208,-2.454],[2.514,-0.962],[0,0]],"v":[[-4.105,6.634],[-5.635,-0.558],[-1.847,-6.302],[5.669,-4.206]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.164705887437,0.192156866193,0.203921571374,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":1.482,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[226.719,167.571],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-1.41,-1.277],[-0.584,-0.136],[-0.307,0.519],[0.055,0.445],[-0.36,2.089],[-0.209,0.174],[-0.38,-0.092],[-0.866,-0.37],[-0.342,0.528],[0.011,0.93],[-0.364,0.87],[0.634,0.522],[1.62,0.63],[1.53,-0.764],[0.249,-1.898],[-0.463,-1.901]],"o":[[0.453,0.41],[0.584,0.136],[0.223,-0.378],[-0.264,-2.12],[0.047,-0.276],[0.299,-0.248],[0.909,0.219],[0.58,0.248],[0.495,-0.764],[0.737,-0.561],[0.315,-0.753],[-1.359,-1.119],[-1.62,-0.63],[-1.608,0.804],[-0.262,1.998],[0.458,1.879]],"v":[[-2.591,7.73],[-1.051,8.662],[0.519,8.103],[0.678,6.801],[-0.387,0.527],[-0.045,-0.211],[1.074,-0.301],[3.742,0.585],[5.457,0.53],[4.689,-2.027],[7.07,-3.282],[6.053,-5.351],[1.652,-8.182],[-3.357,-8.182],[-7.109,-3.287],[-5.795,2.755]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.866666674614,0.89411765337,0.933333337307,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[228.164,169.903],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":2,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[1.572,-4.279],[1.542,4.233],[-10.096,3.696],[-4.384,-7.49]],"o":[[-2.462,3.839],[-3.388,-2.334],[-3.834,-10.527],[7.435,-2.722],[0,0]],"v":[[-1.948,5.586],[-8.979,18.219],[-16.571,8.395],[-5.238,-17.371],[17.851,-8.543]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.164705887437,0.192156866193,0.203921571374,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":1.482,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[232.646,173.11],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 3","np":2,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-1.171,1.907],[0.024,-0.314],[0,0],[1.569,-4.273],[1.545,4.237],[-2.221,4.756],[-1.147,-3.73],[-2.197,-0.748],[-1.497,0.628]],"o":[[-0.012,0.314],[0,0],[-2.463,3.839],[-3.38,-2.33],[-1.98,-5.432],[-0.676,3.863],[0.676,2.209],[1.533,0.531],[2.052,-0.881]],"v":[[8.051,-0.833],[7.991,0.121],[7.858,0.229],[0.821,12.856],[-6.772,3.03],[-6.132,-12.856],[-5.891,-1.304],[-1.678,3.887],[3.054,3.489]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.866666674614,0.89411765337,0.933333337307,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[222.843,178.471],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 4","np":2,"cix":2,"bm":0,"ix":4,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-4.382,-7.496],[0,0],[0,0],[1.569,-4.273],[1.545,4.237],[-2.221,4.756],[0,0],[-4.877,1.787]],"o":[[0,0],[0,0],[-2.463,3.839],[-3.38,-2.33],[-1.98,-5.432],[0,-0.012],[2.1,-4.454],[7.436,-2.728]],"v":[[17.85,-8.539],[-1.807,5.484],[-1.94,5.592],[-8.978,18.219],[-16.571,8.393],[-15.931,-7.493],[-15.919,-7.505],[-5.236,-17.367]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[1,1,1,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[232.642,173.108],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 5","np":2,"cix":2,"bm":0,"ix":5,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[232.642,173.108],"ix":2},"a":{"a":0,"k":[232.642,173.108],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":5,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[-0.017,2.462],[2.135,1.05],[2.27,-1.595]],"o":[[1.184,-2.178],[0.017,-2.462],[-2.416,-1.188],[0,0]],"v":[[3.278,6.806],[5.461,-0.215],[2.216,-6.282],[-5.461,-4.884]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.164705887437,0.192156866193,0.203921571374,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":1.482,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[308.706,171.159],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[1.521,-1.142],[0.594,-0.082],[0.258,0.545],[-0.096,0.438],[0.166,2.113],[0.193,0.193],[0.387,-0.057],[0.896,-0.289],[0.292,0.557],[-0.096,0.925],[0.282,0.9],[-0.679,0.462],[-1.671,0.479],[-1.453,-0.901],[-0.074,-1.913],[0.635,-1.85]],"o":[[-0.489,0.367],[-0.594,0.082],[-0.188,-0.396],[0.457,-2.087],[-0.022,-0.279],[-0.275,-0.275],[-0.926,0.135],[-0.601,0.194],[-0.423,-0.806],[-0.682,-0.626],[-0.244,-0.778],[1.456,-0.99],[1.671,-0.479],[1.528,0.948],[0.078,2.014],[-0.628,1.829]],"v":[[1.572,7.868],[-0.046,8.655],[-1.559,7.954],[-1.598,6.643],[0.038,0.493],[-0.235,-0.273],[-1.341,-0.466],[-4.079,0.172],[-5.782,-0.04],[-4.782,-2.515],[-7.038,-3.984],[-5.836,-5.95],[-1.194,-8.366],[3.794,-7.907],[7.081,-2.689],[5.219,3.208]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.866666674614,0.89411765337,0.933333337307,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[307.151,173.239],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":2,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[-7.146,-3.392],[0.857,-8.208],[1.05,-2.209],[3.585,-2.016],[2.1,4.056]],"o":[[5.058,-7.062],[7.593,3.609],[-0.241,2.293],[-1.931,4.068],[-1.183,-4.406],[0,0]],"v":[[-17.192,-10.697],[6.241,-17.179],[17.08,2.727],[15.173,9.523],[6.711,18.612],[0.869,5.382]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.164705887437,0.192156866193,0.203921571374,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":1.482,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[302.658,176.311],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 3","np":2,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0.628,-5.951],[1.05,-2.209],[3.138,-1.98],[0,0],[0.205,-0.133],[0.133,-0.072],[0.121,0.338],[0,0.012],[0.435,0.99],[0.229,0.495],[0.241,0.483],[0.217,0.422],[0.133,0.241],[0.157,0.314],[0.024,0.036],[0.012,0.012],[0.169,0.531],[-0.181,0.072],[-0.217,-0.326],[-0.616,-0.881],[-1.159,-0.374],[-1.316,1.762],[-0.205,2.511],[0.241,1.69],[0.809,2.076],[0.543,1.328]],"o":[[-0.241,2.293],[-1.75,3.694],[0,0],[-0.205,0.109],[-0.121,0.085],[0.097,-0.048],[0,-0.024],[-0.362,-1.038],[-0.217,-0.507],[-0.229,-0.495],[-0.205,-0.422],[-0.121,-0.241],[-0.157,-0.314],[-0.012,-0.024],[-0.012,-0.012],[-0.193,-0.338],[-0.109,-0.302],[0.579,-0.254],[0.628,0.881],[0.7,1.002],[2.281,0.748],[1.533,-2.052],[0.145,-1.762],[-0.302,-2.221],[-0.519,-1.352],[4.044,4.165]],"v":[[7.962,0.06],[6.055,6.856],[-1.418,15.342],[-1.43,15.342],[-2.021,15.705],[-2.407,15.946],[-3.035,13.918],[-3.047,13.87],[-4.254,10.828],[-4.918,9.331],[-5.63,7.858],[-6.258,6.591],[-6.62,5.879],[-7.091,4.937],[-7.139,4.853],[-7.175,4.804],[-7.996,3.211],[-7.936,2.583],[-6.306,4.309],[-4.447,6.965],[-1.804,9.403],[3.894,6.929],[6.248,-0.157],[6.103,-5.444],[4.159,-11.914],[2.554,-15.946]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.866666674614,0.89411765337,0.933333337307,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[311.777,178.978],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 4","np":2,"cix":2,"bm":0,"ix":4,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0.628,-5.951],[1.05,-2.209],[3.138,-1.98],[0,0],[0.205,-0.097],[0.133,-0.072],[0.241,0.688],[0,0.012],[0.435,0.99],[0.229,0.495],[0.241,0.483],[0.217,0.422],[0.133,0.241],[0.169,0.338],[0.012,0.012],[0.278,0.519],[0.085,0.169],[0,0],[-7.146,-3.392],[-1.521,-1.581]],"o":[[-0.241,2.293],[-1.75,3.694],[0,0],[-0.193,0.145],[-0.121,0.085],[-0.181,-0.664],[0,-0.024],[-0.362,-1.038],[-0.217,-0.507],[-0.229,-0.495],[-0.205,-0.422],[-0.121,-0.241],[-0.169,-0.35],[-0.012,-0.012],[-0.266,-0.543],[-0.085,-0.169],[0,0],[5.058,-7.062],[2.088,0.99],[4.044,4.165]],"v":[[17.08,2.727],[15.172,9.523],[7.7,18.009],[7.688,18.009],[7.097,18.371],[6.71,18.612],[6.083,16.584],[6.071,16.536],[4.864,13.494],[4.2,11.997],[3.487,10.525],[2.86,9.257],[2.498,8.545],[1.979,7.519],[1.942,7.471],[1.121,5.877],[0.868,5.382],[-17.193,-10.697],[6.24,-17.179],[11.672,-13.28]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[1,1,1,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[302.659,176.311],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 5","np":2,"cix":2,"bm":0,"ix":5,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[302.659,176.311],"ix":2},"a":{"a":0,"k":[302.659,176.311],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":5,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[302.659,176.311],"ix":2},"a":{"a":0,"k":[302.659,176.311],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":2,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[-3.204,2.342],[-2.311,3.296],[2.507,-3.146],[-4.368,2.745],[2.654,-3.912]],"o":[[3.682,-1.479],[3.25,-2.376],[-0.784,3.945],[5.119,-0.637],[-2.654,3.912],[0,0]],"v":[[-14.211,5.577],[-4.031,-0.534],[4.78,-8.711],[-0.252,2.131],[14.211,-3.024],[6.248,8.711]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.164705887437,0.192156866193,0.203921571374,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":1.482,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[269.404,155.655],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0.437,-0.777],[1.137,-1.781],[1.243,-0.874],[-1.815,0.296],[-2.238,1.169],[-0.338,0.216],[-0.318,0.107],[0.116,-0.167],[0.192,-0.289],[0.359,-0.593],[0.62,-1.24],[0.055,-0.112],[-1.52,2.118],[-0.435,0.606],[-0.844,1.176],[0.052,-0.016],[0.13,-0.069],[0.282,-0.114],[0.291,-0.13],[0.375,-0.178],[1.075,-0.445],[2.342,-0.24],[0.263,-0.016],[-0.514,0.694],[-0.263,0.417],[-0.204,0.451],[-0.325,0.832],[-0.03,0.746],[0.065,0.015],[0.032,-0.019],[0.39,-0.168],[0.162,-0.339]],"o":[[-1.036,1.841],[-0.818,1.281],[1.823,0.238],[2.476,-0.403],[0.355,-0.186],[0.294,-0.188],[0.044,0.218],[-0.197,0.285],[-0.383,0.578],[-0.719,1.185],[-0.056,0.112],[1.847,-1.839],[0.435,-0.606],[0.844,-1.176],[-0.014,0.02],[-0.142,0.042],[-0.268,0.143],[-0.292,0.118],[-0.379,0.169],[-1.051,0.498],[-2.158,0.893],[-0.262,0.027],[0.394,-0.769],[0.294,-0.396],[0.264,-0.418],[0.368,-0.814],[0.271,-0.695],[0.003,-0.066],[-0.036,-0.008],[-0.367,0.213],[-0.349,0.15],[-0.381,0.798]],"v":[[-3.409,-4.508],[-6.619,0.957],[-9.577,4.389],[-4.087,4.121],[3.123,1.97],[4.164,1.368],[5.123,0.709],[4.718,1.408],[4.134,2.269],[3.02,4.025],[1.01,7.664],[0.844,8],[5.741,1.914],[7.045,0.097],[9.577,-3.431],[9.178,-3.377],[8.772,-3.2],[7.971,-2.765],[7.103,-2.428],[5.972,-1.905],[2.802,-0.445],[-3.877,1.445],[-4.666,1.509],[-3.301,-0.69],[-2.432,-1.886],[-1.754,-3.204],[-0.714,-5.674],[-0.154,-7.831],[-0.229,-7.998],[-0.334,-7.968],[-1.471,-7.396],[-2.268,-6.883]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.866666674614,0.89411765337,0.933333337307,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[274.487,155.852],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":2,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-4.374,2.749],[2.545,-3.778],[0.085,-0.136],[0,0],[0,0],[0,0],[-3.198,2.342],[-2.217,2.817],[-0.242,0.349],[2.505,-3.138]],"o":[[-2.559,3.779],[-0.1,0.137],[0,0],[0,0],[0,0],[3.67,-1.48],[2.922,-2.125],[0.272,-0.32],[-0.786,3.947],[5.123,-0.632]],"v":[[14.209,-3.03],[6.531,8.306],[6.247,8.716],[6.022,8.678],[5.47,8.591],[-14.209,5.582],[-4.038,-0.54],[4.005,-7.711],[4.777,-8.716],[-0.256,2.123]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[1,1,1,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[269.409,155.656],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 3","np":2,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-0.281,-16.702],[16.965,-6.177],[0.213,-0.075],[4.907,-0.083],[0.608,0.017],[4.435,1.606],[0.288,0.111],[0.301,17.895],[-22.659,0.381],[-5.654,-2.345]],"o":[[0.314,18.69],[-0.195,0.075],[-4.382,1.522],[-0.617,0.01],[-4.955,-0.113],[-0.288,-0.102],[-16.046,-6.177],[-0.386,-22.944],[6.118,-0.103],[15.257,6.329]],"v":[[43.937,-0.739],[15.326,40.236],[14.722,40.46],[0.726,42.931],[-1.107,42.926],[-15.26,40.285],[-16.124,39.96],[-43.938,0.738],[-0.718,-42.932],[17.177,-39.547]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.164705887437,0.192156866193,0.203921571374,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":1.482,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[266,202.133],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 4","np":2,"cix":2,"bm":0,"ix":4,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0.018,-0.146],[17.571,-3.647],[0.211,-0.036],[0,0],[4.858,0.581],[0.599,0.098],[4.169,2.139],[0.27,0.146],[-2.06,17.221],[-0.951,2.696],[-14.909,-8.022],[-0.271,-0.137],[-4.88,-0.776],[-0.611,-0.073],[-4.529,0.872],[0,0],[-0.203,0.045],[-4.843,13.773]],"o":[[-2.152,17.987],[-0.203,0.045],[0,0],[-4.529,0.872],[-0.611,-0.073],[-4.88,-0.776],[-0.271,-0.137],[-15.036,-8.09],[0.352,-2.942],[-1.852,17.054],[0.27,0.146],[4.169,2.139],[0.599,0.098],[4.858,0.581],[0,0],[0.211,-0.036],[14.69,-3.05],[-0.009,0.147]],"v":[[43.617,-8.777],[9.958,26.712],[9.341,26.839],[9.331,26.846],[-4.819,27.334],[-6.629,27.083],[-20.262,22.642],[-21.072,22.214],[-43.378,-19.185],[-41.403,-27.665],[-19.052,13.286],[-18.242,13.714],[-4.609,18.155],[-2.8,18.406],[11.351,17.918],[11.361,17.91],[11.977,17.783],[43.662,-9.225]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.866666674614,0.89411765337,0.933333337307,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[265.425,216.843],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 5","np":2,"cix":2,"bm":0,"ix":5,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-0.281,-16.702],[16.965,-6.177],[0.213,-0.075],[4.907,-0.083],[0.608,0.017],[4.435,1.606],[0.288,0.111],[0.301,17.895],[-22.659,0.381],[-5.654,-2.345]],"o":[[0.314,18.69],[-0.195,0.075],[-4.382,1.522],[-0.617,0.01],[-4.955,-0.113],[-0.288,-0.102],[-16.046,-6.177],[-0.386,-22.944],[6.118,-0.103],[15.257,6.329]],"v":[[43.937,-0.739],[15.326,40.236],[14.722,40.46],[0.726,42.931],[-1.107,42.926],[-15.26,40.285],[-16.124,39.96],[-43.938,0.738],[-0.718,-42.932],[17.177,-39.547]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[1,1,1,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[266,202.133],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 6","np":2,"cix":2,"bm":0,"ix":6,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[266,202.133],"ix":2},"a":{"a":0,"k":[266,202.133],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 3","np":6,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":1,"k":[{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":25,"s":[267.5,244.633],"to":[0,-1.167],"ti":[0,1.167]},{"i":{"x":0.667,"y":0.667},"o":{"x":0.333,"y":0.333},"t":28.667,"s":[267.5,237.633],"to":[0,0],"ti":[0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":32.333,"s":[267.5,237.633],"to":[0,1.167],"ti":[0,-1.167]},{"t":36,"s":[267.5,244.633]}],"ix":2},"a":{"a":0,"k":[267.5,244.633],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":1,"k":[{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":0,"s":[0]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":5.5,"s":[5]},{"t":11.25,"s":[0]}],"ix":6,"x":"var $bm_rt;\\n$bm_rt = loopOut();"},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":3,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[1.803,-0.485]],"o":[[-1.023,-1.562],[0,0]],"v":[[2.449,1.004],[-2.449,-0.862]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.164705887437,0.192156866193,0.203921571374,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":1.482,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[293.759,335.332],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[2.872,-0.736]],"o":[[-1.499,-2.558],[0,0]],"v":[[3.826,1.694],[-3.826,-1.495]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.164705887437,0.192156866193,0.203921571374,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":1.482,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[294.385,329.42],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":2,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0.074,-0.115],[2.589,-7.819],[-3.04,-9.496],[-7.845,-2.068],[-2.569,-0.215],[-3.644,-1.986],[0.972,-8.69],[0,0],[-0.9,-2.033],[-1.032,-0.705],[0.042,0.122],[0.209,5.34],[6.518,3.82],[6.062,3.44],[1.938,6.993],[-1.615,7.069],[-4.751,1.691],[-2.166,4.314],[3.611,2.451],[0,0]],"o":[[-5.34,8.24],[-2.104,6.361],[2.786,8.705],[2.468,0.65],[4.026,0.338],[8.383,4.569],[0,0],[-0.275,2.335],[0.521,1.176],[-0.044,-0.122],[-1.71,-5.036],[-0.304,-7.526],[-6.005,-3.516],[-6.309,-3.573],[-1.919,-6.993],[1.121,-4.903],[3.972,-1.425],[1.748,-3.478],[0,0],[-0.006,0.127]],"v":[[-3.668,-59.516],[-22.648,-21.316],[-23.584,4.116],[-6.349,21.581],[1.346,22.669],[13.179,25.342],[22.54,49.517],[22.447,50.321],[22.787,57.102],[25.179,59.885],[25.039,59.515],[24.754,43.628],[13.58,25.023],[-5.842,17.441],[-18.461,0.413],[-18.404,-21.137],[-10.27,-33.071],[6.719,-34.516],[11.019,-52.521],[-3.562,-59.885]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.866666674614,0.89411765337,0.933333337307,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[247.424,276.56],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 3","np":1,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[2.759,-8.336],[-2.677,-8.363],[-8.491,-2.238],[-5.804,-3.164],[0.987,-8.832],[-1.09,-2.461],[-4.817,-0.326],[-2.883,0.721],[-1.126,2.75],[1.805,2.485],[2.73,1.406],[19.028,23.756],[-0.979,2.079],[6.46,13.077]],"o":[[-4.776,7.369],[-2.759,8.336],[2.677,8.363],[6.392,1.685],[7.803,4.253],[-0.299,2.675],[1.955,4.415],[2.965,0.201],[2.883,-0.721],[1.164,-2.842],[-1.805,-2.485],[6.448,-9.15],[-1.437,-1.794],[6.212,-13.196],[0,0]],"v":[[-16.739,-61.59],[-35.8,-23.221],[-36.74,2.67],[-18.987,20.625],[0.376,24.32],[9.354,47.763],[9.659,55.729],[22.17,61.405],[31.04,61.081],[37.823,55.81],[36.362,47.112],[29.169,41.493],[24.983,5.105],[26.649,-1.45],[21.698,-44.126]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.164705887437,0.192156866193,0.203921571374,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":1.482,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"fl","c":{"a":0,"k":[1,1,1,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[259.873,278.232],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 4","np":3,"cix":2,"bm":0,"ix":4,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[242.873,297.232],"ix":2},"a":{"a":0,"k":[242.873,297.232],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 3","np":4,"cix":2,"bm":0,"ix":4,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[-0.708,-7.025]],"o":[[6.384,3.016],[0,0]],"v":[[-5.844,-8.273],[5.844,8.273]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.874509811401,0.898039221764,0.929411768913,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":1.482,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[328.356,267.139],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[-2.983,-2.987],[0.306,-4.21]],"o":[[3.971,1.432],[2.983,2.987],[0,0]],"v":[[-7.772,-8.856],[3.058,-2.494],[7.741,8.856]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.874509811401,0.898039221764,0.929411768913,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":1.482,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[333.219,262.266],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":2,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[-0.604,6.922]],"o":[[6.286,-2.959],[0,0]],"v":[[-5.694,8.166],[5.694,-8.166]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.874509811401,0.898039221764,0.929411768913,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":1.482,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[334.345,265.634],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 3","np":2,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[-1.092,4.58]],"o":[[4.33,-1.851],[0,0]],"v":[[-4.389,5.206],[4.389,-5.206]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.874509811401,0.898039221764,0.929411768913,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":1.482,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[328.669,257.865],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 4","np":2,"cix":2,"bm":0,"ix":4,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[-7.704,2.606],[-1.517,-0.548],[-0.733,-1.969],[0,0],[0.923,-1.799],[1.203,-0.797],[11.845,-1.453]],"o":[[6.747,-4.54],[1.528,-0.517],[1.977,0.714],[2.355,6.323],[0.706,1.895],[-0.659,1.284],[-7.515,4.98],[0,0]],"v":[[-18.12,-9.729],[2.729,-19.878],[7.45,-20.323],[11.152,-15.478],[17.381,3.7],[17.592,9.584],[14.489,12.534],[-10.877,20.566]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.164705887437,0.192156866193,0.203921571374,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":1.482,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[333.223,264.847],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 5","np":2,"cix":2,"bm":0,"ix":5,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[333.223,264.847],"ix":2},"a":{"a":0,"k":[333.223,264.847],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 5","np":5,"cix":2,"bm":0,"ix":5,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[1.159,-2.851],[2.889,-0.722],[2.965,0.209],[0.874,0.114],[-2.299,0.95],[-0.855,4.295],[0.209,1.178],[-0.266,-0.38]],"o":[[-1.121,2.756],[-2.889,0.722],[-0.855,-0.057],[2.299,-0.912],[4.048,-1.691],[0.247,-1.254],[0.304,0.342],[1.805,2.49]],"v":[[8.862,1.996],[2.078,7.26],[-6.797,7.583],[-9.4,7.336],[-2.388,4.732],[6.544,-4.162],[6.525,-7.772],[7.399,-6.708]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.866666674614,0.89411765337,0.933333337307,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[288.838,332.046],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[2.226,-1.042],[-0.247,-2.445],[-4.022,0.184],[-3.431,2.108]],"o":[[-1.72,-1.756],[-2.226,1.042],[0.405,4.006],[4.022,-0.184],[0,0]],"v":[[0.251,-4.714],[-6.553,-5.945],[-9.966,0.069],[-1.085,6.471],[9.994,2.009]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.164705887437,0.192156866193,0.203921571374,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":1.482,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[225.732,290.878],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":2,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[4.029,-0.19],[1.748,1.653],[-1.197,0.418],[-0.418,2.09],[0.608,1.102],[-0.323,-0.342]],"o":[[-3.44,2.109],[-2.47,0.114],[0.931,-0.76],[2.015,-0.703],[0.247,-1.235],[0.399,0.228],[0,0]],"v":[[8.97,1.544],[-2.109,6.01],[-8.97,3.54],[-5.397,2.19],[-1.292,-2.352],[-1.881,-6.019],[-0.779,-5.164]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.866666674614,0.89411765337,0.933333337307,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[226.759,291.336],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 3","np":2,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[4.029,-0.19],[1.748,1.653],[0.152,1.558],[-2.223,1.045],[-1.672,-1.045],[-0.323,-0.342]],"o":[[-3.44,2.109],[-2.47,0.114],[-1.102,-1.045],[-0.247,-2.432],[1.805,-0.855],[0.399,0.228],[0,0]],"v":[[9.991,2.003],[-1.088,6.469],[-7.949,3.999],[-9.963,0.065],[-6.562,-5.94],[-0.86,-5.56],[0.242,-4.705]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[1,1,1,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[225.738,290.876],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 4","np":2,"cix":2,"bm":0,"ix":4,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[225.738,290.876],"ix":2},"a":{"a":0,"k":[225.738,290.876],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":4,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,-4.544],[4.544,0],[0,4.544],[-4.544,0]],"o":[[0,4.544],[-4.544,0],[0,-4.544],[4.544,0]],"v":[[8.227,0],[0,8.227],[-8.227,0],[0,-8.227]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.439215689898,0.352941185236,0.800000011921,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[262.881,347.065],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":2,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0]],"o":[[0,0],[0,0]],"v":[[-13.561,4.113],[13.561,-4.113]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.549019634724,0.443137258291,0.870588243008,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":4,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[276.443,342.951],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 3","np":2,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,-9.268],[9.287,0],[2.519,6.099],[0,0],[0,2.282],[-2.893,3.01],[-4.761,0]],"o":[[0,9.287],[-7.005,0],[0,0],[-0.807,-1.987],[0,-4.506],[3.069,-3.207],[9.287,0]],"v":[[16.813,-0.01],[-0.01,16.813],[-15.534,6.424],[-15.554,6.424],[-16.813,-0.01],[-12.15,-11.619],[-0.01,-16.813]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.164705887437,0.192156866193,0.203921571374,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":1.482,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[262.882,347.065],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 4","np":2,"cix":2,"bm":0,"ix":4,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,-4.506],[-0.807,-1.987],[18.082,2.951],[1.791,1.122],[-0.492,1.673],[0,0],[-2.243,0.984],[-2.519,0.138],[-15.465,-0.925],[-2.676,-0.511]],"o":[[0,2.282],[-18.338,-0.728],[-2.204,-0.354],[-1.259,-0.826],[0,0],[-0.433,-2.066],[2.243,-0.984],[15.465,-0.866],[2.696,0.158],[-2.893,3.01]],"v":[[28.274,3.249],[29.534,9.683],[-25.087,3.052],[-31.383,1.182],[-32.308,-3.383],[-32.879,-3.481],[-29.061,-7.18],[-21.683,-8.479],[24.772,-9.285],[32.938,-8.361]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.164705887437,0.192156866193,0.203921571374,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":1.482,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[217.794,343.807],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 5","np":2,"cix":2,"bm":0,"ix":5,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,-9.286],[9.286,0],[0,9.286],[-9.286,0]],"o":[[0,9.286],[-9.286,0],[0,-9.286],[9.286,0]],"v":[[16.813,0],[0,16.813],[-16.813,0],[0,-16.813]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.549019634724,0.443137258291,0.870588243008,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[262.881,347.065],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 6","np":2,"cix":2,"bm":0,"ix":6,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,-2.419],[12.612,0],[0,2.419],[-12.612,0]],"o":[[0,2.419],[-12.612,0],[0,-2.419],[12.612,0]],"v":[[22.836,0],[0,4.38],[-22.836,0],[0,-4.38]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.164705887437,0.192156866193,0.203921571374,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":1.482,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[244.487,298.839],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 7","np":2,"cix":2,"bm":0,"ix":7,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,-2.419],[12.612,0],[0,2.419],[-12.612,0]],"o":[[0,2.419],[-12.612,0],[0,-2.419],[12.612,0]],"v":[[22.836,0],[0,4.38],[-22.836,0],[0,-4.38]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.549019634724,0.443137258291,0.870588243008,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[244.487,298.839],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 8","np":2,"cix":2,"bm":0,"ix":8,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0.277,0.072],[0.432,-0.441],[0,0],[0,0],[0,0],[-1.859,-0.492],[-0.483,-1.802],[0,0]],"o":[[0,0],[-0.208,-0.774],[-0.626,-0.167],[0,0],[0,0],[0,0],[1.328,-1.356],[1.844,0.484],[0,0],[0,0]],"v":[[37.588,31.18],[19.605,-26.42],[18.451,-27.519],[16.769,-27.074],[-38.496,23.93],[-41.066,21.408],[14.197,-29.595],[19.365,-31.002],[23.082,-27.352],[41.066,30.248]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.164705887437,0.192156866193,0.203921571374,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[228.987,319.605],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 9","np":1,"cix":2,"bm":0,"ix":9,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[1.633,-5.214],[0.197,-0.433],[0.315,0.059],[0,0],[19.282,3.148],[1.791,1.122],[-0.492,1.673],[0,0],[-2.243,0.984],[-2.519,0.138],[-0.177,0.02],[-0.433,-0.59],[-2.164,-1.968],[-5.391,0.039],[-5.47,0.059],[-0.826,0.472],[-0.433,1.81],[-2.184,1.987],[-3.384,-1.298],[-0.02,-0.118]],"o":[[-0.138,0.453],[-0.295,-0.02],[0,0],[-19.597,-0.453],[-2.204,-0.354],[-1.259,-0.826],[0,0],[-0.433,-2.066],[2.243,-0.984],[0.177,-0.019],[0.531,0.531],[1.751,2.322],[3.975,3.601],[5.47,-0.06],[0.944,0],[1.614,-0.925],[0.787,-3.207],[3.837,0.315],[0.039,0.118],[1.377,5.273]],"v":[[35.653,8.658],[35.141,9.995],[34.217,9.858],[29.711,8.933],[-28.589,2.184],[-34.886,0.315],[-35.811,-4.25],[-36.381,-4.349],[-32.564,-8.047],[-25.185,-9.346],[-24.654,-9.385],[-23.198,-7.713],[-18.024,-0.708],[-2.735,3.011],[13.675,2.853],[16.449,2.361],[18.771,-2.518],[23.473,-9.995],[34.61,-7.792],[34.708,-7.457]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.439215689898,0.352941185236,0.800000011921,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[221.297,344.674],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 10","np":2,"cix":2,"bm":0,"ix":10,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0.787,-3.011],[0,0],[3.738,0.334],[0.315,0.059],[0,0],[19.282,3.148],[1.791,1.122],[-0.492,1.673],[0,0],[-2.243,0.984],[-2.519,0.138],[-0.177,0.02],[-15.288,-0.905],[-0.748,-0.059],[-3.384,-1.298],[-1.476,-1.2]],"o":[[0,0],[-0.827,3.109],[-0.295,-0.02],[0,0],[-19.597,-0.453],[-2.204,-0.354],[-1.259,-0.826],[0,0],[-0.433,-2.066],[2.243,-0.984],[0.177,-0.019],[15.288,-0.846],[0.728,0.039],[3.837,0.315],[1.869,0.709],[3.187,1.121]],"v":[[40.171,2.324],[39.325,5.432],[31.238,10.253],[30.314,10.116],[25.808,9.19],[-32.492,2.442],[-38.789,0.573],[-39.714,-3.992],[-40.284,-4.091],[-36.467,-7.79],[-29.088,-9.089],[-28.557,-9.128],[17.367,-9.895],[19.571,-9.738],[30.707,-7.534],[35.784,-4.72]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.549019634724,0.443137258291,0.870588243008,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[225.2,344.417],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 11","np":2,"cix":2,"bm":0,"ix":11,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0.098,0],[0.146,0.881],[-0.981,0.163],[-4.452,2.382],[0,0.003],[2.345,0.701],[4.827,0.304],[-0.062,0.993],[-1.004,-0.032],[-4.9,-1.472],[-0.199,-2.124],[0.952,-0.51],[5.66,-0.941]],"o":[[-0.865,0],[-0.163,-0.981],[5.273,-0.877],[1.639,-0.877],[-0.016,-0.165],[-4.638,-1.394],[-0.992,-0.063],[0.063,-0.992],[5.101,0.322],[3.416,1.023],[0.262,2.815],[-4.8,2.567],[-0.1,0.017]],"v":[[-8.439,8.818],[-10.213,7.313],[-8.732,5.242],[5.923,0.331],[7.624,-1.035],[4.726,-2.663],[-9.539,-5.223],[-11.222,-7.134],[-9.312,-8.817],[5.76,-6.113],[11.209,-1.369],[7.622,3.506],[-8.142,8.793]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.164705887437,0.192156866193,0.203921571374,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[304.713,250.016],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 12","np":1,"cix":2,"bm":0,"ix":12,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0.392,0],[0.355,0.447],[-0.779,0.617],[-4.713,25.063],[-0.972,-0.188],[0.184,-0.978],[19.421,-15.413]],"o":[[-0.53,0],[-0.618,-0.779],[18.919,-15.015],[0.184,-0.977],[0.977,0.183],[-4.832,25.693],[-0.331,0.264]],"v":[[-25.115,44.382],[-26.526,43.702],[-26.236,41.171],[23.346,-42.913],[25.448,-44.35],[26.885,-42.248],[-23.997,43.992]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.164705887437,0.192156866193,0.203921571374,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[288.838,294.46],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 13","np":1,"cix":2,"bm":0,"ix":13,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0.116,-0.009],[0.243,0.946],[0,0],[-0.956,0.29],[-0.276,-1.076],[0,0],[0.956,-0.29]],"o":[[-0.84,0.064],[0,0],[-0.276,-1.078],[0.962,-0.302],[0,0],[0.275,1.077],[-0.116,0.037]],"v":[[11.651,47.181],[9.769,45.693],[-13.232,-44.635],[-12,-47.112],[-9.769,-45.689],[13.232,44.639],[12,47.115]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.164705887437,0.192156866193,0.203921571374,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[325.068,295.328],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 14","np":1,"cix":2,"bm":0,"ix":14,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[325.068,295.328],"ix":2},"a":{"a":0,"k":[325.068,295.328],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 6","np":14,"cix":2,"bm":0,"ix":6,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,-5.799],[5.799,0],[0,5.799],[-5.799,0]],"o":[[0,5.799],[-5.799,0],[0,-5.799],[5.799,0]],"v":[[10.5,0],[0,10.5],[-10.5,0],[0,-10.5]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.992156863213,0.772549033165,0.156862750649,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[336.497,342.194],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[19.262,0],[0,-19.263],[-19.262,0],[0,19.262]],"o":[[-19.262,0],[0,19.262],[19.262,0],[0,-19.263]],"v":[[0,-34.933],[-34.933,0.001],[0,34.933],[34.933,0.001]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ind":1,"ty":"sh","ix":2,"ks":{"a":0,"k":{"i":[[21.491,0],[0,21.49],[-21.491,0],[0,-21.492]],"o":[[-21.491,0],[0,-21.492],[21.491,0],[0,21.49]],"v":[[0,38.975],[-38.975,0.001],[0,-38.975],[38.975,0.001]],"c":true},"ix":2},"nm":"Path 2","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.992156863213,0.772549033165,0.156862750649,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[336.497,342.025],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":1,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[0.674,36.954],[-0.674,36.954],[-0.674,-36.954],[0.674,-36.954]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.866666674614,0.89411765337,0.933333337307,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[336.592,342.533],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 3","np":1,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[36.954,0.674],[-36.954,0.674],[-36.954,-0.674],[36.954,-0.674]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.866666674614,0.89411765337,0.933333337307,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[336.497,342.026],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 4","np":1,"cix":2,"bm":0,"ix":4,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[-25.655,26.607],[-26.607,25.654],[25.655,-26.607],[26.607,-25.654]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.866666674614,0.89411765337,0.933333337307,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[336.497,342.025],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 5","np":1,"cix":2,"bm":0,"ix":5,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[25.655,26.607],[-26.607,-25.654],[-25.655,-26.607],[26.607,25.654]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.866666674614,0.89411765337,0.933333337307,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[336.497,342.025],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 6","np":1,"cix":2,"bm":0,"ix":6,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[336.497,342.025],"ix":2},"a":{"a":0,"k":[336.497,342.025],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 9","np":6,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,-5.799],[5.799,0],[0,5.799],[-5.799,0]],"o":[[0,5.799],[-5.799,0],[0,-5.799],[5.799,0]],"v":[[10.5,0],[0,10.5],[-10.5,0],[0,-10.5]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.992156863213,0.772549033165,0.156862750649,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[336.497,342.194],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[19.262,0],[0,-19.263],[-19.262,0],[0,19.262]],"o":[[-19.262,0],[0,19.262],[19.262,0],[0,-19.263]],"v":[[0,-34.933],[-34.933,0.001],[0,34.933],[34.933,0.001]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ind":1,"ty":"sh","ix":2,"ks":{"a":0,"k":{"i":[[21.491,0],[0,21.49],[-21.491,0],[0,-21.492]],"o":[[-21.491,0],[0,-21.492],[21.491,0],[0,21.49]],"v":[[0,38.975],[-38.975,0.001],[0,-38.975],[38.975,0.001]],"c":true},"ix":2},"nm":"Path 2","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.992156863213,0.772549033165,0.156862750649,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[336.497,342.025],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":1,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[0.674,36.954],[-0.674,36.954],[-0.674,-36.954],[0.674,-36.954]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.866666674614,0.89411765337,0.933333337307,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[336.592,342.533],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 3","np":1,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[36.954,0.674],[-36.954,0.674],[-36.954,-0.674],[36.954,-0.674]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.866666674614,0.89411765337,0.933333337307,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[336.497,342.026],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 4","np":1,"cix":2,"bm":0,"ix":4,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[-25.655,26.607],[-26.607,25.654],[25.655,-26.607],[26.607,-25.654]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.866666674614,0.89411765337,0.933333337307,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[336.497,342.025],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 5","np":1,"cix":2,"bm":0,"ix":5,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[25.655,26.607],[-26.607,-25.654],[-25.655,-26.607],[26.607,25.654]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.866666674614,0.89411765337,0.933333337307,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[336.497,342.025],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 6","np":1,"cix":2,"bm":0,"ix":6,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[336.497,342.025],"ix":2},"a":{"a":0,"k":[336.497,342.025],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 7","np":6,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[336.497,342.025],"ix":2},"a":{"a":0,"k":[336.497,342.025],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":1,"k":[{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"t":0,"s":[0]},{"t":45,"s":[-5400]}],"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 9","np":2,"cix":2,"bm":0,"ix":7,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":250,"st":0,"bm":0}],"markers":[]}'),nb=[{number:"1",text:"Jobs you can't find elsewhere",content:"We scrape millions of jobs directly from company websites daily. Many of these companies don't post them on job boards and prefer to post them on their own websites."},{number:"2",text:"No more ghost jobs",content:"We use a fine-tuned AI model to filter out ghost jobs, scams, and offshore consulting shops. On top of that, we don't force you to create an account to apply to jobs."},{number:"3",text:"Up-to-Date Job Listings",content:"Jobs are fetched 3x a day, and we also filter out reposts to ensure jobs are fresh. Other job sites let recruiters repost jobs whenever they want, so you end up seeing the same stale listings again and again."},{number:"4",text:"Advanced search filters",content:"We use ChatGPT's API to extract key information from each job listing, which powers our advanced filters. Learn more about how that works <a href='https://www.reddit.com/r/ChatGPT/comments/1mt2trl/update_i_scraped_41_million_jobs_with_chatgpt/' target='_blank' rel='noopener noreferrer' class='text-blue-600 underline'>here</a>."},{number:"5",text:"Obsessed with Feedback",content:'We take every piece of feedback seriously and have a dedicated community on Reddit (<a href="https://www.reddit.com/r/hiringcafe" target="_blank" rel="noopener noreferrer" class="text-blue-600 underline">r/hiringcafe</a>) where you can post feedback and get a quick response from our team.'}],nc=()=>{let{searchState:n}=(0,G.A)(),[e,i]=(0,l.useState)(!1),t=(0,$.A)({base:"full",md:"xl",lg:"2xl"}),{isOpen:r,onOpen:o,onClose:s}=(0,z.j)(),m="bannerClosed";return((0,l.useEffect)(()=>{"true"===localStorage.getItem(m)?i(!1):i(!0)},[]),!e||Object.keys(n||{}).length)?null:(0,a.jsxs)("div",{className:"flex justify-center items-center flex-col px-4 md:px-0 pb-4 pt-8 w-full",children:[(0,a.jsxs)("div",{className:"relative flex items-center justify-center w-full md:w-2/3 lg:w-1/2 2xl:w-1/3 bg-yellow-600/10 text-cyan-800 py-4 px-4 lg:py-0 lg:px-8 rounded-xl cursor-pointer mx-4 md:mx-0 shadow-md",onClick:o,children:[(0,a.jsxs)("div",{className:"flex justify-between items-center w-full",children:[(0,a.jsxs)("div",{className:"flex flex-col space-y-3",children:[(0,a.jsx)("span",{className:"text-lg font-semibold",children:"How is HiringCafe different?"}),(0,a.jsx)("span",{className:"text-sm",children:"Our quest to destroy Indeed and LinkedIn by building a 10x better job search engine."}),(0,a.jsx)("span",{className:"font-bold bg-cyan-800 rounded-full py-2 px-4 text-xs text-white w-fit",children:"Learn more"})]}),(0,a.jsx)("div",{className:"",children:(0,a.jsx)(u.A,{width:"150px",height:"150px",animationData:nx})})]}),(0,a.jsx)("button",{onClick:n=>{n.stopPropagation(),i(!1),localStorage.setItem(m,"true")},className:"absolute top-2 right-2 p-1 hover:bg-cyan-800 text-cyan-800 hover:text-white rounded-full","aria-label":"Close banner",children:(0,a.jsx)(M.A,{className:"w-5 h-5"})})]}),(0,a.jsxs)("span",{className:"text-base font-medium mt-4",children:["Employers -"," ",(0,a.jsx)(E(),{href:"https://www.reddit.com/r/hiringcafe/comments/1jwrrsy/hiringcafes_message_to_employers/",className:"text-blue-600 underline",target:"_blank",rel:"noopener noreferrer",children:"Read our message"})]}),(0,a.jsxs)(nu.aF,{isOpen:r,onClose:s,size:t,scrollBehavior:"inside",children:[(0,a.jsx)(q.m,{}),(0,a.jsxs)(np.$,{children:[(0,a.jsx)(J.r,{className:"border-b",children:(0,a.jsx)("span",{className:"text-xl text-cyan-800",children:"HiringCafe vs Others"})}),(0,a.jsx)(nd.s,{}),(0,a.jsxs)(H.c,{className:"border-b",children:[(0,a.jsxs)("p",{className:"mb-8 mt-4",children:["Get up to"," ",(0,a.jsx)("span",{className:"font-bold italic",children:"10x more responses"})," in\n              the same amount of time compared to other job sites. Here's why:"]}),(0,a.jsx)("div",{className:"flex flex-col space-y-8",children:nb.map((n,e)=>(0,a.jsxs)("div",{className:"flex items-start mb-2 space-x-2",children:[(0,a.jsxs)("span",{className:"text-3xl font-bold mr-2 text-cyan-800/30",children:[n.number,"."]}),(0,a.jsxs)("div",{className:"flex flex-col space-y-1",children:[(0,a.jsx)("span",{className:"text-base font-bold",children:n.text}),(0,a.jsx)("span",{className:"text-sm",dangerouslySetInnerHTML:{__html:n.content}})]})]},e))})]}),(0,a.jsx)(nf.j,{children:(0,a.jsx)(nv.$,{colorScheme:"blue",mr:3,onClick:s,children:"Got it!"})})]})]})]})};function ny(){let n=(0,k.useRouter)(),[e,i]=(0,l.useState)(!1),{state:t,isLoading:o}=(0,f.Ku)(),{jobs:v}=(0,l.useContext)(h.v),{company:b}=(0,r.A)(),{searchState:$}=(0,G.A)(),{totalCount:g,collapsedTotal:T}=function(){let n=(0,k.useRouter)(),{state:e,isLoading:i}=(0,f.Ku)(),[a,t]=(0,l.useState)(0),[r,o]=(0,l.useState)(0),[s,m]=(0,l.useState)(!1);return(0,l.useEffect)(()=>{let a=async()=>{m(!0);try{let n=await fetch("/api/search-jobs/get-total-count",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({searchState:e})}),i=await n.json();t(i.total),o(i.collapsedTotal)}catch(n){console.error("Error fetching search refinements:",n)}finally{m(!1)}};!i&&n.isReady&&a()},[e,i,n.isReady]),{totalCount:a,collapsedTotal:r,isLoading:s}}(),[V,D]=(0,l.useState)([]),[K,P]=(0,l.useState)(0),[S,A]=(0,l.useState)(!1),[I,w]=(0,l.useState)(!0),{isOpen:O,onOpen:W,onClose:R}=(0,z.j)(),[F,L]=(0,l.useState)(!1),{locations:j=[]}=t,N=(0,l.useMemo)(()=>(0,nm.GE)(j),[j]),C=(0,_.sf)(),Q=(0,l.useCallback)(c().debounce(n=>{C.capture("search_event_v5",n)},5e3,{leading:!1,trailing:!0}),[C]);(0,l.useEffect)(()=>{"true"===localStorage.getItem("freshJobsBannerDismissed")&&L(!1)},[]);let Y=(0,l.useRef)(0),U=(0,l.useCallback)(async function(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,i=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(o||!e)return;let a=Y.current+1;Y.current=a,I||w(!0);try{let e=await fetch("/api/search-jobs",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({size:40,page:n,searchState:t})}),r=await e.json();if(a!==Y.current)return;if(e.ok){if(0===n&&(Q(t),window.addEventListener("beforeunload",()=>{Q.flush()})),i?(D(r.results),P(1)):(D(n=>[...n,...r.results]),P(n=>n+1)),A(0===r.results.length||r.results.length<20),0===n)return()=>{window.removeEventListener("beforeunload",handleBeforeUnload),Q.cancel()}}else console.error("Error fetching hits:",r.error),A(!0),D([]),P(0)}catch(n){if(a!==Y.current)return;console.error("Error fetching hits:",n),A(!0),D([]),P(0)}finally{a===Y.current&&w(!1)}},[t,I,o,e]);(0,l.useEffect)(()=>{e||!n.isReady&&o||i(!0)},[n.isReady,o]),(0,l.useEffect)(()=>{e&&(P(0),U(0,!0))},[e,t]),(0,l.useEffect)(()=>{0===K&&window.scrollTo({top:0,behavior:"instant"})},[K]);let X=(0,l.useMemo)(()=>b?V:function(n){let e=c().groupBy(n,"collapse_key");return c().map(e,(n,e)=>({board:e,hits:null==n?void 0:n.map(n=>({...n}))}))}(V),[V,b]),Z=(0,l.useMemo)(()=>b?X.map(n=>{var e,i;let a=null==v?void 0:v.find(e=>e.objectID===n.objectID);return(null==a?void 0:null===(e=a.type)||void 0===e?void 0:e.toLowerCase())==="hidden"||a&&(null===(i=t.hideJobTypes)||void 0===i?void 0:i.includes(a.type))?null:{board:n.board_token,companyName:"",hits:[n],source:n.source}}).filter(Boolean):X.map(n=>{let e=n.hits.filter(n=>{var e,i;let a=null==v?void 0:v.find(e=>e.objectID===n.objectID);return!((null==a?void 0:null===(e=a.type)||void 0===e?void 0:e.toLowerCase())==="hidden"||a&&(null===(i=t.hideJobTypes)||void 0===i?void 0:i.includes(a.type)))});return{board:n.board,companyName:n.companyName,hits:e,source:n.source}}),[X,v,t,b]),nn=(0,l.useMemo)(()=>Z.map((n,e)=>(0,a.jsx)(m.A,{jobs:n.hits},"".concat(n.board,"___").concat(n.source,"___").concat(e))).filter(Boolean),[Z]);return!e||o||I&&!X.length?(0,a.jsx)("div",{className:"flex justify-center m-4 h-full min-h-screen",children:(0,a.jsx)(u.A,{width:"80px",height:"80px",animationData:y})}):X.length||I||o?(0,a.jsxs)("div",{className:"relative",children:[I&&(0,a.jsx)("div",{className:"absolute inset-x-0 h-0.5 bg-neutral-200 overflow-hidden",children:(0,a.jsx)("div",{className:"absolute top-0 left-0 h-full bg-pink-500 w-full animate-slim-slide"})}),F&&(0,a.jsxs)("div",{className:"flex justify-between items-center px-2 md:px-4 lg:px-8 py-2 text-center text-xs bg-green-50 border-y border-green-600",children:[(0,a.jsx)("div",{className:"font-bold",children:'\uD83D\uDCE3 You may see fewer "fresh jobs" now—we\'ve filtered out reposted and\n          ghost jobs. '}),(0,a.jsxs)("div",{className:"flex items-center space-x-4 flex-none",children:[(0,a.jsx)(E(),{href:"https://www.reddit.com/r/hiringcafe/comments/1nvl51o/less_reposted_jobs_less_fresh_jobs/",className:"bg-white text-black border border-gray-300 rounded-md p-2 font-bold hover:bg-gray-100 flex-none",target:"_blank",rel:"noopener noreferrer",children:"Learn more"}),(0,a.jsx)("button",{onClick:()=>{L(!1),localStorage.setItem("freshJobsBannerDismissed","true")},"aria-label":"Close banner",title:"Don't show again",children:(0,a.jsx)(M.A,{className:"h-4 w-4 stroke-2"})})]})]}),(0,a.jsx)(nc,{}),(0,a.jsx)("div",{className:"px-4 md:px-8 xl:px-16 my-4",children:(0,a.jsx)(B,{loading:I||o})}),(0,a.jsx)("div",{className:"px-4 md:px-8 xl:px-16 my-4",children:(0,a.jsx)(nl,{})}),(0,a.jsx)("div",{className:"px-4 md:px-8 xl:px-16 my-4",children:g?(0,a.jsxs)("div",{className:"flex items-center space-x-1 text-xs font-semibold italic w-full overflow-auto scrollbar-hide",children:[!window.__SEO_URL_MODE&&(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)("span",{className:"flex-none",children:[g.toLocaleString()," job",1===g?"":"s"]}),T&&(0,a.jsxs)("button",{onClick:W,className:"flex-none flex items-center space-x-1 text-gray-800 hover:text-black focus:outline-none","aria-label":"Learn about collapsed companies",children:[(0,a.jsxs)("span",{className:"flex-none",children:["\xb7 ",T.toLocaleString()," companies"]}),(0,a.jsx)(nh.A,{className:"h-4 w-4"})]}),(0,a.jsxs)("span",{className:"text-sm font-normal not-italic flex-none",children:["-"," "]})]}),(0,a.jsxs)("span",{className:"text-sm font-normal not-italic flex-none",children:[$&&!Object.keys($).length?"Latest jobs - ":"",N||"selected location"]})]}):null}),(0,a.jsx)(s.A,{className:"".concat(I&&0===K?"opacity-30 pointer-events-none":"opacity-100"," transition-opacity duration-300"),dataLength:X.length,next:()=>U(K),hasMore:!S,loader:(0,a.jsx)("div",{className:"flex justify-center m-4",children:(0,a.jsx)(u.A,{width:"50px",height:"50px",animationData:p})}),scrollThreshold:.9,children:b?(0,a.jsx)(x,{items:nn}):(0,a.jsx)("div",{className:"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 2xl:grid-cols-5 gap-x-4 gap-y-12 md:gap-x-10 px-4 md:px-8 xl:px-16 pb-4",children:nn})}),(0,a.jsxs)(nu.aF,{isOpen:O,onClose:R,size:{base:"full",md:"xl"},scrollBehavior:"inside",children:[(0,a.jsx)(q.m,{}),(0,a.jsxs)(np.$,{children:[(0,a.jsx)(J.r,{children:"Why We Group Jobs by Company"}),(0,a.jsx)(nd.s,{}),(0,a.jsxs)(H.c,{children:[(0,a.jsxs)("video",{controls:!1,className:"mt-4 w-full max-w-xs mx-auto",autoPlay:!0,loop:!0,children:[(0,a.jsx)("source",{src:"/hiringcafe-cards-demo.mp4",type:"video/mp4"}),"Your browser does not support the video tag."]}),(0,a.jsx)("p",{className:"text-sm leading-relaxed mt-6 mb-32",children:'We group multiple job postings from the same company into a single\n              card. Without collapsing, some companies with hundreds or even\n              thousands of job listings might overshadow other valuable\n              opportunities. Collapsing them helps keep your feed organized. If\n              a company has multiple jobs, you can use the left and right arrows\n              to browse the additional jobs, or click "View All" to see all of\n              that company\'s postings.'})]})]})]})]}):(0,a.jsxs)("div",{className:"flex flex-col min-h-screen",children:[(0,a.jsx)("div",{className:"px-4 md:px-8 xl:px-16 my-4",children:(0,a.jsx)(B,{loading:I||o})}),(0,a.jsx)("div",{className:"px-4 md:px-8 xl:px-16",children:(0,a.jsx)(nl,{})}),(0,a.jsx)("div",{className:"flex justify-center p-8 text-center text-sm",children:(0,a.jsxs)("div",{className:"flex flex-col flex-auto items-center max-w-5xl",children:[(0,a.jsx)(u.A,{width:"200px",height:"200px",animationData:d,customOptions:{loop:!1}}),(0,a.jsx)("span",{className:"text-gray-500 font-medium text-xl",children:"You're all caught up!"}),(0,a.jsx)("span",{className:"text-gray-500 text-base mt-1 font-light",children:"Try adjusting your filters for more results."})]})})]})}function nk(){return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("div",{className:"flex flex-col md:bg-neutral-50 w-full py-2 lg:sticky lg:top-0 md:border-b md:z-50",children:(0,a.jsx)("div",{className:"flex justify-center w-full",children:(0,a.jsxs)("div",{className:"flex flex-col w-full max-w-[2000px] space-y-8 md:space-y-2 items-center",children:[(0,a.jsx)(t.A,{}),(0,a.jsx)(o,{})]})})}),(0,a.jsx)("div",{className:"flex justify-center md:bg-neutral-100",children:(0,a.jsx)("div",{className:"flex flex-col w-full max-w-[2000px]",children:(0,a.jsx)(ny,{})})})]})}}}]);